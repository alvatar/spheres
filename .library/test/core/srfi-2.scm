(%load-library '(spheres/core base))
(%load-library '(spheres/util check))

(check-set-mode! 'summary)

(check (and-let* () 1) => 1)
(check (and-let* () 1 2) => 2)
(check (and-let* () ) => #t)

(check (let ((x #f)) (and-let* (x))) => #f)
(check (let ((x 1)) (and-let* (x))) => 1)
(check (and-let* ((x #f)) ) => #f)
(check (and-let* ((x 1)) ) => 1)
;; (must-be-a-syntax-error (and-let* ( #f (x 1))) )
(check (and-let* ((#f) (x 1))) => #f)
;; (must-be-a-syntax-error (and-let* (2 (x 1))) )
(check (and-let* ((2) (x 1))) => 1)
(check (and-let* ((x 1) (2))) => 2)
(check (let ((x #f)) (and-let* (x) x)) => #f)
(check (let ((x "")) (and-let* (x) x)) => "")
(check (let ((x "")) (and-let* (x)  )) => "")
(check (let ((x 1)) (and-let* (x) (+ x 1))) => 2)
(check (let ((x #f)) (and-let* (x) (+ x 1))) => #f)
(check (let ((x 1)) (and-let* (((positive? x))) (+ x 1))) => 2)
(check (let ((x 1)) (and-let* (((positive? x))) )) => #t)
(check (let ((x 0)) (and-let* (((positive? x))) (+ x 1))) => #f)
(check (let ((x 1)) (and-let* (((positive? x)) (x (+ x 1))) (+ x 1))) => 3)
;; (must-be-a-syntax-error
;;   (let ((x 1)) (and-let* (((positive? x)) (x (+ x 1)) (x (+ x 1))) (+ x 1))))
(check (let ((x 1)) (and-let* (x ((positive? x))) (+ x 1))) => 2)
(check (let ((x 1)) (and-let* ( ((begin x)) ((positive? x))) (+ x 1))) => 2)
(check (let ((x 0)) (and-let* (x ((positive? x))) (+ x 1))) => #f)
(check (let ((x #f)) (and-let* (x ((positive? x))) (+ x 1))) => #f)
(check (let ((x #f)) (and-let* ( ((begin x)) ((positive? x))) (+ x 1))) => #f)

(check  (let ((x 1)) (and-let* (x (y (- x 1)) ((positive? y))) (/ x y))) => #f)
(check  (let ((x 0)) (and-let* (x (y (- x 1)) ((positive? y))) (/ x y))) => #f)
(check  (let ((x #f)) (and-let* (x (y (- x 1)) ((positive? y))) (/ x y))) => #f)
(check  (let ((x 3)) (and-let* (x (y (- x 1)) ((positive? y))) (/ x y))) => 3/2)

(check-report)
