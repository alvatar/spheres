;;;============================================================================

;;; File: "syntax-case.scm", Time-stamp: <2014-03-21 22:26:28 matthastie>

;;; Copyright (c) 1998-2008 by Marc Feeley, All Rights Reserved.

;;; This is version 3.2 .

;; This version includes a patch which avoids quoting self-evaluating
;; constants.  This makes it possible to use some Gambit specific forms
;; such as declare, namespace and define-macro.

;; This is an implementation of "syntax-case" for the Gambit-C 4.0
;; system based on the portable implementation "psyntax.ss".  At the
;; top of the file "psyntax.ss" can be found this information:
;;
;;      Portable implementation of syntax-case
;;      Extracted from Chez Scheme Version 7.3 (Feb 26, 2007)
;;      Authors: R. Kent Dybvig, Oscar Waddell, Bob Hieb, Carl Bruggeman

;; This file can be used to replace the builtin macro expander of the
;; interpreter and compiler.  Source code correlation information
;; (filename and position in file) is preserved by the expander.  The
;; expander mangles non-global variable names and this complicates
;; debugging somewhat.  Note that Gambit's normal parser processes the
;; input after expansion by the syntax-case expander.  Since the
;; syntax-case expander does not know about Gambit's syntactic
;; extensions (like DSSSL parameters) some of the syntactic
;; extensions cannot be used.  On the other hand, the syntax-case
;; expander defines some new special forms, such as "module",
;; "alias", and "eval-when".

;; You can simply load this file at the REPL with:
;;
;;   (load "syntax-case")
;;
;; For faster macro processing it is worthwhile to compile the file
;; with the compiler.  You can also rename this file to "gambcext.scm"
;; and put it in the Gambit "lib" installation directory so that it is
;; loaded every time the interpreter and compiler are started.
;;
;; Alternatively, the expander can be loaded from the command line
;; like this:
;;
;;   % gsi ~~lib/syntax-case -
;;   > (pp (lambda (x y) (if (< x y) (let ((z (* x x))) z))))
;;   (lambda (%%x0 %%y1)
;;     (if (< %%x0 %%y1) ((lambda (%%z2) %%z2) (* %%x0 %%x0)) (void)))

;;;============================================================================

(##declare
 (standard-bindings)
 (extended-bindings)
 (inlining-limit 100)
 (block)
)

(##namespace ("sc#"))

(##include "~~lib/gambit#.scm")

(##namespace (""

$make-environment
$sc-put-cte
$syntax-dispatch
bound-identifier=?
datum->syntax
environment?
free-identifier=?
generate-temporaries
identifier?
interaction-environment
literal-identifier=?
syntax-error
syntax->datum
syntax->list
syntax->vector
$load-module
$update-module
$include-file-hook
$generate-id
syntax-case-debug
))

(##namespace ("sc#"

interaction-environment
eval
gensym

))

;;;============================================================================

;; The following procedures are needed by the syntax-case system.

(define andmap
  (lambda (f first . rest)
    (or (null? first)
        (if (null? rest)
            (let andmap ((first first))
              (let ((x (car first)) (first (cdr first)))
                (if (null? first)
                    (f x)
                    (and (f x) (andmap first)))))
            (let andmap ((first first) (rest rest))
              (let ((x (car first))
                    (xr (map car rest))
                    (first (cdr first))
                    (rest (map cdr rest)))
                (if (null? first)
                    (apply f (cons x xr))
                    (and (apply f (cons x xr)) (andmap first rest)))))))))

(define ormap
  (lambda (proc list1)
    (and (not (null? list1))
         (or (proc (car list1)) (ormap proc (cdr list1))))))

(define eval
  (lambda (expr)
    (cond ((and (##pair? expr)
                (##equal? (##car expr) "noexpand")
                (##pair? (##cdr expr))
                (##null? (##cddr expr)))
           (##eval (##cadr expr)))
          ((and (##source? expr)
                (##pair? (##source-code expr))
                (##source? (##car (##source-code expr)))
                (##equal? (##source-code (##car (##source-code expr))) "noexpand")
                (##pair? (##cdr (##source-code expr)))
                (##null? (##cddr (##source-code expr))))
           (##eval (##cadr (##source-code expr))))
          (else
           (##raise-error-exception
            "eval expects an expression of the form (\"noexpand\" <expr>)"
            (##list expr))))))

(define gensym-count 0)

(define gensym
  (lambda id
    (let ((n gensym-count))
      (set! gensym-count (+ n 1))
      (string->symbol
       (string-append "%%"
                      (if (null? id) "" (symbol->string (car id)))
                      (number->string n))))))

(define gensym?
  (lambda (obj)
    (and (symbol? obj)
         (let ((str (symbol->string obj)))
           (and (> (string-length str) 2)
                (string=? (substring str 0 2) "%%"))))))

(define prop-table (##make-table))

(define remprop
  (lambda (sym key)
    (let ((sym-key (cons sym key)))
      (##table-set! prop-table sym-key))))

(define putprop
  (lambda (sym key val)
    (let ((sym-key (cons sym key)))
      (##table-set! prop-table sym-key val))))

(define getprop
  (lambda (sym key)
    (let ((sym-key (cons sym key)))
      (##table-ref prop-table sym-key #f))))

(define list*
  (lambda (arg1 . other-args)

    (define (fix lst)
      (if (null? (cdr lst))
          (car lst)
          (cons (car lst) (fix (cdr lst)))))

    (fix (cons arg1 other-args))))

(define remq
  (lambda (obj lst)
    (cond ((null? lst)
           '())
          ((eq? (car lst) obj)
           (remq obj (cdr lst)))
          (else
           (cons (car lst) (remq obj (cdr lst)))))))

;;;----------------------------------------------------------------------------

;; These initial definitions are needed because these variables are
;; mutated with a "set!" without a prior definition.

(define $sc-put-cte (make-parameter #f))
(define sc-expand (lambda (src) src)) ; temporary definition
(define $make-environment #f)
(define make-expander #f)
(define environment? #f)
(define interaction-environment #f)
(define identifier? #f)
(define syntax->list #f)
(define syntax->vector #f)
(define syntax->datum #f)
(define datum->syntax #f)
(define generate-temporaries #f)
(define free-identifier=? #f)
(define bound-identifier=? #f)
(define literal-identifier=? #f)
(define syntax-error #f)
(define $syntax-dispatch #f)
(define visit-marker '#(visit))
(define $load-module #f)
(define $update-module #f)
(define $include-file-hook #f)
(define syntax-case-debug (make-parameter #f))

;;; generate-id ideally produces globally unique symbols, i.e., symbols
;;; unique across system runs, to support separate compilation/expansion.
;;; Use gensyms if you do not need to support separate compilation/
;;; expansion or if your system's gensym creates globally unique
;;; symbols (as in Chez Scheme).  Otherwise, use the following code
;;; as a starting point.  session-key should be a unique string for each
;;; system run to support separate compilation; the default value given
;;; is satisfactory during initial development only.

(define $generate-id
  (make-parameter
   (let ((digits "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!$%&*/:<=>?~_^.+-"))
     (let ((base (string-length digits)) (session-key "_"))
       (define make-digit (lambda (x) (string-ref digits x)))
       (define fmt
         (lambda (n)
           (let fmt ((n n) (a '()))
             (if (< n base)
                 (list->string (cons (make-digit n) a))
                 (let ((r (modulo n base)) (rest (quotient n base)))
                   (fmt rest (cons (make-digit r) a)))))))
       (let ((n -1))
         (lambda (name) ;; name is #f or a symbol
           (set! n (+ n 1))
           (string->symbol 
            (string-append session-key
                           (fmt n)
                           (if name
                               (string-append "." (symbol->string name))
                               "")))))))))

;;;----------------------------------------------------------------------------

;;; Interface to Gambit's source code annotations.

(define annotation?
  (lambda (x)
;;    (pp `(annotation? ,x))
    (##source? x)))

(define annotation-expression
  (lambda (x)
;;    (pp `(annotation-expression ,x))
    (##source-code x)))

(define annotation-stripped
  (lambda (x)
;;    (pp `(annotation-stripped ,x))
    (##desourcify x)))

(define build-source
  (lambda (ae x)
;;    (pp `(build-source ,ae ,x))
    (if (##source? ae)
        (##make-source x (##source-locat ae))
        (##make-source x #f))))

(define attach-source
  (lambda (ae datum)
;;    (pp `(attach-source ,ae ,datum))
    (let ((src
           (if (##source? ae)
               ae
               (##make-source ae #f))))

      (define (datum->source x)
        (##make-source (cond ((pair? x)
                              (list-convert x))
                             ((box? x)
                              (box (datum->source (unbox x))))
                             ((vector? x)
                              (vector-convert x))
                             (else
                              x))
                       (##source-locat src)))

      (define (list-convert lst)
        (cons (datum->source (car lst))
              (list-tail-convert (cdr lst))))

      (define (list-tail-convert lst)
        (cond ((pair? lst)
               (if (quoting-form? lst)
                   (datum->source lst)
                   (cons (datum->source (car lst))
                         (list-tail-convert (cdr lst)))))
              ((null? lst)
               '())
              (else
               (datum->source lst))))

      (define (quoting-form? x)
        (let ((first (car x))
              (rest (cdr x)))
          (and (pair? rest)
               (null? (cdr rest))
               (or (eq? first 'quote)
                   (eq? first 'quasiquote)
                   (eq? first 'unquote)
                   (eq? first 'unquote-splicing)))))

      (define (vector-convert vect)
        (let* ((len (vector-length vect))
               (v (make-vector len)))
          (let loop ((i (- len 1)))
            (if (>= i 0)
              (begin
                (vector-set! v i (datum->source (vector-ref vect i)))
                (loop (- i 1)))))
          v))

      (datum->source datum))))

;;;----------------------------------------------------------------------------

(define self-eval?
  (lambda (x)
    (or (number? x)
        (string? x)
        (char? x)
        (keyword? x)
        (memq x
              '(#f
                #t
                #!eof
                #!void
                #!unbound
                #!unbound2
                #!optional
                #!rest
                #!key)))))

;;;----------------------------------------------------------------------------

(define (unmark! src)

  (define (unmark-list! lst)
    (cond ((pair? lst)
           (unmark! (car lst))
           (unmark-list! (cdr lst)))))

  (define (unmark-vector! vect)
    (let ((len (vector-length vect)))
      (do ((i 0 (fx+ i 1)))
          ((fx= i len))
        (unmark! (vector-ref vect i)))))
    
  (cond ((and (vector? src)
              (positive? (vector-length src))
              (equal? (vector-ref src 0) visit-marker))
         (vector-set! src 0 ##source1-marker)
         (unmark! (##source-code src)))
        ((pair? src)
         (unmark-list! src))
        ((vector? src)
         (unmark-vector! src))
        ((box? src)
         (unmark! (unbox src)))
        (else src)))

;;;============================================================================

(set! ##expression-parsing-exception-names
      (append '((psyntax-error . "Syntax expansion failure:")
                (invalid-argument . "Invalid argument:"))
            ##expression-parsing-exception-names))

;;;============================================================================

((lambda () (letrec ((%%noexpand35 "noexpand") (%%make-syntax-object36 (lambda (%%p1455 %%p2456) (begin (##declare (extended-bindings)) (##structure '#0=#structure(#1=#structure(#1# ##type-5 type 8 #f #(id 1 #f name 5 #f flags 5 #f super 5 #f fields 5 #f)) ##type-2-2D9C624D-3630-42AF-884C-FD82C537B2D7 syntax-object 24 #f #(expression 2 #f wrap 2 #f)) %%p1455 %%p2456)))) (%%syntax?37 (lambda (%%obj457) (begin (##declare (extended-bindings)) (##structure-direct-instance-of? %%obj457 '##type-2-2D9C624D-3630-42AF-884C-FD82C537B2D7)))) (%%syntax-expression38 (lambda (%%obj458) (((lambda () (begin (##declare (extended-bindings)) ##direct-structure-ref))) %%obj458 1 '#0# %%syntax-expression38))) (%%syntax-wrap39 (lambda (%%obj459) (((lambda () (begin (##declare (extended-bindings)) ##direct-structure-ref))) %%obj459 2 '#0# %%syntax-wrap39))) (%%top-level-eval-hook40 (lambda (%%x460) (eval (list %%noexpand35 %%x460)))) (%%local-eval-hook41 (lambda (%%x461) (eval (list %%noexpand35 %%x461)))) (%%define-top-level-value-hook42 (lambda (%%sym462 %%val463) (%%top-level-eval-hook40 (build-source #f (list (build-source #f 'define) %%sym462 ((lambda (%%x464) (if (self-eval? %%val463) %%x464 (build-source #f (list (build-source #f 'quote) %%x464)))) (attach-source #f %%val463))))))) (%%put-cte-hook43 (lambda (%%symbol465 %%val466) (($sc-put-cte) %%symbol465 %%val466 '*top*))) (%%get-global-definition-hook44 (lambda (%%symbol467) (getprop %%symbol467 '*sc-expander*))) (%%put-global-definition-hook45 (lambda (%%symbol468 %%x469) (if (not %%x469) (remprop %%symbol468 '*sc-expander*) (putprop %%symbol468 '*sc-expander* %%x469)))) (%%read-only-binding?46 (lambda (%%symbol470) #f)) (%%get-import-binding47 (lambda (%%symbol471 %%token472) (getprop %%symbol471 %%token472))) (%%update-import-binding!48 (lambda (%%symbol473 %%token474 %%p475) ((lambda (%%x476) (if (not %%x476) (remprop %%symbol473 %%token474) (putprop %%symbol473 %%token474 %%x476))) (%%p475 (%%get-import-binding47 %%symbol473 %%token474))))) (%%built-lambda?132 (lambda (%%x477) ((lambda (%%t478) (if %%t478 %%t478 (if (##source? %%x477) (if (pair? (##source-code %%x477)) (if (##source? (car (##source-code %%x477))) (eq? (##source-code (car (##source-code %%x477))) 'lambda) #f) #f) #f))) (if (pair? %%x477) (eq? (car %%x477) 'lambda) #f)))) (%%build-sequence150 (lambda (%%ae479 %%exps480) ((letrec ((%%loop481 (lambda (%%exps482) (if (null? (cdr %%exps482)) (car %%exps482) (if ((lambda (%%x483) ((lambda (%%t484) (if %%t484 %%t484 (if (##source? %%x483) (if (pair? (##source-code %%x483)) (if (##source? (car (##source-code %%x483))) (if (eq? (##source-code (car (##source-code %%x483))) 'void) (null? (cdr (##source-code %%x483))) #f) #f) #f) #f))) (equal? %%x483 '(void)))) (car %%exps482)) (%%loop481 (cdr %%exps482)) (build-source %%ae479 (cons (build-source %%ae479 'begin) %%exps482))))))) %%loop481) %%exps480))) (%%build-letrec151 (lambda (%%ae485 %%vars486 %%val-exps487 %%body-exp488) (if (null? %%vars486) %%body-exp488 (build-source %%ae485 (list (build-source %%ae485 'letrec) (build-source %%ae485 (map (lambda (%%v489 %%e490) (build-source %%ae485 (list %%v489 %%e490))) %%vars486 %%val-exps487)) %%body-exp488))))) (%%build-body152 (lambda (%%ae491 %%vars492 %%val-exps493 %%body-exp494) (%%build-letrec151 %%ae491 %%vars492 %%val-exps493 %%body-exp494))) (%%build-top-module153 (lambda (%%ae495 %%types496 %%vars497 %%val-exps498 %%body-exp499) (call-with-values (lambda () ((letrec ((%%f500 (lambda (%%types501 %%vars502) (if (null? %%types501) (values '() '() '()) ((lambda (%%var503) (call-with-values (lambda () (%%f500 (cdr %%types501) (cdr %%vars502))) (lambda (%%vars504 %%defns505 %%sets506) (if (eq? (car %%types501) 'global) ((lambda (%%x507) (values (cons %%x507 %%vars504) (cons (build-source #f (list (build-source #f 'define) %%var503 (%%chi-void448))) %%defns505) (cons (build-source #f (list (build-source #f 'set!) %%var503 %%x507)) %%sets506))) (build-source #f (gensym %%var503))) (values (cons %%var503 %%vars504) %%defns505 %%sets506))))) (car %%vars502)))))) %%f500) %%types496 %%vars497)) (lambda (%%vars508 %%defns509 %%sets510) (if (null? %%defns509) (%%build-letrec151 %%ae495 %%vars508 %%val-exps498 %%body-exp499) (%%build-sequence150 #f (append %%defns509 (list (%%build-letrec151 %%ae495 %%vars508 %%val-exps498 (%%build-sequence150 #f (append %%sets510 (list %%body-exp499)))))))))))) (%%resolve-annotation179 (lambda (%%object511) (if (if (%%syntax?37 %%object511) (annotation? (%%syntax-expression38 %%object511)) #f) (%%syntax-expression38 %%object511) (if (annotation? %%object511) %%object511 (build-source #f %%object511))))) (%%sanitize-binding187 (lambda (%%b512) (if (procedure? %%b512) (cons 'macro %%b512) (if (%%binding?201 %%b512) (if ((lambda (%%t513) (if (memv %%t513 '(core macro macro! deferred)) (procedure? (%%binding-value198 %%b512)) (if (memv %%t513 '($module)) (%%interface?372 (%%binding-value198 %%b512)) (if (memv %%t513 '(lexical)) #f (if (memv %%t513 '(global meta-variable)) (symbol? (%%binding-value198 %%b512)) (if (memv %%t513 '(syntax)) ((lambda (%%x514) (if (pair? %%x514) (if #f ((lambda (%%n515) (if (integer? %%n515) (if (exact? %%n515) (>= %%n515 0) #f) #f)) (cdr %%x514)) #f) #f)) (%%binding-value198 %%b512)) (if (memv %%t513 '(begin define define-syntax set! $module-key $import eval-when meta)) (null? (%%binding-value198 %%b512)) (if (memv %%t513 '(local-syntax)) (boolean? (%%binding-value198 %%b512)) (if (memv %%t513 '(displaced-lexical)) (eq? (%%binding-value198 %%b512) #f) #t))))))))) (%%binding-type197 %%b512)) %%b512 #f) #f)))) (%%binding-type197 car) (%%binding-value198 cdr) (%%set-binding-type!199 set-car!) (%%set-binding-value!200 set-cdr!) (%%binding?201 (lambda (%%x516) (if (pair? %%x516) (symbol? (car %%x516)) #f))) (%%extend-env211 (lambda (%%label517 %%binding518 %%r519) (cons (cons %%label517 %%binding518) %%r519))) (%%extend-env*212 (lambda (%%labels520 %%bindings521 %%r522) (if (null? %%labels520) %%r522 (%%extend-env*212 (cdr %%labels520) (cdr %%bindings521) (%%extend-env211 (car %%labels520) (car %%bindings521) %%r522))))) (%%extend-var-env*213 (lambda (%%labels523 %%vars524 %%r525) (if (null? %%labels523) %%r525 (%%extend-var-env*213 (cdr %%labels523) (cdr %%vars524) (%%extend-env211 (car %%labels523) (cons 'lexical (car %%vars524)) %%r525))))) (%%displaced-lexical?214 (lambda (%%id526 %%r527) ((lambda (%%n528) (if %%n528 ((lambda (%%b529) (eq? (%%binding-type197 %%b529) 'displaced-lexical)) (%%lookup217 %%n528 %%r527)) #f)) (%%id-var-name353 %%id526 '(()))))) (%%displaced-lexical-error215 (lambda (%%id530) (syntax-error %%id530 (if (%%id-var-name353 %%id530 '(())) "identifier out of context" "identifier not visible")))) (%%lookup*216 (lambda (%%x531 %%r532) ((lambda (%%t533) (if %%t533 (cdr %%t533) (if (symbol? %%x531) ((lambda (%%t534) (if %%t534 %%t534 (cons 'global %%x531))) (%%get-global-definition-hook44 %%x531)) '(displaced-lexical . #f)))) (assq %%x531 %%r532)))) (%%lookup217 (lambda (%%x535 %%r536) (letrec ((%%whack-binding!537 (lambda (%%b538 %%*b539) (begin (%%set-binding-type!199 %%b538 (%%binding-type197 %%*b539)) (%%set-binding-value!200 %%b538 (%%binding-value198 %%*b539)))))) ((lambda (%%b540) (begin (if (eq? (%%binding-type197 %%b540) 'deferred) (%%whack-binding!537 %%b540 (%%make-transformer-binding218 ((%%binding-value198 %%b540)))) (void)) %%b540)) (%%lookup*216 %%x535 %%r536))))) (%%make-transformer-binding218 (lambda (%%b541) ((lambda (%%t542) (if %%t542 %%t542 (syntax-error %%b541 "invalid transformer"))) (%%sanitize-binding187 %%b541)))) (%%defer-or-eval-transformer219 (lambda (%%eval543 %%x544) (if (%%built-lambda?132 %%x544) (cons 'deferred (lambda () (%%eval543 %%x544))) (%%make-transformer-binding218 (%%eval543 %%x544))))) (%%global-extend220 (lambda (%%type545 %%sym546 %%val547) (%%put-cte-hook43 %%sym546 (cons %%type545 %%val547)))) (%%nonsymbol-id?221 (lambda (%%x548) (if (%%syntax?37 %%x548) (symbol? ((lambda (%%e549) (if (annotation? %%e549) (annotation-expression %%e549) %%e549)) (%%syntax-expression38 %%x548))) #f))) (%%id?222 (lambda (%%x550) (if (symbol? %%x550) #t (if (%%syntax?37 %%x550) (symbol? ((lambda (%%e551) (if (annotation? %%e551) (annotation-expression %%e551) %%e551)) (%%syntax-expression38 %%x550))) (if (annotation? %%x550) (symbol? (annotation-expression %%x550)) #f))))) (%%id-marks228 (lambda (%%id552) (if (%%syntax?37 %%id552) (%%wrap-marks232 (%%syntax-wrap39 %%id552)) (%%wrap-marks232 '((top)))))) (%%id-subst229 (lambda (%%id553) (if (%%syntax?37 %%id553) (%%wrap-subst233 (%%syntax-wrap39 %%id553)) (%%wrap-marks232 '((top)))))) (%%id-sym-name&marks230 (lambda (%%x554 %%w555) (if (%%syntax?37 %%x554) (values ((lambda (%%e556) (if (annotation? %%e556) (annotation-expression %%e556) %%e556)) (%%syntax-expression38 %%x554)) (%%join-marks342 (%%wrap-marks232 %%w555) (%%wrap-marks232 (%%syntax-wrap39 %%x554)))) (values ((lambda (%%e557) (if (annotation? %%e557) (annotation-expression %%e557) %%e557)) %%x554) (%%wrap-marks232 %%w555))))) (%%make-wrap231 cons) (%%wrap-marks232 car) (%%wrap-subst233 cdr) (%%##type-1-indirect-label271 (((lambda () (begin (##declare (extended-bindings)) ##structure))) ##type-type (((lambda () (begin (##declare (extended-bindings)) ##string->uninterned-symbol))) "##type-1-indirect-label") 'indirect-label 8 #f '#(label 0 #f))) (%%make-indirect-label272 (lambda (%%p1558) (begin (##declare (extended-bindings)) (##structure %%##type-1-indirect-label271 %%p1558)))) (%%indirect-label?273 (lambda (%%obj559) (begin (##declare (extended-bindings)) (##structure-direct-instance-of? %%obj559 ((lambda () (begin (##declare (extended-bindings) (not safe)) (##type-id %%##type-1-indirect-label271)))))))) (%%indirect-label-label274 (lambda (%%obj560) (((lambda () (begin (##declare (extended-bindings)) ##direct-structure-ref))) %%obj560 1 %%##type-1-indirect-label271 %%indirect-label-label274))) (%%set-indirect-label-label!275 (lambda (%%obj561 %%val562) (((lambda () (begin (##declare (extended-bindings)) ##direct-structure-set!))) %%obj561 %%val562 1 %%##type-1-indirect-label271 %%set-indirect-label-label!275))) (%%gen-indirect-label276 (lambda () (%%make-indirect-label272 (%%gen-label279)))) (%%get-indirect-label277 (lambda (%%x563) (%%indirect-label-label274 %%x563))) (%%set-indirect-label!278 (lambda (%%x564 %%v565) (%%set-indirect-label-label!275 %%x564 %%v565))) (%%gen-label279 (lambda () (string #\i))) (%%label?280 (lambda (%%x566) ((lambda (%%t567) (if %%t567 %%t567 ((lambda (%%t568) (if %%t568 %%t568 (%%indirect-label?273 %%x566))) (symbol? %%x566)))) (string? %%x566)))) (%%gen-labels281 (lambda (%%ls569) (if (null? %%ls569) '() (cons (%%gen-label279) (%%gen-labels281 (cdr %%ls569)))))) (%%make-ribcage282 (lambda (%%p1570 %%p2571 %%p3572) (begin (##declare (extended-bindings)) (##structure '#2=#structure(#1# ##type-3-0E54356E-1759-409D-AB3F-0E5AD9E68939 ribcage 24 #f #(symnames 0 #f marks 0 #f labels 0 #f)) %%p1570 %%p2571 %%p3572)))) (%%ribcage?283 (lambda (%%obj573) (begin (##declare (extended-bindings)) (##structure-direct-instance-of? %%obj573 '##type-3-0E54356E-1759-409D-AB3F-0E5AD9E68939)))) (%%ribcage-symnames284 (lambda (%%obj574) (((lambda () (begin (##declare (extended-bindings)) ##direct-structure-ref))) %%obj574 1 '#2# %%ribcage-symnames284))) (%%set-ribcage-symnames!285 (lambda (%%obj575 %%val576) (((lambda () (begin (##declare (extended-bindings)) ##direct-structure-set!))) %%obj575 %%val576 1 '#2# %%set-ribcage-symnames!285))) (%%ribcage-marks286 (lambda (%%obj577) (((lambda () (begin (##declare (extended-bindings)) ##direct-structure-ref))) %%obj577 2 '#2# %%ribcage-marks286))) (%%set-ribcage-marks!287 (lambda (%%obj578 %%val579) (((lambda () (begin (##declare (extended-bindings)) ##direct-structure-set!))) %%obj578 %%val579 2 '#2# %%set-ribcage-marks!287))) (%%ribcage-labels288 (lambda (%%obj580) (((lambda () (begin (##declare (extended-bindings)) ##direct-structure-ref))) %%obj580 3 '#2# %%ribcage-labels288))) (%%set-ribcage-labels!289 (lambda (%%obj581 %%val582) (((lambda () (begin (##declare (extended-bindings)) ##direct-structure-set!))) %%obj581 %%val582 3 '#2# %%set-ribcage-labels!289))) (%%make-top-ribcage290 (lambda (%%p1583 %%p2584) (begin (##declare (extended-bindings)) (##structure '#3=#structure(#1# ##type-2-E14B1CA5-AADF-4FF2-9EAA-70CCC11E5A91 top-ribcage 24 #f #(key 0 #f mutable? 0 #f)) %%p1583 %%p2584)))) (%%top-ribcage?291 (lambda (%%obj585) (begin (##declare (extended-bindings)) (##structure-direct-instance-of? %%obj585 '##type-2-E14B1CA5-AADF-4FF2-9EAA-70CCC11E5A91)))) (%%top-ribcage-key292 (lambda (%%obj586) (((lambda () (begin (##declare (extended-bindings)) ##direct-structure-ref))) %%obj586 1 '#3# %%top-ribcage-key292))) (%%set-top-ribcage-key!293 (lambda (%%obj587 %%val588) (((lambda () (begin (##declare (extended-bindings)) ##direct-structure-set!))) %%obj587 %%val588 1 '#3# %%set-top-ribcage-key!293))) (%%top-ribcage-mutable?294 (lambda (%%obj589) (((lambda () (begin (##declare (extended-bindings)) ##direct-structure-ref))) %%obj589 2 '#3# %%top-ribcage-mutable?294))) (%%set-top-ribcage-mutable?!295 (lambda (%%obj590 %%val591) (((lambda () (begin (##declare (extended-bindings)) ##direct-structure-set!))) %%obj590 %%val591 2 '#3# %%set-top-ribcage-mutable?!295))) (%%##type-2-import-interface296 (((lambda () (begin (##declare (extended-bindings)) ##structure))) ##type-type (((lambda () (begin (##declare (extended-bindings)) ##string->uninterned-symbol))) "##type-2-import-interface") 'import-interface 8 #f '#(interface 0 #f new-marks 0 #f))) (%%make-import-interface297 (lambda (%%p1592 %%p2593) (begin (##declare (extended-bindings)) (##structure %%##type-2-import-interface296 %%p1592 %%p2593)))) (%%import-interface?298 (lambda (%%obj594) (begin (##declare (extended-bindings)) (##structure-direct-instance-of? %%obj594 ((lambda () (begin (##declare (extended-bindings) (not safe)) (##type-id %%##type-2-import-interface296)))))))) (%%import-interface-interface299 (lambda (%%obj595) (((lambda () (begin (##declare (extended-bindings)) ##direct-structure-ref))) %%obj595 1 %%##type-2-import-interface296 %%import-interface-interface299))) (%%import-interface-interface-set!300 (lambda (%%obj596 %%val597) (((lambda () (begin (##declare (extended-bindings)) ##direct-structure-set!))) %%obj596 %%val597 1 %%##type-2-import-interface296 %%import-interface-interface-set!300))) (%%import-interface-new-marks301 (lambda (%%obj598) (((lambda () (begin (##declare (extended-bindings)) ##direct-structure-ref))) %%obj598 2 %%##type-2-import-interface296 %%import-interface-new-marks301))) (%%import-interface-new-marks-set!302 (lambda (%%obj599 %%val600) (((lambda () (begin (##declare (extended-bindings)) ##direct-structure-set!))) %%obj599 %%val600 2 %%##type-2-import-interface296 %%import-interface-new-marks-set!302))) (%%##type-2-env303 (((lambda () (begin (##declare (extended-bindings)) ##structure))) ##type-type (((lambda () (begin (##declare (extended-bindings)) ##string->uninterned-symbol))) "##type-2-env") 'env 8 #f '#(top-ribcage 0 #f wrap 0 #f))) (%%make-env304 (lambda (%%p1601 %%p2602) (begin (##declare (extended-bindings)) (##structure %%##type-2-env303 %%p1601 %%p2602)))) (%%env?305 (lambda (%%obj603) (begin (##declare (extended-bindings)) (##structure-direct-instance-of? %%obj603 ((lambda () (begin (##declare (extended-bindings) (not safe)) (##type-id %%##type-2-env303)))))))) (%%env-top-ribcage306 (lambda (%%obj604) (((lambda () (begin (##declare (extended-bindings)) ##direct-structure-ref))) %%obj604 1 %%##type-2-env303 %%env-top-ribcage306))) (%%env-top-ribcage-set!307 (lambda (%%obj605 %%val606) (((lambda () (begin (##declare (extended-bindings)) ##direct-structure-set!))) %%obj605 %%val606 1 %%##type-2-env303 %%env-top-ribcage-set!307))) (%%env-wrap308 (lambda (%%obj607) (((lambda () (begin (##declare (extended-bindings)) ##direct-structure-ref))) %%obj607 2 %%##type-2-env303 %%env-wrap308))) (%%env-wrap-set!309 (lambda (%%obj608 %%val609) (((lambda () (begin (##declare (extended-bindings)) ##direct-structure-set!))) %%obj608 %%val609 2 %%##type-2-env303 %%env-wrap-set!309))) (%%anti-mark319 (lambda (%%w610) (%%make-wrap231 (cons #f (%%wrap-marks232 %%w610)) (cons 'shift (%%wrap-subst233 %%w610))))) (%%barrier-marker324 #f) (%%extend-ribcage!329 (lambda (%%ribcage611 %%id612 %%label613) (begin (%%set-ribcage-symnames!285 %%ribcage611 (cons ((lambda (%%e614) (if (annotation? %%e614) (annotation-expression %%e614) %%e614)) (%%syntax-expression38 %%id612)) (%%ribcage-symnames284 %%ribcage611))) (%%set-ribcage-marks!287 %%ribcage611 (cons (%%wrap-marks232 (%%syntax-wrap39 %%id612)) (%%ribcage-marks286 %%ribcage611))) (%%set-ribcage-labels!289 %%ribcage611 (cons %%label613 (%%ribcage-labels288 %%ribcage611)))))) (%%import-extend-ribcage!330 (lambda (%%ribcage615 %%new-marks616 %%id617 %%label618) (begin (%%set-ribcage-symnames!285 %%ribcage615 (cons ((lambda (%%e619) (if (annotation? %%e619) (annotation-expression %%e619) %%e619)) (%%syntax-expression38 %%id617)) (%%ribcage-symnames284 %%ribcage615))) (%%set-ribcage-marks!287 %%ribcage615 (cons (%%join-marks342 %%new-marks616 (%%wrap-marks232 (%%syntax-wrap39 %%id617))) (%%ribcage-marks286 %%ribcage615))) (%%set-ribcage-labels!289 %%ribcage615 (cons %%label618 (%%ribcage-labels288 %%ribcage615)))))) (%%extend-ribcage-barrier!331 (lambda (%%ribcage620 %%killer-id621) (%%extend-ribcage-barrier-help!332 %%ribcage620 (%%syntax-wrap39 %%killer-id621)))) (%%extend-ribcage-barrier-help!332 (lambda (%%ribcage622 %%wrap623) (begin (%%set-ribcage-symnames!285 %%ribcage622 (cons %%barrier-marker324 (%%ribcage-symnames284 %%ribcage622))) (%%set-ribcage-marks!287 %%ribcage622 (cons (%%wrap-marks232 %%wrap623) (%%ribcage-marks286 %%ribcage622)))))) (%%extend-ribcage-subst!333 (lambda (%%ribcage624 %%import-iface625) (%%set-ribcage-symnames!285 %%ribcage624 (cons %%import-iface625 (%%ribcage-symnames284 %%ribcage624))))) (%%lookup-import-binding-name334 (lambda (%%sym626 %%marks627 %%token628 %%new-marks629) ((lambda (%%new630) (if %%new630 ((letrec ((%%f631 (lambda (%%new632) (if (pair? %%new632) ((lambda (%%t633) (if %%t633 %%t633 (%%f631 (cdr %%new632)))) (%%f631 (car %%new632))) (if (symbol? %%new632) (if (%%same-marks?344 %%marks627 (%%join-marks342 %%new-marks629 (%%wrap-marks232 '((top))))) %%new632 #f) (if (%%same-marks?344 %%marks627 (%%join-marks342 %%new-marks629 (%%wrap-marks232 (%%syntax-wrap39 %%new632)))) %%new632 #f)))))) %%f631) %%new630) #f)) (%%get-import-binding47 %%sym626 %%token628)))) (%%store-import-binding335 (lambda (%%id634 %%token635 %%new-marks636) (letrec ((%%cons-id637 (lambda (%%id639 %%x640) (if (not %%x640) %%id639 (cons %%id639 %%x640)))) (%%weed638 (lambda (%%marks641 %%x642) (if (pair? %%x642) (if (%%same-marks?344 (%%id-marks228 (car %%x642)) %%marks641) (%%weed638 %%marks641 (cdr %%x642)) (%%cons-id637 (car %%x642) (%%weed638 %%marks641 (cdr %%x642)))) (if %%x642 (if (not (%%same-marks?344 (%%id-marks228 %%x642) %%marks641)) %%x642 #f) #f))))) ((lambda (%%id643) ((lambda (%%sym644) (if (not (eq? %%id643 %%sym644)) ((lambda (%%marks645) (%%update-import-binding!48 %%sym644 %%token635 (lambda (%%old-binding646) ((lambda (%%x647) (%%cons-id637 (if (%%same-marks?344 %%marks645 (%%wrap-marks232 '((top)))) (%%resolved-id-var-name339 %%id643) %%id643) %%x647)) (%%weed638 %%marks645 %%old-binding646))))) (%%id-marks228 %%id643)) (void))) ((lambda (%%x648) ((lambda (%%e649) (if (annotation? %%e649) (annotation-expression %%e649) %%e649)) (if (%%syntax?37 %%x648) (%%syntax-expression38 %%x648) %%x648))) %%id643))) (if (null? %%new-marks636) %%id634 (%%make-syntax-object36 ((lambda (%%x650) ((lambda (%%e651) (if (annotation? %%e651) (annotation-expression %%e651) %%e651)) (if (%%syntax?37 %%x650) (%%syntax-expression38 %%x650) %%x650))) %%id634) (%%make-wrap231 (%%join-marks342 %%new-marks636 (%%id-marks228 %%id634)) (%%id-subst229 %%id634)))))))) (%%make-binding-wrap336 (lambda (%%ids652 %%labels653 %%w654) (if (null? %%ids652) %%w654 (%%make-wrap231 (%%wrap-marks232 %%w654) (cons ((lambda (%%labelvec655) ((lambda (%%n656) ((lambda (%%symnamevec657 %%marksvec658) (begin ((letrec ((%%f659 (lambda (%%ids660 %%i661) (if (not (null? %%ids660)) (call-with-values (lambda () (%%id-sym-name&marks230 (car %%ids660) %%w654)) (lambda (%%symname662 %%marks663) (begin (vector-set! %%symnamevec657 %%i661 %%symname662) (vector-set! %%marksvec658 %%i661 %%marks663) (%%f659 (cdr %%ids660) (fx+ %%i661 1))))) (void))))) %%f659) %%ids652 0) (%%make-ribcage282 %%symnamevec657 %%marksvec658 %%labelvec655))) (make-vector %%n656) (make-vector %%n656))) (vector-length %%labelvec655))) (list->vector %%labels653)) (%%wrap-subst233 %%w654)))))) (%%make-resolved-id337 (lambda (%%fromsym664 %%marks665 %%tosym666) (%%make-syntax-object36 %%fromsym664 (%%make-wrap231 %%marks665 (list (%%make-ribcage282 (vector %%fromsym664) (vector %%marks665) (vector %%tosym666))))))) (%%id->resolved-id338 (lambda (%%id667) (call-with-values (lambda () (%%id-var-name&marks351 %%id667 '(()))) (lambda (%%tosym668 %%marks669) (begin (if (not %%tosym668) (syntax-error %%id667 "identifier not visible for export") (void)) (%%make-resolved-id337 ((lambda (%%x670) ((lambda (%%e671) (if (annotation? %%e671) (annotation-expression %%e671) %%e671)) (if (%%syntax?37 %%x670) (%%syntax-expression38 %%x670) %%x670))) %%id667) %%marks669 %%tosym668)))))) (%%resolved-id-var-name339 (lambda (%%id672) (vector-ref (%%ribcage-labels288 (car (%%wrap-subst233 (%%syntax-wrap39 %%id672)))) 0))) (%%smart-append340 (lambda (%%m1673 %%m2674) (if (null? %%m2674) %%m1673 (append %%m1673 %%m2674)))) (%%join-wraps341 (lambda (%%w1675 %%w2676) ((lambda (%%m1677 %%s1678) (if (null? %%m1677) (if (null? %%s1678) %%w2676 (%%make-wrap231 (%%wrap-marks232 %%w2676) (%%join-subst343 %%s1678 (%%wrap-subst233 %%w2676)))) (%%make-wrap231 (%%join-marks342 %%m1677 (%%wrap-marks232 %%w2676)) (%%join-subst343 %%s1678 (%%wrap-subst233 %%w2676))))) (%%wrap-marks232 %%w1675) (%%wrap-subst233 %%w1675)))) (%%join-marks342 (lambda (%%m1679 %%m2680) (%%smart-append340 %%m1679 %%m2680))) (%%join-subst343 (lambda (%%s1681 %%s2682) (%%smart-append340 %%s1681 %%s2682))) (%%same-marks?344 (lambda (%%x683 %%y684) ((lambda (%%t685) (if %%t685 %%t685 (if (not (null? %%x683)) (if (not (null? %%y684)) (if (eq? (car %%x683) (car %%y684)) (%%same-marks?344 (cdr %%x683) (cdr %%y684)) #f) #f) #f))) (eq? %%x683 %%y684)))) (%%diff-marks345 (lambda (%%m1686 %%m2687) ((lambda (%%n1688 %%n2689) ((letrec ((%%f690 (lambda (%%n1691 %%m1692) (if (> %%n1691 %%n2689) (cons (car %%m1692) (%%f690 (- %%n1691 1) (cdr %%m1692))) (if (equal? %%m1692 %%m2687) '() (error "internal error in diff-marks" %%m1692 %%m2687)))))) %%f690) %%n1688 %%m1686)) (length %%m1686) (length %%m2687)))) (%%leave-implicit?346 (lambda (%%token693) (eq? %%token693 '*top*))) (%%new-binding347 (lambda (%%sym694 %%marks695 %%token696) ((lambda (%%loc697) ((lambda (%%id698) (begin (%%store-import-binding335 %%id698 %%token696 '()) (values %%loc697 %%id698))) (%%make-resolved-id337 %%sym694 %%marks695 %%loc697))) (if (if (%%leave-implicit?346 %%token696) (%%same-marks?344 %%marks695 (%%wrap-marks232 '((top)))) #f) %%sym694 (($generate-id) %%sym694))))) (%%top-id-bound-var-name348 (lambda (%%sym699 %%marks700 %%top-ribcage701) ((lambda (%%token702) ((lambda (%%t703) (if %%t703 ((lambda (%%id704) (if (symbol? %%id704) (if (%%read-only-binding?46 %%id704) (%%new-binding347 %%sym699 %%marks700 %%token702) (values %%id704 (%%make-resolved-id337 %%sym699 %%marks700 %%id704))) (values (%%resolved-id-var-name339 %%id704) %%id704))) %%t703) (%%new-binding347 %%sym699 %%marks700 %%token702))) (%%lookup-import-binding-name334 %%sym699 %%marks700 %%token702 '()))) (%%top-ribcage-key292 %%top-ribcage701)))) (%%top-id-free-var-name349 (lambda (%%sym705 %%marks706 %%top-ribcage707) ((lambda (%%token708) ((lambda (%%t709) (if %%t709 ((lambda (%%id710) (if (symbol? %%id710) %%id710 (%%resolved-id-var-name339 %%id710))) %%t709) (if (if (%%top-ribcage-mutable?294 %%top-ribcage707) (%%same-marks?344 %%marks706 (%%wrap-marks232 '((top)))) #f) (call-with-values (lambda () (%%new-binding347 %%sym705 (%%wrap-marks232 '((top))) %%token708)) (lambda (%%sym711 %%id712) %%sym711)) #f))) (%%lookup-import-binding-name334 %%sym705 %%marks706 %%token708 '()))) (%%top-ribcage-key292 %%top-ribcage707)))) (%%id-var-name-loc&marks350 (lambda (%%id713 %%w714) (letrec ((%%search715 (lambda (%%sym718 %%subst719 %%marks720) (if (null? %%subst719) (values #f %%marks720) ((lambda (%%fst721) (if (eq? %%fst721 'shift) (%%search715 %%sym718 (cdr %%subst719) (cdr %%marks720)) (if (%%ribcage?283 %%fst721) ((lambda (%%symnames722) (if (vector? %%symnames722) (%%search-vector-rib717 %%sym718 %%subst719 %%marks720 %%symnames722 %%fst721) (%%search-list-rib716 %%sym718 %%subst719 %%marks720 %%symnames722 %%fst721))) (%%ribcage-symnames284 %%fst721)) (if (%%top-ribcage?291 %%fst721) ((lambda (%%t723) (if %%t723 ((lambda (%%var-name724) (values %%var-name724 %%marks720)) %%t723) (%%search715 %%sym718 (cdr %%subst719) %%marks720))) (%%top-id-free-var-name349 %%sym718 %%marks720 %%fst721)) (error "internal error in id-var-name-loc&marks: improper subst" %%subst719))))) (car %%subst719))))) (%%search-list-rib716 (lambda (%%sym725 %%subst726 %%marks727 %%symnames728 %%ribcage729) ((letrec ((%%f730 (lambda (%%symnames731 %%i732) (if (null? %%symnames731) (%%search715 %%sym725 (cdr %%subst726) %%marks727) ((lambda (%%x733) (if (if (eq? %%x733 %%sym725) (%%same-marks?344 %%marks727 (list-ref (%%ribcage-marks286 %%ribcage729) %%i732)) #f) (values (list-ref (%%ribcage-labels288 %%ribcage729) %%i732) %%marks727) (if (%%import-interface?298 %%x733) ((lambda (%%iface734 %%new-marks735) ((lambda (%%t736) (if %%t736 ((lambda (%%token737) ((lambda (%%t738) (if %%t738 ((lambda (%%id739) (values (if (symbol? %%id739) %%id739 (%%resolved-id-var-name339 %%id739)) %%marks727)) %%t738) (%%f730 (cdr %%symnames731) %%i732))) (%%lookup-import-binding-name334 %%sym725 %%marks727 %%token737 %%new-marks735))) %%t736) ((lambda (%%ie740) ((lambda (%%n741) ((lambda () ((letrec ((%%g742 (lambda (%%j743) (if (fx= %%j743 %%n741) (%%f730 (cdr %%symnames731) %%i732) ((lambda (%%id744) ((lambda (%%id.sym745 %%id.marks746) (if (%%help-bound-id=?356 %%id.sym745 %%id.marks746 %%sym725 %%marks727) (values (%%lookup-import-label428 %%id744) %%marks727) (%%g742 (fx+ %%j743 1)))) ((lambda (%%x747) ((lambda (%%e748) (if (annotation? %%e748) (annotation-expression %%e748) %%e748)) (if (%%syntax?37 %%x747) (%%syntax-expression38 %%x747) %%x747))) %%id744) (%%join-marks342 %%new-marks735 (%%id-marks228 %%id744)))) (vector-ref %%ie740 %%j743)))))) %%g742) 0)))) (vector-length %%ie740))) (%%interface-exports375 %%iface734)))) (%%interface-token377 %%iface734))) (%%import-interface-interface299 %%x733) (%%import-interface-new-marks301 %%x733)) (if (if (eq? %%x733 %%barrier-marker324) (%%same-marks?344 %%marks727 (list-ref (%%ribcage-marks286 %%ribcage729) %%i732)) #f) (values #f %%marks727) (%%f730 (cdr %%symnames731) (fx+ %%i732 1)))))) (car %%symnames731)))))) %%f730) %%symnames728 0))) (%%search-vector-rib717 (lambda (%%sym749 %%subst750 %%marks751 %%symnames752 %%ribcage753) ((lambda (%%n754) ((letrec ((%%f755 (lambda (%%i756) (if (fx= %%i756 %%n754) (%%search715 %%sym749 (cdr %%subst750) %%marks751) (if (if (eq? (vector-ref %%symnames752 %%i756) %%sym749) (%%same-marks?344 %%marks751 (vector-ref (%%ribcage-marks286 %%ribcage753) %%i756)) #f) (values (vector-ref (%%ribcage-labels288 %%ribcage753) %%i756) %%marks751) (%%f755 (fx+ %%i756 1))))))) %%f755) 0)) (vector-length %%symnames752))))) (if (symbol? %%id713) (%%search715 %%id713 (%%wrap-subst233 %%w714) (%%wrap-marks232 %%w714)) (if (%%syntax?37 %%id713) ((lambda (%%sym757 %%w1758) (call-with-values (lambda () (%%search715 %%sym757 (%%wrap-subst233 %%w714) (%%join-marks342 (%%wrap-marks232 %%w714) (%%wrap-marks232 %%w1758)))) (lambda (%%name759 %%marks760) (if %%name759 (values %%name759 %%marks760) (%%search715 %%sym757 (%%wrap-subst233 %%w1758) %%marks760))))) ((lambda (%%e761) (if (annotation? %%e761) (annotation-expression %%e761) %%e761)) (%%syntax-expression38 %%id713)) (%%syntax-wrap39 %%id713)) (if (annotation? %%id713) (%%search715 ((lambda (%%e762) (if (annotation? %%e762) (annotation-expression %%e762) %%e762)) %%id713) (%%wrap-subst233 %%w714) (%%wrap-marks232 %%w714)) (error "(in id-var-name) invalid id" %%id713))))))) (%%id-var-name&marks351 (lambda (%%id763 %%w764) (call-with-values (lambda () (%%id-var-name-loc&marks350 %%id763 %%w764)) (lambda (%%label765 %%marks766) (values (if (%%indirect-label?273 %%label765) (%%get-indirect-label277 %%label765) %%label765) %%marks766))))) (%%id-var-name-loc352 (lambda (%%id767 %%w768) (call-with-values (lambda () (%%id-var-name-loc&marks350 %%id767 %%w768)) (lambda (%%label769 %%marks770) %%label769)))) (%%id-var-name353 (lambda (%%id771 %%w772) (call-with-values (lambda () (%%id-var-name-loc&marks350 %%id771 %%w772)) (lambda (%%label773 %%marks774) (if (%%indirect-label?273 %%label773) (%%get-indirect-label277 %%label773) %%label773))))) (%%free-id=?354 (lambda (%%i775 %%j776) (if (eq? ((lambda (%%x777) ((lambda (%%e778) (if (annotation? %%e778) (annotation-expression %%e778) %%e778)) (if (%%syntax?37 %%x777) (%%syntax-expression38 %%x777) %%x777))) %%i775) ((lambda (%%x779) ((lambda (%%e780) (if (annotation? %%e780) (annotation-expression %%e780) %%e780)) (if (%%syntax?37 %%x779) (%%syntax-expression38 %%x779) %%x779))) %%j776)) (eq? (%%id-var-name353 %%i775 '(())) (%%id-var-name353 %%j776 '(()))) #f))) (%%literal-id=?355 (lambda (%%id781 %%literal782) (if (eq? ((lambda (%%x783) ((lambda (%%e784) (if (annotation? %%e784) (annotation-expression %%e784) %%e784)) (if (%%syntax?37 %%x783) (%%syntax-expression38 %%x783) %%x783))) %%id781) ((lambda (%%x785) ((lambda (%%e786) (if (annotation? %%e786) (annotation-expression %%e786) %%e786)) (if (%%syntax?37 %%x785) (%%syntax-expression38 %%x785) %%x785))) %%literal782)) ((lambda (%%n-id787 %%n-literal788) ((lambda (%%t789) (if %%t789 %%t789 (if ((lambda (%%t790) (if %%t790 %%t790 (symbol? %%n-id787))) (not %%n-id787)) ((lambda (%%t791) (if %%t791 %%t791 (symbol? %%n-literal788))) (not %%n-literal788)) #f))) (eq? %%n-id787 %%n-literal788))) (%%id-var-name353 %%id781 '(())) (%%id-var-name353 %%literal782 '(()))) #f))) (%%help-bound-id=?356 (lambda (%%i.sym792 %%i.marks793 %%j.sym794 %%j.marks795) (if (eq? %%i.sym792 %%j.sym794) (%%same-marks?344 %%i.marks793 %%j.marks795) #f))) (%%bound-id=?357 (lambda (%%i796 %%j797) (%%help-bound-id=?356 ((lambda (%%x798) ((lambda (%%e799) (if (annotation? %%e799) (annotation-expression %%e799) %%e799)) (if (%%syntax?37 %%x798) (%%syntax-expression38 %%x798) %%x798))) %%i796) (%%id-marks228 %%i796) ((lambda (%%x800) ((lambda (%%e801) (if (annotation? %%e801) (annotation-expression %%e801) %%e801)) (if (%%syntax?37 %%x800) (%%syntax-expression38 %%x800) %%x800))) %%j797) (%%id-marks228 %%j797)))) (%%valid-bound-ids?358 (lambda (%%ids802) (if ((letrec ((%%all-ids?803 (lambda (%%ids804) ((lambda (%%t805) (if %%t805 %%t805 (if (%%id?222 (car %%ids804)) (%%all-ids?803 (cdr %%ids804)) #f))) (null? %%ids804))))) %%all-ids?803) %%ids802) (%%distinct-bound-ids?359 %%ids802) #f))) (%%distinct-bound-ids?359 (lambda (%%ids806) ((letrec ((%%distinct?807 (lambda (%%ids808) ((lambda (%%t809) (if %%t809 %%t809 (if (not (%%bound-id-member?361 (car %%ids808) (cdr %%ids808))) (%%distinct?807 (cdr %%ids808)) #f))) (null? %%ids808))))) %%distinct?807) %%ids806))) (%%invalid-ids-error360 (lambda (%%ids810 %%exp811 %%class812) ((letrec ((%%find813 (lambda (%%ids814 %%gooduns815) (if (null? %%ids814) (syntax-error %%exp811) (if (%%id?222 (car %%ids814)) (if (%%bound-id-member?361 (car %%ids814) %%gooduns815) (syntax-error (car %%ids814) "duplicate " %%class812) (%%find813 (cdr %%ids814) (cons (car %%ids814) %%gooduns815))) (syntax-error (car %%ids814) "invalid " %%class812)))))) %%find813) %%ids810 '()))) (%%bound-id-member?361 (lambda (%%x816 %%list817) (if (not (null? %%list817)) ((lambda (%%t818) (if %%t818 %%t818 (%%bound-id-member?361 %%x816 (cdr %%list817)))) (%%bound-id=?357 %%x816 (car %%list817))) #f))) (%%wrap362 (lambda (%%x819 %%w820) (if (if (null? (%%wrap-marks232 %%w820)) (null? (%%wrap-subst233 %%w820)) #f) %%x819 (if (%%syntax?37 %%x819) (%%make-syntax-object36 (%%syntax-expression38 %%x819) (%%join-wraps341 %%w820 (%%syntax-wrap39 %%x819))) (if (null? %%x819) %%x819 (%%make-syntax-object36 %%x819 %%w820)))))) (%%source-wrap363 (lambda (%%x821 %%w822 %%ae823) (%%wrap362 (if (annotation? %%ae823) (begin (if (not (eq? (annotation-expression %%ae823) %%x821)) (error "internal error in source-wrap: ae/x mismatch") (void)) %%ae823) %%x821) %%w822))) (%%chi-when-list364 (lambda (%%when-list824 %%w825) (map (lambda (%%x826) (if (%%literal-id=?355 %%x826 '#structure(#4=#structure(#1# ##type-2-2D9C624D-3630-42AF-884C-FD82C537B2D7 syntax-object 24 #f #(expression 2 #f wrap 2 #f)) #(#5=#(source1) compile #6="/Users/Alvaro/Dropbox/projects/spheres/spheres/gambit/scsc/psyntax.ss" 2491985) (#7=(top) . #8=(#structure(#9=#structure(#1# ##type-3-0E54356E-1759-409D-AB3F-0E5AD9E68939 ribcage 24 #f #(symnames 0 #f marks 0 #f labels 0 #f)) () () ()) #structure(#9# #(x) #(#7#) #("i")) #structure(#9# () () ()) #structure(#9# #(when-list w) #(#7# #7#) #("i" "i")) #10=#structure(#9# (lambda-var-list gen-var strip strip* strip-annotation ellipsis? chi-void chi-local-syntax chi-lambda-clause debug-when parse-begin parse-alias parse-eval-when parse-meta parse-define-syntax parse-define parse-import parse-module do-import! lookup-import-label import-mark-delta chi-internal chi-body chi-macro chi-set! chi-application chi-expr chi chi-sequence chi-meta-frob chi-frobs ct-eval/residualize3 ct-eval/residualize2 rt-eval/residualize initial-mode-set update-mode-set do-top-import vfor-each vmap chi-external check-defined-ids check-module-exports id-set-diff chi-top-module frob-meta?-set! frob-meta? frob-e-set! frob-e frob? make-frob ##type-2-frob create-module-binding set-module-binding-exported! module-binding-exported module-binding-val-set! module-binding-val module-binding-imps-set! module-binding-imps module-binding-label-set! module-binding-label module-binding-id-set! module-binding-id module-binding-type-set! module-binding-type module-binding? make-module-binding ##type-6-module-binding make-resolved-interface make-unresolved-interface interface-token-set! interface-token interface-exports-set! interface-exports interface-marks-set! interface-marks interface? make-interface ##type-3-interface flatten-exports chi-top chi-top-sequence chi-top* syntax-type chi-when-list source-wrap wrap bound-id-member? invalid-ids-error distinct-bound-ids? valid-bound-ids? bound-id=? help-bound-id=? literal-id=? free-id=? id-var-name id-var-name-loc id-var-name&marks id-var-name-loc&marks top-id-free-var-name top-id-bound-var-name anon diff-marks same-marks? join-subst join-marks join-wraps smart-append resolved-id-var-name id->resolved-id make-resolved-id make-binding-wrap store-import-binding lookup-import-binding-name extend-ribcage-subst! extend-ribcage-barrier-help! extend-ribcage-barrier! import-extend-ribcage! extend-ribcage! make-empty-ribcage barrier-marker new-mark anti-mark the-anti-mark env-wrap-set! env-wrap env-top-ribcage-set! env-top-ribcage env? make-env ##type-2-env import-interface-new-marks-set! import-interface-new-marks import-interface-interface-set! import-interface-interface import-interface? make-import-interface ##type-2-import-interface set-top-ribcage-mutable?! top-ribcage-mutable? set-top-ribcage-key! top-ribcage-key top-ribcage? make-top-ribcage set-ribcage-labels! ribcage-labels set-ribcage-marks! ribcage-marks set-ribcage-symnames! ribcage-symnames ribcage? make-ribcage gen-labels label? gen-label set-indirect-label! get-indirect-label indirect-label? gen-indirect-label anon only-top-marked? top-marked? tmp-wrap top-wrap empty-wrap wrap-subst wrap-marks make-wrap id-sym-name&marks id-subst id-marks id-sym-name id? nonsymbol-id? global-extend defer-or-eval-transformer make-transformer-binding lookup lookup* displaced-lexical-error displaced-lexical? extend-var-env* extend-env* extend-env null-env binding? set-binding-value! set-binding-type! binding-value binding-type make-binding sanitize-binding arg-check resolve-annotation no-source unannotate self-evaluating? lexical-var? build-lexical-var build-top-module build-body build-letrec build-sequence build-data build-primref built-lambda? build-dsssl-lambda build-lambda build-revisit-only build-visit-only build-cte-install build-global-definition build-global-assignment build-global-reference build-lexical-assignment build-lexical-reference build-conditional build-application update-import-binding! get-import-binding read-only-binding? put-global-definition-hook get-global-definition-hook put-cte-hook define-top-level-value-hook local-eval-hook top-level-eval-hook syntax-wrap syntax-expression syntax? make-syntax-object noexpand let-values define-structure unless when) (#7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# ("m" . #11=(top)) #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# ("m" . #11#) #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7#) ("i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) . #12=(#structure(#structure(#1# ##type-2-E14B1CA5-AADF-4FF2-9EAA-70CCC11E5A91 top-ribcage 24 #f #(key 0 #f mutable? 0 #f)) *top* #t)))))) 'compile (if (%%literal-id=?355 %%x826 '#structure(#4# #(#5# load #6# 2491986) (#7# . #8#))) 'load (if (%%literal-id=?355 %%x826 '#structure(#4# #(#5# visit #6# 2491987) (#7# . #8#))) 'visit (if (%%literal-id=?355 %%x826 '#structure(#4# #(#5# revisit #6# 2491988) (#7# . #8#))) 'revisit (if (%%literal-id=?355 %%x826 '#structure(#4# #(#5# eval #6# 2491989) (#7# . #8#))) 'eval (syntax-error (%%wrap362 %%x826 %%w825) "invalid eval-when situation"))))))) %%when-list824))) (%%syntax-type365 (lambda (%%e827 %%r828 %%w829 %%ae830 %%rib831) (if (symbol? %%e827) ((lambda (%%n832) ((lambda (%%b833) ((lambda (%%type834) ((lambda () ((lambda (%%t835) (if (memv %%t835 '(macro macro!)) (%%syntax-type365 (%%chi-macro424 (%%binding-value198 %%b833) %%e827 %%r828 %%w829 %%ae830 %%rib831) %%r828 '(()) #f %%rib831) (values %%type834 (%%binding-value198 %%b833) %%e827 %%w829 %%ae830))) %%type834)))) (%%binding-type197 %%b833))) (%%lookup217 %%n832 %%r828))) (%%id-var-name353 %%e827 %%w829)) (if (pair? %%e827) ((lambda (%%first836) (if (%%id?222 %%first836) ((lambda (%%n837) ((lambda (%%b838) ((lambda (%%type839) ((lambda () ((lambda (%%t840) (if (memv %%t840 '(lexical)) (values 'lexical-call (%%binding-value198 %%b838) %%e827 %%w829 %%ae830) (if (memv %%t840 '(macro macro!)) (%%syntax-type365 (%%chi-macro424 (%%binding-value198 %%b838) %%e827 %%r828 %%w829 %%ae830 %%rib831) %%r828 '(()) #f %%rib831) (if (memv %%t840 '(core)) (values %%type839 (%%binding-value198 %%b838) %%e827 %%w829 %%ae830) (if (memv %%t840 '(begin ##begin)) (values 'begin-form #f %%e827 %%w829 %%ae830) (if (memv %%t840 '(alias)) (values 'alias-form #f %%e827 %%w829 %%ae830) (if (memv %%t840 '(define)) (values 'define-form #f %%e827 %%w829 %%ae830) (if (memv %%t840 '(define-syntax)) (values 'define-syntax-form #f %%e827 %%w829 %%ae830) (if (memv %%t840 '(set!)) (%%chi-set!423 %%e827 %%r828 %%w829 %%ae830 %%rib831) (if (memv %%t840 '($module-key)) (values '$module-form #f %%e827 %%w829 %%ae830) (if (memv %%t840 '($import)) (values '$import-form #f %%e827 %%w829 %%ae830) (if (memv %%t840 '(eval-when)) (values 'eval-when-form #f %%e827 %%w829 %%ae830) (if (memv %%t840 '(meta)) (values 'meta-form #f %%e827 %%w829 %%ae830) (if (memv %%t840 '(local-syntax)) (values 'local-syntax-form (%%binding-value198 %%b838) %%e827 %%w829 %%ae830) (values 'call #f %%e827 %%w829 %%ae830))))))))))))))) %%type839)))) (%%binding-type197 %%b838))) (%%lookup217 %%n837 %%r828))) (%%id-var-name353 %%first836 %%w829)) (values 'call #f %%e827 %%w829 %%ae830))) (car %%e827)) (if (%%syntax?37 %%e827) (%%syntax-type365 (%%syntax-expression38 %%e827) %%r828 (%%join-wraps341 %%w829 (%%syntax-wrap39 %%e827)) #f %%rib831) (if (annotation? %%e827) (%%syntax-type365 (annotation-expression %%e827) %%r828 %%w829 %%e827 %%rib831) (if ((lambda (%%x841) (self-eval? %%x841)) %%e827) (values 'constant #f %%e827 %%w829 %%ae830) (values 'other #f %%e827 %%w829 %%ae830)))))))) (%%chi-top*366 (lambda (%%e842 %%r843 %%w844 %%ctem845 %%rtem846 %%meta?847 %%top-ribcage848) ((lambda (%%meta-residuals849) (letrec ((%%meta-residualize!850 (lambda (%%x851) (set! %%meta-residuals849 (cons %%x851 %%meta-residuals849))))) ((lambda (%%e852) (%%build-sequence150 #f (reverse (cons %%e852 %%meta-residuals849)))) (%%chi-top368 %%e842 %%r843 %%w844 %%ctem845 %%rtem846 %%meta?847 %%top-ribcage848 %%meta-residualize!850 #f)))) '()))) (%%chi-top-sequence367 (lambda (%%body853 %%r854 %%w855 %%ae856 %%ctem857 %%rtem858 %%meta?859 %%ribcage860 %%meta-residualize!861) (%%build-sequence150 %%ae856 ((letrec ((%%dobody862 (lambda (%%body863) (if (null? %%body863) '() ((lambda (%%first864) (cons %%first864 (%%dobody862 (cdr %%body863)))) (%%chi-top368 (car %%body863) %%r854 %%w855 %%ctem857 %%rtem858 %%meta?859 %%ribcage860 %%meta-residualize!861 #f)))))) %%dobody862) %%body853)))) (%%chi-top368 (lambda (%%e865 %%r866 %%w867 %%ctem868 %%rtem869 %%meta?870 %%top-ribcage871 %%meta-residualize!872 %%meta-seen?873) (call-with-values (lambda () (%%syntax-type365 %%e865 %%r866 %%w867 #f %%top-ribcage871)) (lambda (%%type874 %%value875 %%e876 %%w877 %%ae878) ((lambda (%%t879) (if (memv %%t879 '(begin-form)) ((lambda (%%forms880) (if (null? %%forms880) (%%chi-void448) (%%chi-top-sequence367 %%forms880 %%r866 %%w877 %%ae878 %%ctem868 %%rtem869 %%meta?870 %%top-ribcage871 %%meta-residualize!872))) (%%parse-begin437 %%e876 %%w877 %%ae878 #t)) (if (memv %%t879 '(local-syntax-form)) (call-with-values (lambda () (%%chi-local-syntax447 %%value875 %%e876 %%r866 %%r866 %%w877 %%ae878)) (lambda (%%forms881 %%r882 %%mr883 %%w884 %%ae885) (%%chi-top-sequence367 %%forms881 %%r882 %%w884 %%ae885 %%ctem868 %%rtem869 %%meta?870 %%top-ribcage871 %%meta-residualize!872))) (if (memv %%t879 '(eval-when-form)) (call-with-values (lambda () (%%parse-eval-when435 %%e876 %%w877 %%ae878)) (lambda (%%when-list886 %%forms887) ((lambda (%%ctem888 %%rtem889) (if (if (null? %%ctem888) (null? %%rtem889) #f) (%%chi-void448) (%%chi-top-sequence367 %%forms887 %%r866 %%w877 %%ae878 %%ctem888 %%rtem889 %%meta?870 %%top-ribcage871 %%meta-residualize!872))) (%%update-mode-set412 %%when-list886 %%ctem868) (%%update-mode-set412 %%when-list886 %%rtem869)))) (if (memv %%t879 '(meta-form)) (%%chi-top368 (%%parse-meta434 %%e876 %%w877 %%ae878) %%r866 %%w877 %%ctem868 %%rtem869 #t %%top-ribcage871 %%meta-residualize!872 #t) (if (memv %%t879 '(define-syntax-form)) (call-with-values (lambda () (%%parse-define-syntax433 %%e876 %%w877 %%ae878)) (lambda (%%id890 %%rhs891 %%w892) ((lambda (%%id893) (begin (if (%%displaced-lexical?214 %%id893 %%r866) (%%displaced-lexical-error215 %%id893) (void)) (if (not (%%top-ribcage-mutable?294 %%top-ribcage871)) (syntax-error (%%source-wrap363 %%e876 %%w892 %%ae878) "invalid definition in read-only environment") (void)) ((lambda (%%sym894) (call-with-values (lambda () (%%top-id-bound-var-name348 %%sym894 (%%wrap-marks232 (%%syntax-wrap39 %%id893)) %%top-ribcage871)) (lambda (%%valsym895 %%bound-id896) (begin (if (not (eq? (%%id-var-name353 %%id893 '(())) %%valsym895)) (syntax-error (%%source-wrap363 %%e876 %%w892 %%ae878) "definition not permitted") (void)) (if (%%read-only-binding?46 %%valsym895) (syntax-error (%%source-wrap363 %%e876 %%w892 %%ae878) "invalid definition of read-only identifier") (void)) (%%ct-eval/residualize2415 %%ctem868 (lambda () (build-source #f (list (build-source #f (list (build-source #f '$sc-put-cte))) (build-source #f (list (build-source #f 'quote) %%bound-id896)) (%%chi420 %%rhs891 %%r866 %%r866 %%w892 #t) (build-source #f (list (build-source #f 'quote) (%%top-ribcage-key292 %%top-ribcage871))))))))))) ((lambda (%%x897) ((lambda (%%e898) (if (annotation? %%e898) (annotation-expression %%e898) %%e898)) (if (%%syntax?37 %%x897) (%%syntax-expression38 %%x897) %%x897))) %%id893)))) (%%wrap362 %%id890 %%w892)))) (if (memv %%t879 '(define-form)) (call-with-values (lambda () (%%parse-define432 %%e876 %%w877 %%ae878)) (lambda (%%id899 %%rhs900 %%w901) ((lambda (%%id902) (begin (if (%%displaced-lexical?214 %%id902 %%r866) (%%displaced-lexical-error215 %%id902) (void)) (if (not (%%top-ribcage-mutable?294 %%top-ribcage871)) (syntax-error (%%source-wrap363 %%e876 %%w901 %%ae878) "invalid definition in read-only environment") (void)) ((lambda (%%sym903) (call-with-values (lambda () (%%top-id-bound-var-name348 %%sym903 (%%wrap-marks232 (%%syntax-wrap39 %%id902)) %%top-ribcage871)) (lambda (%%valsym904 %%bound-id905) (begin (if (not (eq? (%%id-var-name353 %%id902 '(())) %%valsym904)) (syntax-error (%%source-wrap363 %%e876 %%w901 %%ae878) "definition not permitted") (void)) (if (%%read-only-binding?46 %%valsym904) (syntax-error (%%source-wrap363 %%e876 %%w901 %%ae878) "invalid definition of read-only identifier") (void)) (if %%meta?870 (%%ct-eval/residualize2415 %%ctem868 (lambda () (%%build-sequence150 #f (list (build-source #f (list (build-source #f (list (build-source #f '$sc-put-cte))) (build-source #f (list (build-source #f 'quote) %%bound-id905)) ((lambda (%%x906) (if (self-eval? (cons 'meta-variable %%valsym904)) %%x906 (build-source #f (list (build-source #f 'quote) %%x906)))) (attach-source #f (cons 'meta-variable %%valsym904))) (build-source #f (list (build-source #f 'quote) (%%top-ribcage-key292 %%top-ribcage871))))) (build-source %%ae878 (list (build-source %%ae878 'define) (build-source %%ae878 %%valsym904) (%%chi420 %%rhs900 %%r866 %%r866 %%w901 #t))))))) ((lambda (%%x907) (%%build-sequence150 #f (list %%x907 (%%rt-eval/residualize414 %%rtem869 (lambda () (build-source %%ae878 (list (build-source %%ae878 'define) (build-source %%ae878 %%valsym904) (%%chi420 %%rhs900 %%r866 %%r866 %%w901 #f)))))))) (%%ct-eval/residualize2415 %%ctem868 (lambda () (build-source #f (list (build-source #f (list (build-source #f '$sc-put-cte))) (build-source #f (list (build-source #f 'quote) %%bound-id905)) ((lambda (%%x908) (if (self-eval? (cons 'global %%valsym904)) %%x908 (build-source #f (list (build-source #f 'quote) %%x908)))) (attach-source #f (cons 'global %%valsym904))) (build-source #f (list (build-source #f 'quote) (%%top-ribcage-key292 %%top-ribcage871))))))))))))) ((lambda (%%x909) ((lambda (%%e910) (if (annotation? %%e910) (annotation-expression %%e910) %%e910)) (if (%%syntax?37 %%x909) (%%syntax-expression38 %%x909) %%x909))) %%id902)))) (%%wrap362 %%id899 %%w901)))) (if (memv %%t879 '($module-form)) ((lambda (%%ribcage911) (call-with-values (lambda () (%%parse-module430 %%e876 %%w877 %%ae878 (%%make-wrap231 (%%wrap-marks232 %%w877) (cons %%ribcage911 (%%wrap-subst233 %%w877))))) (lambda (%%orig912 %%id913 %%exports914 %%forms915) (begin (if (%%displaced-lexical?214 %%id913 %%r866) (%%displaced-lexical-error215 (%%wrap362 %%id913 %%w877)) (void)) (if (not (%%top-ribcage-mutable?294 %%top-ribcage871)) (syntax-error %%orig912 "invalid definition in read-only environment") (void)) (%%chi-top-module404 %%orig912 %%r866 %%r866 %%top-ribcage871 %%ribcage911 %%ctem868 %%rtem869 %%meta?870 %%id913 %%exports914 %%forms915 %%meta-residualize!872))))) (%%make-ribcage282 '() '() '())) (if (memv %%t879 '($import-form)) (call-with-values (lambda () (%%parse-import431 %%e876 %%w877 %%ae878)) (lambda (%%orig916 %%only?917 %%mid918) (begin (if (not (%%top-ribcage-mutable?294 %%top-ribcage871)) (syntax-error %%orig916 "invalid definition in read-only environment") (void)) (%%ct-eval/residualize2415 %%ctem868 (lambda () ((letrec ((%%retry919 (lambda (%%binding920) ((lambda (%%t921) (if (memv %%t921 '($module)) (begin ($update-module %%mid918 %%ctem868 %%rtem869) (%%do-top-import411 %%only?917 %%top-ribcage871 %%mid918 (%%interface-token377 (%%binding-value198 %%binding920)))) (if (memv %%t921 '(displaced-lexical)) (%%displaced-lexical-error215 %%mid918) ((lambda (%%t922) (if (memv %%t922 '(success)) (%%retry919 (%%lookup217 (%%id-var-name353 %%mid918 '(())) '())) (if (memv %%t922 '(ignore)) ((lambda (%%x923) (if (self-eval? (void)) %%x923 (build-source #f (list (build-source #f 'quote) %%x923)))) (attach-source #f (void))) (if (memv %%t922 '(not-found)) (syntax-error %%mid918 "unknown module") (void))))) ($load-module %%mid918 %%ctem868 %%rtem869))))) (%%binding-type197 %%binding920))))) %%retry919) (%%lookup217 (%%id-var-name353 %%mid918 '(())) '()))))))) (if (memv %%t879 '(alias-form)) (call-with-values (lambda () (%%parse-alias436 %%e876 %%w877 %%ae878)) (lambda (%%new-id924 %%old-id925) ((lambda (%%new-id926) (begin (if (%%displaced-lexical?214 %%new-id926 %%r866) (%%displaced-lexical-error215 %%new-id926) (void)) (if (not (%%top-ribcage-mutable?294 %%top-ribcage871)) (syntax-error (%%source-wrap363 %%e876 %%w877 %%ae878) "invalid definition in read-only environment") (void)) ((lambda (%%sym927) (call-with-values (lambda () (%%top-id-bound-var-name348 %%sym927 (%%wrap-marks232 (%%syntax-wrap39 %%new-id926)) %%top-ribcage871)) (lambda (%%valsym928 %%bound-id929) (begin (if (not (eq? (%%id-var-name353 %%new-id926 '(())) %%valsym928)) (syntax-error (%%source-wrap363 %%e876 %%w877 %%ae878) "definition not permitted") (void)) (if (%%read-only-binding?46 %%valsym928) (syntax-error (%%source-wrap363 %%e876 %%w877 %%ae878) "invalid definition of read-only identifier") (void)) (%%ct-eval/residualize2415 %%ctem868 (lambda () (build-source #f (list (build-source #f (list (build-source #f '$sc-put-cte))) (build-source #f (list (build-source #f 'quote) (%%make-resolved-id337 %%sym927 (%%wrap-marks232 (%%syntax-wrap39 %%new-id926)) (%%id-var-name353 %%old-id925 %%w877)))) ((lambda (%%x930) (if (self-eval? '(do-alias . #f)) %%x930 (build-source #f (list (build-source #f 'quote) %%x930)))) (attach-source #f '(do-alias . #f))) (build-source #f (list (build-source #f 'quote) (%%top-ribcage-key292 %%top-ribcage871))))))))))) ((lambda (%%x931) ((lambda (%%e932) (if (annotation? %%e932) (annotation-expression %%e932) %%e932)) (if (%%syntax?37 %%x931) (%%syntax-expression38 %%x931) %%x931))) %%new-id926)))) (%%wrap362 %%new-id924 %%w877)))) (begin (if %%meta-seen?873 (syntax-error (%%source-wrap363 %%e876 %%w877 %%ae878) "invalid meta definition") (void)) (if %%meta?870 ((lambda (%%x933) (begin (%%top-level-eval-hook40 %%x933) (%%ct-eval/residualize3416 %%ctem868 void (lambda () %%x933)))) (%%chi-expr421 %%type874 %%value875 %%e876 %%r866 %%r866 %%w877 %%ae878 #t)) (%%rt-eval/residualize414 %%rtem869 (lambda () (%%chi-expr421 %%type874 %%value875 %%e876 %%r866 %%r866 %%w877 %%ae878 #f))))))))))))))) %%type874))))) (%%flatten-exports369 (lambda (%%exports934) ((letrec ((%%loop935 (lambda (%%exports936 %%ls937) (if (null? %%exports936) %%ls937 (%%loop935 (cdr %%exports936) (if (pair? (car %%exports936)) (%%loop935 (car %%exports936) %%ls937) (cons (car %%exports936) %%ls937))))))) %%loop935) %%exports934 '()))) (%%##type-3-interface370 (((lambda () (begin (##declare (extended-bindings)) ##structure))) ##type-type (((lambda () (begin (##declare (extended-bindings)) ##string->uninterned-symbol))) "##type-3-interface") 'interface 8 #f '#(marks 0 #f exports 0 #f token 0 #f))) (%%make-interface371 (lambda (%%p1938 %%p2939 %%p3940) (begin (##declare (extended-bindings)) (##structure %%##type-3-interface370 %%p1938 %%p2939 %%p3940)))) (%%interface?372 (lambda (%%obj941) (begin (##declare (extended-bindings)) (##structure-direct-instance-of? %%obj941 ((lambda () (begin (##declare (extended-bindings) (not safe)) (##type-id %%##type-3-interface370)))))))) (%%interface-marks373 (lambda (%%obj942) (((lambda () (begin (##declare (extended-bindings)) ##direct-structure-ref))) %%obj942 1 %%##type-3-interface370 %%interface-marks373))) (%%interface-marks-set!374 (lambda (%%obj943 %%val944) (((lambda () (begin (##declare (extended-bindings)) ##direct-structure-set!))) %%obj943 %%val944 1 %%##type-3-interface370 %%interface-marks-set!374))) (%%interface-exports375 (lambda (%%obj945) (((lambda () (begin (##declare (extended-bindings)) ##direct-structure-ref))) %%obj945 2 %%##type-3-interface370 %%interface-exports375))) (%%interface-exports-set!376 (lambda (%%obj946 %%val947) (((lambda () (begin (##declare (extended-bindings)) ##direct-structure-set!))) %%obj946 %%val947 2 %%##type-3-interface370 %%interface-exports-set!376))) (%%interface-token377 (lambda (%%obj948) (((lambda () (begin (##declare (extended-bindings)) ##direct-structure-ref))) %%obj948 3 %%##type-3-interface370 %%interface-token377))) (%%interface-token-set!378 (lambda (%%obj949 %%val950) (((lambda () (begin (##declare (extended-bindings)) ##direct-structure-set!))) %%obj949 %%val950 3 %%##type-3-interface370 %%interface-token-set!378))) (%%make-unresolved-interface379 (lambda (%%mid951 %%exports952) (%%make-interface371 (%%wrap-marks232 (%%syntax-wrap39 %%mid951)) (list->vector (map (lambda (%%x953) (if (pair? %%x953) (car %%x953) %%x953)) %%exports952)) #f))) (%%make-resolved-interface380 (lambda (%%mid954 %%exports955 %%token956) (%%make-interface371 (%%wrap-marks232 (%%syntax-wrap39 %%mid954)) (list->vector (map (lambda (%%x957) (%%id->resolved-id338 (if (pair? %%x957) (car %%x957) %%x957))) %%exports955)) %%token956))) (%%##type-6-module-binding381 (((lambda () (begin (##declare (extended-bindings)) ##structure))) ##type-type (((lambda () (begin (##declare (extended-bindings)) ##string->uninterned-symbol))) "##type-6-module-binding") 'module-binding 8 #f '#(type 0 #f id 0 #f label 0 #f imps 0 #f val 0 #f exported 0 #f))) (%%make-module-binding382 (lambda (%%p1958 %%p2959 %%p3960 %%p4961 %%p5962 %%p6963) (begin (##declare (extended-bindings)) (##structure %%##type-6-module-binding381 %%p1958 %%p2959 %%p3960 %%p4961 %%p5962 %%p6963)))) (%%module-binding?383 (lambda (%%obj964) (begin (##declare (extended-bindings)) (##structure-direct-instance-of? %%obj964 ((lambda () (begin (##declare (extended-bindings) (not safe)) (##type-id %%##type-6-module-binding381)))))))) (%%module-binding-type384 (lambda (%%obj965) (((lambda () (begin (##declare (extended-bindings)) ##direct-structure-ref))) %%obj965 1 %%##type-6-module-binding381 %%module-binding-type384))) (%%module-binding-type-set!385 (lambda (%%obj966 %%val967) (((lambda () (begin (##declare (extended-bindings)) ##direct-structure-set!))) %%obj966 %%val967 1 %%##type-6-module-binding381 %%module-binding-type-set!385))) (%%module-binding-id386 (lambda (%%obj968) (((lambda () (begin (##declare (extended-bindings)) ##direct-structure-ref))) %%obj968 2 %%##type-6-module-binding381 %%module-binding-id386))) (%%module-binding-id-set!387 (lambda (%%obj969 %%val970) (((lambda () (begin (##declare (extended-bindings)) ##direct-structure-set!))) %%obj969 %%val970 2 %%##type-6-module-binding381 %%module-binding-id-set!387))) (%%module-binding-label388 (lambda (%%obj971) (((lambda () (begin (##declare (extended-bindings)) ##direct-structure-ref))) %%obj971 3 %%##type-6-module-binding381 %%module-binding-label388))) (%%module-binding-label-set!389 (lambda (%%obj972 %%val973) (((lambda () (begin (##declare (extended-bindings)) ##direct-structure-set!))) %%obj972 %%val973 3 %%##type-6-module-binding381 %%module-binding-label-set!389))) (%%module-binding-imps390 (lambda (%%obj974) (((lambda () (begin (##declare (extended-bindings)) ##direct-structure-ref))) %%obj974 4 %%##type-6-module-binding381 %%module-binding-imps390))) (%%module-binding-imps-set!391 (lambda (%%obj975 %%val976) (((lambda () (begin (##declare (extended-bindings)) ##direct-structure-set!))) %%obj975 %%val976 4 %%##type-6-module-binding381 %%module-binding-imps-set!391))) (%%module-binding-val392 (lambda (%%obj977) (((lambda () (begin (##declare (extended-bindings)) ##direct-structure-ref))) %%obj977 5 %%##type-6-module-binding381 %%module-binding-val392))) (%%module-binding-val-set!393 (lambda (%%obj978 %%val979) (((lambda () (begin (##declare (extended-bindings)) ##direct-structure-set!))) %%obj978 %%val979 5 %%##type-6-module-binding381 %%module-binding-val-set!393))) (%%module-binding-exported394 (lambda (%%obj980) (((lambda () (begin (##declare (extended-bindings)) ##direct-structure-ref))) %%obj980 6 %%##type-6-module-binding381 %%module-binding-exported394))) (%%set-module-binding-exported!395 (lambda (%%obj981 %%val982) (((lambda () (begin (##declare (extended-bindings)) ##direct-structure-set!))) %%obj981 %%val982 6 %%##type-6-module-binding381 %%set-module-binding-exported!395))) (%%create-module-binding396 (lambda (%%type983 %%id984 %%label985 %%imps986 %%val987) (%%make-module-binding382 %%type983 %%id984 %%label985 %%imps986 %%val987 #f))) (%%##type-2-frob397 (((lambda () (begin (##declare (extended-bindings)) ##structure))) ##type-type (((lambda () (begin (##declare (extended-bindings)) ##string->uninterned-symbol))) "##type-2-frob") 'frob 8 #f '#(e 0 #f meta? 0 #f))) (%%make-frob398 (lambda (%%p1988 %%p2989) (begin (##declare (extended-bindings)) (##structure %%##type-2-frob397 %%p1988 %%p2989)))) (%%frob?399 (lambda (%%obj990) (begin (##declare (extended-bindings)) (##structure-direct-instance-of? %%obj990 ((lambda () (begin (##declare (extended-bindings) (not safe)) (##type-id %%##type-2-frob397)))))))) (%%frob-e400 (lambda (%%obj991) (((lambda () (begin (##declare (extended-bindings)) ##direct-structure-ref))) %%obj991 1 %%##type-2-frob397 %%frob-e400))) (%%frob-e-set!401 (lambda (%%obj992 %%val993) (((lambda () (begin (##declare (extended-bindings)) ##direct-structure-set!))) %%obj992 %%val993 1 %%##type-2-frob397 %%frob-e-set!401))) (%%frob-meta?402 (lambda (%%obj994) (((lambda () (begin (##declare (extended-bindings)) ##direct-structure-ref))) %%obj994 2 %%##type-2-frob397 %%frob-meta?402))) (%%frob-meta?-set!403 (lambda (%%obj995 %%val996) (((lambda () (begin (##declare (extended-bindings)) ##direct-structure-set!))) %%obj995 %%val996 2 %%##type-2-frob397 %%frob-meta?-set!403))) (%%chi-top-module404 (lambda (%%orig997 %%r998 %%mr999 %%top-ribcage1000 %%ribcage1001 %%ctem1002 %%rtem1003 %%meta?1004 %%id1005 %%exports1006 %%forms1007 %%meta-residualize!1008) ((lambda (%%fexports1009) (call-with-values (lambda () (%%chi-external408 %%ribcage1001 %%orig997 (map (lambda (%%d1010) (%%make-frob398 %%d1010 %%meta?1004)) %%forms1007) %%r998 %%mr999 %%ctem1002 %%exports1006 %%fexports1009 %%meta-residualize!1008)) (lambda (%%r1011 %%mr1012 %%bindings1013 %%inits1014) ((letrec ((%%process-exports1015 (lambda (%%fexports1016 %%ctdefs1017) (if (null? %%fexports1016) ((letrec ((%%process-locals1018 (lambda (%%bs1019 %%r1020 %%dts1021 %%dvs1022 %%des1023) (if (null? %%bs1019) ((lambda (%%des1024 %%inits1025) (%%build-sequence150 #f (append (%%ctdefs1017) (list (%%ct-eval/residualize2415 %%ctem1002 (lambda () ((lambda (%%sym1026) ((lambda (%%token1027) ((lambda (%%b1028) ((lambda () (call-with-values (lambda () (%%top-id-bound-var-name348 %%sym1026 (%%wrap-marks232 (%%syntax-wrap39 %%id1005)) %%top-ribcage1000)) (lambda (%%valsym1029 %%bound-id1030) (begin (if (not (eq? (%%id-var-name353 %%id1005 '(())) %%valsym1029)) (syntax-error %%orig997 "definition not permitted") (void)) (if (%%read-only-binding?46 %%valsym1029) (syntax-error %%orig997 "invalid definition of read-only identifier") (void)) (build-source #f (list (build-source #f (list (build-source #f '$sc-put-cte))) (build-source #f (list (build-source #f 'quote) %%bound-id1030)) %%b1028 (build-source #f (list (build-source #f 'quote) (%%top-ribcage-key292 %%top-ribcage1000))))))))))) ((lambda (%%x1031) (if (self-eval? (cons '$module (%%make-resolved-interface380 %%id1005 %%exports1006 %%token1027))) %%x1031 (build-source #f (list (build-source #f 'quote) %%x1031)))) (attach-source #f (cons '$module (%%make-resolved-interface380 %%id1005 %%exports1006 %%token1027)))))) (($generate-id) %%sym1026))) ((lambda (%%x1032) ((lambda (%%e1033) (if (annotation? %%e1033) (annotation-expression %%e1033) %%e1033)) (if (%%syntax?37 %%x1032) (%%syntax-expression38 %%x1032) %%x1032))) %%id1005)))) (%%rt-eval/residualize414 %%rtem1003 (lambda () (%%build-top-module153 #f %%dts1021 %%dvs1022 %%des1024 (if (null? %%inits1025) (%%chi-void448) (%%build-sequence150 #f (append %%inits1025 (list (%%chi-void448)))))))))))) (%%chi-frobs417 %%des1023 %%r1020 %%mr1012 #f) (%%chi-frobs417 %%inits1014 %%r1020 %%mr1012 #f)) ((lambda (%%b1034 %%bs1035) ((lambda (%%t1036) ((lambda (%%t1037) (if (memv %%t1037 '(define-form)) ((lambda (%%label1038) (if (%%module-binding-exported394 %%b1034) ((lambda (%%var1039) (%%process-locals1018 %%bs1035 %%r1020 (cons 'global %%dts1021) (cons %%label1038 %%dvs1022) (cons (%%module-binding-val392 %%b1034) %%des1023))) (%%module-binding-id386 %%b1034)) ((lambda (%%var1040) (%%process-locals1018 %%bs1035 (%%extend-env211 %%label1038 (cons 'lexical %%var1040) %%r1020) (cons 'local %%dts1021) (cons %%var1040 %%dvs1022) (cons (%%module-binding-val392 %%b1034) %%des1023))) (%%gen-var453 (%%module-binding-id386 %%b1034))))) (%%get-indirect-label277 (%%module-binding-label388 %%b1034))) (if (memv %%t1037 '(ctdefine-form define-syntax-form $module-form alias-form)) (%%process-locals1018 %%bs1035 %%r1020 %%dts1021 %%dvs1022 %%des1023) (error "unexpected module binding type" %%t1036)))) (%%module-binding-type384 %%b1034))) (%%module-binding-type384 %%b1034))) (car %%bs1019) (cdr %%bs1019)))))) %%process-locals1018) %%bindings1013 %%r1011 '() '() '()) ((lambda (%%id1041 %%fexports1042) ((letrec ((%%loop1043 (lambda (%%bs1044) (if (null? %%bs1044) (%%process-exports1015 %%fexports1042 %%ctdefs1017) ((lambda (%%b1045 %%bs1046) (if (%%free-id=?354 (%%module-binding-id386 %%b1045) %%id1041) (if (%%module-binding-exported394 %%b1045) (%%process-exports1015 %%fexports1042 %%ctdefs1017) ((lambda (%%t1047) ((lambda (%%label1048) ((lambda (%%imps1049) ((lambda (%%fexports1050) ((lambda () (begin (%%set-module-binding-exported!395 %%b1045 #t) ((lambda (%%t1051) (if (memv %%t1051 '(define-form)) ((lambda (%%sym1052) (begin (%%set-indirect-label!278 %%label1048 %%sym1052) (%%process-exports1015 %%fexports1050 %%ctdefs1017))) (($generate-id) ((lambda (%%x1053) ((lambda (%%e1054) (if (annotation? %%e1054) (annotation-expression %%e1054) %%e1054)) (if (%%syntax?37 %%x1053) (%%syntax-expression38 %%x1053) %%x1053))) %%id1041))) (if (memv %%t1051 '(ctdefine-form)) ((lambda (%%b1055) (%%process-exports1015 %%fexports1050 (lambda () ((lambda (%%sym1056) (begin (%%set-indirect-label!278 %%label1048 %%sym1056) (cons (%%ct-eval/residualize3416 %%ctem1002 (lambda () (%%put-cte-hook43 %%sym1056 %%b1055)) (lambda () (build-source #f (list (build-source #f (list (build-source #f '$sc-put-cte))) (build-source #f (list (build-source #f 'quote) %%sym1056)) ((lambda (%%x1057) (if (self-eval? %%b1055) %%x1057 (build-source #f (list (build-source #f 'quote) %%x1057)))) (attach-source #f %%b1055)) (build-source #f (list (build-source #f 'quote) #f)))))) (%%ctdefs1017)))) (%%binding-value198 %%b1055))))) (%%module-binding-val392 %%b1045)) (if (memv %%t1051 '(define-syntax-form)) ((lambda (%%sym1058) (%%process-exports1015 %%fexports1050 (lambda () ((lambda (%%local-label1059) (begin (%%set-indirect-label!278 %%label1048 %%sym1058) (cons (%%ct-eval/residualize3416 %%ctem1002 (lambda () (%%put-cte-hook43 %%sym1058 (car (%%module-binding-val392 %%b1045)))) (lambda () (build-source #f (list (build-source #f (list (build-source #f '$sc-put-cte))) (build-source #f (list (build-source #f 'quote) %%sym1058)) (cdr (%%module-binding-val392 %%b1045)) (build-source #f (list (build-source #f 'quote) #f)))))) (%%ctdefs1017)))) (%%get-indirect-label277 %%label1048))))) (($generate-id) ((lambda (%%x1060) ((lambda (%%e1061) (if (annotation? %%e1061) (annotation-expression %%e1061) %%e1061)) (if (%%syntax?37 %%x1060) (%%syntax-expression38 %%x1060) %%x1060))) %%id1041))) (if (memv %%t1051 '($module-form)) ((lambda (%%sym1062 %%exports1063) (%%process-exports1015 (append (%%flatten-exports369 %%exports1063) %%fexports1050) (lambda () (begin (%%set-indirect-label!278 %%label1048 %%sym1062) ((lambda (%%rest1064) ((lambda (%%x1065) (cons (%%ct-eval/residualize3416 %%ctem1002 (lambda () (%%put-cte-hook43 %%sym1062 %%x1065)) (lambda () (build-source #f (list (build-source #f (list (build-source #f '$sc-put-cte))) (build-source #f (list (build-source #f 'quote) %%sym1062)) ((lambda (%%x1066) (if (self-eval? %%x1065) %%x1066 (build-source #f (list (build-source #f 'quote) %%x1066)))) (attach-source #f %%x1065)) (build-source #f (list (build-source #f 'quote) #f)))))) %%rest1064)) (cons '$module (%%make-resolved-interface380 %%id1041 %%exports1063 %%sym1062)))) (%%ctdefs1017)))))) (($generate-id) ((lambda (%%x1067) ((lambda (%%e1068) (if (annotation? %%e1068) (annotation-expression %%e1068) %%e1068)) (if (%%syntax?37 %%x1067) (%%syntax-expression38 %%x1067) %%x1067))) %%id1041)) (%%module-binding-val392 %%b1045)) (if (memv %%t1051 '(alias-form)) (%%process-exports1015 %%fexports1050 (lambda () ((lambda (%%rest1069) (begin (if (%%indirect-label?273 %%label1048) (if (not (symbol? (%%get-indirect-label277 %%label1048))) (syntax-error (%%module-binding-id386 %%b1045) "unexported target of alias") (void)) (void)) %%rest1069)) (%%ctdefs1017)))) (error "unexpected module binding type" %%t1047))))))) %%t1047))))) (append %%imps1049 %%fexports1042))) (%%module-binding-imps390 %%b1045))) (%%module-binding-label388 %%b1045))) (%%module-binding-type384 %%b1045))) (%%loop1043 %%bs1046))) (car %%bs1044) (cdr %%bs1044)))))) %%loop1043) %%bindings1013)) (car %%fexports1016) (cdr %%fexports1016)))))) %%process-exports1015) %%fexports1009 (lambda () '()))))) (%%flatten-exports369 %%exports1006)))) (%%id-set-diff405 (lambda (%%exports1070 %%defs1071) (if (null? %%exports1070) '() (if (%%bound-id-member?361 (car %%exports1070) %%defs1071) (%%id-set-diff405 (cdr %%exports1070) %%defs1071) (cons (car %%exports1070) (%%id-set-diff405 (cdr %%exports1070) %%defs1071)))))) (%%check-module-exports406 (lambda (%%source-exp1072 %%fexports1073 %%ids1074) (letrec ((%%defined?1075 (lambda (%%e1076 %%ids1077) (ormap (lambda (%%x1078) (if (%%import-interface?298 %%x1078) ((lambda (%%x.iface1079 %%x.new-marks1080) ((lambda (%%t1081) (if %%t1081 ((lambda (%%token1082) (%%lookup-import-binding-name334 ((lambda (%%x1083) ((lambda (%%e1084) (if (annotation? %%e1084) (annotation-expression %%e1084) %%e1084)) (if (%%syntax?37 %%x1083) (%%syntax-expression38 %%x1083) %%x1083))) %%e1076) (%%id-marks228 %%e1076) %%token1082 %%x.new-marks1080)) %%t1081) ((lambda (%%v1085) ((letrec ((%%lp1086 (lambda (%%i1087) (if (fx>= %%i1087 0) ((lambda (%%t1088) (if %%t1088 %%t1088 (%%lp1086 (fx- %%i1087 1)))) ((lambda (%%id1089) (%%help-bound-id=?356 ((lambda (%%x1090) ((lambda (%%e1091) (if (annotation? %%e1091) (annotation-expression %%e1091) %%e1091)) (if (%%syntax?37 %%x1090) (%%syntax-expression38 %%x1090) %%x1090))) %%id1089) (%%join-marks342 %%x.new-marks1080 (%%id-marks228 %%id1089)) ((lambda (%%x1092) ((lambda (%%e1093) (if (annotation? %%e1093) (annotation-expression %%e1093) %%e1093)) (if (%%syntax?37 %%x1092) (%%syntax-expression38 %%x1092) %%x1092))) %%e1076) (%%id-marks228 %%e1076))) (vector-ref %%v1085 %%i1087))) #f)))) %%lp1086) (fx- (vector-length %%v1085) 1))) (%%interface-exports375 %%x.iface1079)))) (%%interface-token377 %%x.iface1079))) (%%import-interface-interface299 %%x1078) (%%import-interface-new-marks301 %%x1078)) (%%bound-id=?357 %%e1076 %%x1078))) %%ids1077)))) ((letrec ((%%loop1094 (lambda (%%fexports1095 %%missing1096) (if (null? %%fexports1095) (if (not (null? %%missing1096)) (syntax-error (car %%missing1096) (if (= (length %%missing1096) 1) "missing definition for export" "missing definition for multiple exports, including")) (void)) ((lambda (%%e1097 %%fexports1098) (if (%%defined?1075 %%e1097 %%ids1074) (%%loop1094 %%fexports1098 %%missing1096) (%%loop1094 %%fexports1098 (cons %%e1097 %%missing1096)))) (car %%fexports1095) (cdr %%fexports1095)))))) %%loop1094) %%fexports1073 '())))) (%%check-defined-ids407 (lambda (%%source-exp1099 %%ls1100) (letrec ((%%vfold1101 (lambda (%%v1104 %%p1105 %%cls1106) ((lambda (%%len1107) ((letrec ((%%lp1108 (lambda (%%i1109 %%cls1110) (if (fx= %%i1109 %%len1107) %%cls1110 (%%lp1108 (fx+ %%i1109 1) (%%p1105 (vector-ref %%v1104 %%i1109) %%cls1110)))))) %%lp1108) 0 %%cls1106)) (vector-length %%v1104)))) (%%conflicts1102 (lambda (%%x1111 %%y1112 %%cls1113) (if (%%import-interface?298 %%x1111) ((lambda (%%x.iface1114 %%x.new-marks1115) (if (%%import-interface?298 %%y1112) ((lambda (%%y.iface1116 %%y.new-marks1117) ((lambda (%%xe1118 %%ye1119) (if (fx> (vector-length %%xe1118) (vector-length %%ye1119)) (%%vfold1101 %%ye1119 (lambda (%%id1120 %%cls1121) (%%id-iface-conflicts1103 %%id1120 %%y.new-marks1117 %%x.iface1114 %%x.new-marks1115 %%cls1121)) %%cls1113) (%%vfold1101 %%xe1118 (lambda (%%id1122 %%cls1123) (%%id-iface-conflicts1103 %%id1122 %%x.new-marks1115 %%y.iface1116 %%y.new-marks1117 %%cls1123)) %%cls1113))) (%%interface-exports375 %%x.iface1114) (%%interface-exports375 %%y.iface1116))) (%%import-interface-interface299 %%y1112) (%%import-interface-new-marks301 %%y1112)) (%%id-iface-conflicts1103 %%y1112 '() %%x.iface1114 %%x.new-marks1115 %%cls1113))) (%%import-interface-interface299 %%x1111) (%%import-interface-new-marks301 %%x1111)) (if (%%import-interface?298 %%y1112) ((lambda (%%y.iface1124 %%y.new-marks1125) (%%id-iface-conflicts1103 %%x1111 '() %%y.iface1124 %%y.new-marks1125 %%cls1113)) (%%import-interface-interface299 %%y1112) (%%import-interface-new-marks301 %%y1112)) (if (%%bound-id=?357 %%x1111 %%y1112) (cons %%x1111 %%cls1113) %%cls1113))))) (%%id-iface-conflicts1103 (lambda (%%id1126 %%id.new-marks1127 %%iface1128 %%iface.new-marks1129 %%cls1130) ((lambda (%%id.sym1131 %%id.marks1132) ((lambda (%%t1133) (if %%t1133 ((lambda (%%token1134) (if (%%lookup-import-binding-name334 %%id.sym1131 %%id.marks1132 %%token1134 %%iface.new-marks1129) (cons %%id1126 %%cls1130) %%cls1130)) %%t1133) (%%vfold1101 (%%interface-exports375 %%iface1128) (lambda (%%*id1135 %%cls1136) ((lambda (%%*id.sym1137 %%*id.marks1138) (if (%%help-bound-id=?356 %%*id.sym1137 %%*id.marks1138 %%id.sym1131 %%id.marks1132) (cons %%*id1135 %%cls1136) %%cls1136)) ((lambda (%%x1139) ((lambda (%%e1140) (if (annotation? %%e1140) (annotation-expression %%e1140) %%e1140)) (if (%%syntax?37 %%x1139) (%%syntax-expression38 %%x1139) %%x1139))) %%*id1135) (%%join-marks342 %%iface.new-marks1129 (%%id-marks228 %%*id1135)))) %%cls1130))) (%%interface-token377 %%iface1128))) ((lambda (%%x1141) ((lambda (%%e1142) (if (annotation? %%e1142) (annotation-expression %%e1142) %%e1142)) (if (%%syntax?37 %%x1141) (%%syntax-expression38 %%x1141) %%x1141))) %%id1126) (%%join-marks342 %%id.new-marks1127 (%%id-marks228 %%id1126)))))) (if (not (null? %%ls1100)) ((letrec ((%%lp1143 (lambda (%%x1144 %%ls1145 %%cls1146) (if (null? %%ls1145) (if (not (null? %%cls1146)) ((lambda (%%cls1147) (syntax-error %%source-exp1099 "duplicate definition for " (symbol->string (car %%cls1147)) " in")) (syntax->datum %%cls1146)) (void)) ((letrec ((%%lp21148 (lambda (%%ls21149 %%cls1150) (if (null? %%ls21149) (%%lp1143 (car %%ls1145) (cdr %%ls1145) %%cls1150) (%%lp21148 (cdr %%ls21149) (%%conflicts1102 %%x1144 (car %%ls21149) %%cls1150)))))) %%lp21148) %%ls1145 %%cls1146))))) %%lp1143) (car %%ls1100) (cdr %%ls1100) '()) (void))))) (%%chi-external408 (lambda (%%ribcage1151 %%source-exp1152 %%body1153 %%r1154 %%mr1155 %%ctem1156 %%exports1157 %%fexports1158 %%meta-residualize!1159) (letrec ((%%return1160 (lambda (%%r1163 %%mr1164 %%bindings1165 %%ids1166 %%inits1167) (begin (%%check-defined-ids407 %%source-exp1152 %%ids1166) (%%check-module-exports406 %%source-exp1152 %%fexports1158 %%ids1166) (values %%r1163 %%mr1164 %%bindings1165 %%inits1167)))) (%%get-implicit-exports1161 (lambda (%%id1168) ((letrec ((%%f1169 (lambda (%%exports1170) (if (null? %%exports1170) '() (if (if (pair? (car %%exports1170)) (%%bound-id=?357 %%id1168 (caar %%exports1170)) #f) (%%flatten-exports369 (cdar %%exports1170)) (%%f1169 (cdr %%exports1170))))))) %%f1169) %%exports1157))) (%%update-imp-exports1162 (lambda (%%bindings1171 %%exports1172) ((lambda (%%exports1173) (map (lambda (%%b1174) ((lambda (%%id1175) (if (not (%%bound-id-member?361 %%id1175 %%exports1173)) %%b1174 (%%create-module-binding396 (%%module-binding-type384 %%b1174) %%id1175 (%%module-binding-label388 %%b1174) (append (%%get-implicit-exports1161 %%id1175) (%%module-binding-imps390 %%b1174)) (%%module-binding-val392 %%b1174)))) (%%module-binding-id386 %%b1174))) %%bindings1171)) (map (lambda (%%x1176) (if (pair? %%x1176) (car %%x1176) %%x1176)) %%exports1172))))) ((letrec ((%%parse1177 (lambda (%%body1178 %%r1179 %%mr1180 %%ids1181 %%bindings1182 %%inits1183 %%meta-seen?1184) (if (null? %%body1178) (%%return1160 %%r1179 %%mr1180 %%bindings1182 %%ids1181 %%inits1183) ((lambda (%%fr1185) ((lambda (%%e1186) ((lambda (%%meta?1187) ((lambda () (call-with-values (lambda () (%%syntax-type365 %%e1186 %%r1179 '(()) #f %%ribcage1151)) (lambda (%%type1188 %%value1189 %%e1190 %%w1191 %%ae1192) ((lambda (%%t1193) (if (memv %%t1193 '(define-form)) (call-with-values (lambda () (%%parse-define432 %%e1190 %%w1191 %%ae1192)) (lambda (%%id1194 %%rhs1195 %%w1196) ((lambda (%%id1197) ((lambda (%%label1198) ((lambda (%%imps1199) ((lambda () (begin (%%extend-ribcage!329 %%ribcage1151 %%id1197 %%label1198) (if %%meta?1187 ((lambda (%%sym1200) ((lambda (%%b1201) ((lambda () ((lambda (%%mr1202) ((lambda (%%exp1203) (begin (%%define-top-level-value-hook42 %%sym1200 (%%top-level-eval-hook40 %%exp1203)) (%%meta-residualize!1159 (%%ct-eval/residualize3416 %%ctem1156 void (lambda () (build-source #f (list (build-source #f 'define) %%sym1200 %%exp1203))))) (%%parse1177 (cdr %%body1178) %%r1179 %%mr1202 (cons %%id1197 %%ids1181) (cons (%%create-module-binding396 'ctdefine-form %%id1197 %%label1198 %%imps1199 %%b1201) %%bindings1182) %%inits1183 #f))) (%%chi420 %%rhs1195 %%mr1202 %%mr1202 %%w1196 #t))) (%%extend-env211 (%%get-indirect-label277 %%label1198) %%b1201 %%mr1180))))) (cons 'meta-variable %%sym1200))) (($generate-id) ((lambda (%%x1204) ((lambda (%%e1205) (if (annotation? %%e1205) (annotation-expression %%e1205) %%e1205)) (if (%%syntax?37 %%x1204) (%%syntax-expression38 %%x1204) %%x1204))) %%id1197))) (%%parse1177 (cdr %%body1178) %%r1179 %%mr1180 (cons %%id1197 %%ids1181) (cons (%%create-module-binding396 %%type1188 %%id1197 %%label1198 %%imps1199 (%%make-frob398 (%%wrap362 %%rhs1195 %%w1196) %%meta?1187)) %%bindings1182) %%inits1183 #f)))))) (%%get-implicit-exports1161 %%id1197))) (%%gen-indirect-label276))) (%%wrap362 %%id1194 %%w1196)))) (if (memv %%t1193 '(define-syntax-form)) (call-with-values (lambda () (%%parse-define-syntax433 %%e1190 %%w1191 %%ae1192)) (lambda (%%id1206 %%rhs1207 %%w1208) ((lambda (%%id1209) ((lambda (%%label1210) ((lambda (%%imps1211) ((lambda (%%exp1212) ((lambda () (begin (%%extend-ribcage!329 %%ribcage1151 %%id1209 %%label1210) ((lambda (%%l1213 %%b1214) (%%parse1177 (cdr %%body1178) (%%extend-env211 %%l1213 %%b1214 %%r1179) (%%extend-env211 %%l1213 %%b1214 %%mr1180) (cons %%id1209 %%ids1181) (cons (%%create-module-binding396 %%type1188 %%id1209 %%label1210 %%imps1211 (cons %%b1214 %%exp1212)) %%bindings1182) %%inits1183 #f)) (%%get-indirect-label277 %%label1210) (%%defer-or-eval-transformer219 %%top-level-eval-hook40 %%exp1212)))))) (%%chi420 %%rhs1207 %%mr1180 %%mr1180 %%w1208 #t))) (%%get-implicit-exports1161 %%id1209))) (%%gen-indirect-label276))) (%%wrap362 %%id1206 %%w1208)))) (if (memv %%t1193 '($module-form)) ((lambda (%%*ribcage1215) ((lambda (%%*w1216) ((lambda () (call-with-values (lambda () (%%parse-module430 %%e1190 %%w1191 %%ae1192 %%*w1216)) (lambda (%%orig1217 %%id1218 %%*exports1219 %%forms1220) (call-with-values (lambda () (%%chi-external408 %%*ribcage1215 %%orig1217 (map (lambda (%%d1221) (%%make-frob398 %%d1221 %%meta?1187)) %%forms1220) %%r1179 %%mr1180 %%ctem1156 %%*exports1219 (%%flatten-exports369 %%*exports1219) %%meta-residualize!1159)) (lambda (%%r1222 %%mr1223 %%*bindings1224 %%*inits1225) ((lambda (%%iface1226 %%bindings1227 %%inits1228 %%label1229 %%imps1230) (begin (%%extend-ribcage!329 %%ribcage1151 %%id1218 %%label1229) ((lambda (%%l1231 %%b1232) (%%parse1177 (cdr %%body1178) (%%extend-env211 %%l1231 %%b1232 %%r1222) (%%extend-env211 %%l1231 %%b1232 %%mr1223) (cons %%id1218 %%ids1181) (cons (%%create-module-binding396 %%type1188 %%id1218 %%label1229 %%imps1230 %%*exports1219) %%bindings1227) %%inits1228 #f)) (%%get-indirect-label277 %%label1229) (cons '$module %%iface1226)))) (%%make-unresolved-interface379 %%id1218 %%*exports1219) (append %%*bindings1224 %%bindings1182) (append %%inits1183 %%*inits1225) (%%gen-indirect-label276) (%%get-implicit-exports1161 %%id1218))))))))) (%%make-wrap231 (%%wrap-marks232 %%w1191) (cons %%*ribcage1215 (%%wrap-subst233 %%w1191))))) (%%make-ribcage282 '() '() '())) (if (memv %%t1193 '($import-form)) (call-with-values (lambda () (%%parse-import431 %%e1190 %%w1191 %%ae1192)) (lambda (%%orig1233 %%only?1234 %%mid1235) ((lambda (%%mlabel1236) ((lambda (%%binding1237) ((lambda (%%t1238) (if (memv %%t1238 '($module)) ((lambda (%%iface1239) ((lambda (%%import-iface1240) ((lambda () (begin (if %%only?1234 (%%extend-ribcage-barrier!331 %%ribcage1151 %%mid1235) (void)) (%%do-import!429 %%import-iface1240 %%ribcage1151) (%%parse1177 (cdr %%body1178) %%r1179 %%mr1180 (cons %%import-iface1240 %%ids1181) (%%update-imp-exports1162 %%bindings1182 (vector->list (%%interface-exports375 %%iface1239))) %%inits1183 #f))))) (%%make-import-interface297 %%iface1239 (%%import-mark-delta427 %%mid1235 %%iface1239)))) (%%binding-value198 %%binding1237)) (if (memv %%t1238 '(displaced-lexical)) (%%displaced-lexical-error215 %%mid1235) (syntax-error %%mid1235 "unknown module")))) (%%binding-type197 %%binding1237))) (%%lookup217 %%mlabel1236 %%r1179))) (%%id-var-name353 %%mid1235 '(()))))) (if (memv %%t1193 '(alias-form)) (call-with-values (lambda () (%%parse-alias436 %%e1190 %%w1191 %%ae1192)) (lambda (%%new-id1241 %%old-id1242) ((lambda (%%new-id1243) ((lambda (%%label1244) ((lambda (%%imps1245) ((lambda () (begin (%%extend-ribcage!329 %%ribcage1151 %%new-id1243 %%label1244) (%%parse1177 (cdr %%body1178) %%r1179 %%mr1180 (cons %%new-id1243 %%ids1181) (cons (%%create-module-binding396 %%type1188 %%new-id1243 %%label1244 %%imps1245 #f) %%bindings1182) %%inits1183 #f))))) (%%get-implicit-exports1161 %%new-id1243))) (%%id-var-name-loc352 %%old-id1242 %%w1191))) (%%wrap362 %%new-id1241 %%w1191)))) (if (memv %%t1193 '(begin-form)) (%%parse1177 ((letrec ((%%f1246 (lambda (%%forms1247) (if (null? %%forms1247) (cdr %%body1178) (cons (%%make-frob398 (%%wrap362 (car %%forms1247) %%w1191) %%meta?1187) (%%f1246 (cdr %%forms1247))))))) %%f1246) (%%parse-begin437 %%e1190 %%w1191 %%ae1192 #t)) %%r1179 %%mr1180 %%ids1181 %%bindings1182 %%inits1183 #f) (if (memv %%t1193 '(eval-when-form)) (call-with-values (lambda () (%%parse-eval-when435 %%e1190 %%w1191 %%ae1192)) (lambda (%%when-list1248 %%forms1249) (%%parse1177 (if (memq 'eval %%when-list1248) ((letrec ((%%f1250 (lambda (%%forms1251) (if (null? %%forms1251) (cdr %%body1178) (cons (%%make-frob398 (%%wrap362 (car %%forms1251) %%w1191) %%meta?1187) (%%f1250 (cdr %%forms1251))))))) %%f1250) %%forms1249) (cdr %%body1178)) %%r1179 %%mr1180 %%ids1181 %%bindings1182 %%inits1183 #f))) (if (memv %%t1193 '(meta-form)) (%%parse1177 (cons (%%make-frob398 (%%wrap362 (%%parse-meta434 %%e1190 %%w1191 %%ae1192) %%w1191) #t) (cdr %%body1178)) %%r1179 %%mr1180 %%ids1181 %%bindings1182 %%inits1183 #t) (if (memv %%t1193 '(local-syntax-form)) (call-with-values (lambda () (%%chi-local-syntax447 %%value1189 %%e1190 %%r1179 %%mr1180 %%w1191 %%ae1192)) (lambda (%%forms1252 %%r1253 %%mr1254 %%w1255 %%ae1256) (%%parse1177 ((letrec ((%%f1257 (lambda (%%forms1258) (if (null? %%forms1258) (cdr %%body1178) (cons (%%make-frob398 (%%wrap362 (car %%forms1258) %%w1255) %%meta?1187) (%%f1257 (cdr %%forms1258))))))) %%f1257) %%forms1252) %%r1253 %%mr1254 %%ids1181 %%bindings1182 %%inits1183 #f))) (begin (if %%meta-seen?1184 (syntax-error (%%source-wrap363 %%e1190 %%w1191 %%ae1192) "invalid meta definition") (void)) ((letrec ((%%f1259 (lambda (%%body1260) (if ((lambda (%%t1261) (if %%t1261 %%t1261 (not (%%frob-meta?402 (car %%body1260))))) (null? %%body1260)) (%%return1160 %%r1179 %%mr1180 %%bindings1182 %%ids1181 (append %%inits1183 %%body1260)) (begin ((lambda (%%x1262) (begin (%%top-level-eval-hook40 %%x1262) (%%meta-residualize!1159 (%%ct-eval/residualize3416 %%ctem1156 void (lambda () %%x1262))))) (%%chi-meta-frob418 (car %%body1260) %%mr1180)) (%%f1259 (cdr %%body1260))))))) %%f1259) (cons (%%make-frob398 (%%source-wrap363 %%e1190 %%w1191 %%ae1192) %%meta?1187) (cdr %%body1178)))))))))))))) %%type1188)))))) (%%frob-meta?402 %%fr1185))) (%%frob-e400 %%fr1185))) (car %%body1178)))))) %%parse1177) %%body1153 %%r1154 %%mr1155 '() '() '() #f)))) (%%vmap409 (lambda (%%fn1263 %%v1264) ((letrec ((%%do1265 (lambda (%%i1266 %%ls1267) (if (fx< %%i1266 0) %%ls1267 (%%do1265 (fx- %%i1266 1) (cons (%%fn1263 (vector-ref %%v1264 %%i1266)) %%ls1267)))))) %%do1265) (fx- (vector-length %%v1264) 1) '()))) (%%vfor-each410 (lambda (%%fn1268 %%v1269) ((lambda (%%len1270) ((letrec ((%%do1271 (lambda (%%i1272) (if (not (fx= %%i1272 %%len1270)) (begin (%%fn1268 (vector-ref %%v1269 %%i1272)) (%%do1271 (fx+ %%i1272 1))) (void))))) %%do1271) 0)) (vector-length %%v1269)))) (%%do-top-import411 (lambda (%%import-only?1273 %%top-ribcage1274 %%mid1275 %%token1276) (build-source #f (list (build-source #f (list (build-source #f '$sc-put-cte))) (build-source #f (list (build-source #f 'quote) %%mid1275)) ((lambda (%%x1277) (if (self-eval? (cons 'do-import %%token1276)) %%x1277 (build-source #f (list (build-source #f 'quote) %%x1277)))) (attach-source #f (cons 'do-import %%token1276))) (build-source #f (list (build-source #f 'quote) (%%top-ribcage-key292 %%top-ribcage1274))))))) (%%update-mode-set412 ((lambda (%%table1278) (lambda (%%when-list1279 %%mode-set1280) (letrec ((%%remq1281 (lambda (%%x1282 %%ls1283) (if (null? %%ls1283) '() (if (eq? (car %%ls1283) %%x1282) (%%remq1281 %%x1282 (cdr %%ls1283)) (cons (car %%ls1283) (%%remq1281 %%x1282 (cdr %%ls1283)))))))) (%%remq1281 '- (apply append (map (lambda (%%m1284) ((lambda (%%row1285) (map (lambda (%%s1286) (cdr (assq %%s1286 %%row1285))) %%when-list1279)) (cdr (assq %%m1284 %%table1278)))) %%mode-set1280)))))) '((L (load . L) (compile . C) (visit . V) (revisit . R) (eval . -)) (C (load . -) (compile . -) (visit . -) (revisit . -) (eval . C)) (V (load . V) (compile . C) (visit . V) (revisit . -) (eval . -)) (R (load . R) (compile . C) (visit . -) (revisit . R) (eval . -)) (E (load . -) (compile . -) (visit . -) (revisit . -) (eval . E))))) (%%initial-mode-set413 (lambda (%%when-list1287 %%compiling-a-file1288) (apply append (map (lambda (%%s1289) (if %%compiling-a-file1288 ((lambda (%%t1290) (if (memv %%t1290 '(compile)) '(C) (if (memv %%t1290 '(load)) '(L) (if (memv %%t1290 '(visit)) '(V) (if (memv %%t1290 '(revisit)) '(R) '()))))) %%s1289) ((lambda (%%t1291) (if (memv %%t1291 '(eval)) '(E) '())) %%s1289))) %%when-list1287)))) (%%rt-eval/residualize414 (lambda (%%rtem1292 %%thunk1293) (if (memq 'E %%rtem1292) (%%thunk1293) ((lambda (%%thunk1294) (if (memq 'V %%rtem1292) (if ((lambda (%%t1295) (if %%t1295 %%t1295 (memq 'R %%rtem1292))) (memq 'L %%rtem1292)) (%%thunk1294) (begin (vector-set! (%%thunk1294) 0 visit-marker) (%%thunk1294))) (if ((lambda (%%t1296) (if %%t1296 %%t1296 (memq 'R %%rtem1292))) (memq 'L %%rtem1292)) (%%thunk1294) (%%chi-void448)))) (if (memq 'C %%rtem1292) ((lambda (%%x1297) (begin (%%top-level-eval-hook40 %%x1297) (lambda () %%x1297))) (%%thunk1293)) %%thunk1293))))) (%%ct-eval/residualize2415 (lambda (%%ctem1298 %%thunk1299) ((lambda (%%t1300) (%%ct-eval/residualize3416 %%ctem1298 (lambda () (begin (if (not %%t1300) (set! %%t1300 (%%thunk1299)) (void)) (%%top-level-eval-hook40 %%t1300))) (lambda () ((lambda (%%t1301) (if %%t1301 %%t1301 (%%thunk1299))) %%t1300)))) #f))) (%%ct-eval/residualize3416 (lambda (%%ctem1302 %%eval-thunk1303 %%residualize-thunk1304) (if (memq 'E %%ctem1302) (begin (%%eval-thunk1303) (%%chi-void448)) (begin (if (memq 'C %%ctem1302) (%%eval-thunk1303) (void)) (if (memq 'R %%ctem1302) (if ((lambda (%%t1305) (if %%t1305 %%t1305 (memq 'V %%ctem1302))) (memq 'L %%ctem1302)) (%%residualize-thunk1304) (%%residualize-thunk1304)) (if ((lambda (%%t1306) (if %%t1306 %%t1306 (memq 'V %%ctem1302))) (memq 'L %%ctem1302)) (begin (vector-set! (%%residualize-thunk1304) 0 visit-marker) (%%residualize-thunk1304)) (%%chi-void448))))))) (%%chi-frobs417 (lambda (%%frob*1307 %%r1308 %%mr1309 %%m?1310) (map (lambda (%%x1311) (%%chi420 (%%frob-e400 %%x1311) %%r1308 %%mr1309 '(()) %%m?1310)) %%frob*1307))) (%%chi-meta-frob418 (lambda (%%x1312 %%mr1313) (%%chi420 (%%frob-e400 %%x1312) %%mr1313 %%mr1313 '(()) #t))) (%%chi-sequence419 (lambda (%%body1314 %%r1315 %%mr1316 %%w1317 %%ae1318 %%m?1319) (%%build-sequence150 %%ae1318 ((letrec ((%%dobody1320 (lambda (%%body1321) (if (null? %%body1321) '() ((lambda (%%first1322) (cons %%first1322 (%%dobody1320 (cdr %%body1321)))) (%%chi420 (car %%body1321) %%r1315 %%mr1316 %%w1317 %%m?1319)))))) %%dobody1320) %%body1314)))) (%%chi420 (lambda (%%e1323 %%r1324 %%mr1325 %%w1326 %%m?1327) (call-with-values (lambda () (%%syntax-type365 %%e1323 %%r1324 %%w1326 #f #f)) (lambda (%%type1328 %%value1329 %%e1330 %%w1331 %%ae1332) (%%chi-expr421 %%type1328 %%value1329 %%e1330 %%r1324 %%mr1325 %%w1331 %%ae1332 %%m?1327))))) (%%chi-expr421 (lambda (%%type1333 %%value1334 %%e1335 %%r1336 %%mr1337 %%w1338 %%ae1339 %%m?1340) ((lambda (%%t1341) (if (memv %%t1341 '(lexical)) %%value1334 (if (memv %%t1341 '(core)) (%%value1334 %%e1335 %%r1336 %%mr1337 %%w1338 %%ae1339 %%m?1340) (if (memv %%t1341 '(lexical-call)) (%%chi-application422 %%value1334 %%e1335 %%r1336 %%mr1337 %%w1338 %%ae1339 %%m?1340) (if (memv %%t1341 '(constant)) ((lambda (%%x1342) (if (self-eval? (%%strip452 (%%source-wrap363 %%e1335 %%w1338 %%ae1339) '(()))) %%x1342 (build-source %%ae1339 (list (build-source %%ae1339 'quote) %%x1342)))) (attach-source %%ae1339 (%%strip452 (%%source-wrap363 %%e1335 %%w1338 %%ae1339) '(())))) (if (memv %%t1341 '(global)) (build-source %%ae1339 %%value1334) (if (memv %%t1341 '(meta-variable)) (if %%m?1340 (build-source %%ae1339 %%value1334) (%%displaced-lexical-error215 (%%source-wrap363 %%e1335 %%w1338 %%ae1339))) (if (memv %%t1341 '(call)) (%%chi-application422 (%%chi420 (car %%e1335) %%r1336 %%mr1337 %%w1338 %%m?1340) %%e1335 %%r1336 %%mr1337 %%w1338 %%ae1339 %%m?1340) (if (memv %%t1341 '(begin-form)) (%%chi-sequence419 (%%parse-begin437 %%e1335 %%w1338 %%ae1339 #f) %%r1336 %%mr1337 %%w1338 %%ae1339 %%m?1340) (if (memv %%t1341 '(local-syntax-form)) (call-with-values (lambda () (%%chi-local-syntax447 %%value1334 %%e1335 %%r1336 %%mr1337 %%w1338 %%ae1339)) (lambda (%%forms1343 %%r1344 %%mr1345 %%w1346 %%ae1347) (%%chi-sequence419 %%forms1343 %%r1344 %%mr1345 %%w1346 %%ae1347 %%m?1340))) (if (memv %%t1341 '(eval-when-form)) (call-with-values (lambda () (%%parse-eval-when435 %%e1335 %%w1338 %%ae1339)) (lambda (%%when-list1348 %%forms1349) (if (memq 'eval %%when-list1348) (%%chi-sequence419 %%forms1349 %%r1336 %%mr1337 %%w1338 %%ae1339 %%m?1340) (%%chi-void448)))) (if (memv %%t1341 '(meta-form)) (syntax-error (%%source-wrap363 %%e1335 %%w1338 %%ae1339) "invalid context for meta definition") (if (memv %%t1341 '(define-form)) (begin (%%parse-define432 %%e1335 %%w1338 %%ae1339) (syntax-error (%%source-wrap363 %%e1335 %%w1338 %%ae1339) "invalid context for definition")) (if (memv %%t1341 '(define-syntax-form)) (begin (%%parse-define-syntax433 %%e1335 %%w1338 %%ae1339) (syntax-error (%%source-wrap363 %%e1335 %%w1338 %%ae1339) "invalid context for definition")) (if (memv %%t1341 '($module-form)) (call-with-values (lambda () (%%parse-module430 %%e1335 %%w1338 %%ae1339 %%w1338)) (lambda (%%orig1350 %%id1351 %%exports1352 %%forms1353) (syntax-error %%orig1350 "invalid context for definition"))) (if (memv %%t1341 '($import-form)) (call-with-values (lambda () (%%parse-import431 %%e1335 %%w1338 %%ae1339)) (lambda (%%orig1354 %%only?1355 %%mid1356) (syntax-error %%orig1354 "invalid context for definition"))) (if (memv %%t1341 '(alias-form)) (begin (%%parse-alias436 %%e1335 %%w1338 %%ae1339) (syntax-error (%%source-wrap363 %%e1335 %%w1338 %%ae1339) "invalid context for definition")) (if (memv %%t1341 '(syntax)) (syntax-error (%%source-wrap363 %%e1335 %%w1338 %%ae1339) "reference to pattern variable outside syntax form") (if (memv %%t1341 '(displaced-lexical)) (%%displaced-lexical-error215 (%%source-wrap363 %%e1335 %%w1338 %%ae1339)) (syntax-error (%%source-wrap363 %%e1335 %%w1338 %%ae1339))))))))))))))))))))) %%type1333))) (%%chi-application422 (lambda (%%x1357 %%e1358 %%r1359 %%mr1360 %%w1361 %%ae1362 %%m?1363) ((lambda (%%tmp1364) ((lambda (%%tmp1365) (if %%tmp1365 (apply (lambda (%%e01366 %%e11367) (build-source %%ae1362 (cons %%x1357 (map (lambda (%%e1368) (%%chi420 %%e1368 %%r1359 %%mr1360 %%w1361 %%m?1363)) %%e11367)))) %%tmp1365) ((lambda (%%_1370) (syntax-error (%%source-wrap363 %%e1358 %%w1361 %%ae1362))) %%tmp1364))) ($syntax-dispatch %%tmp1364 '(any . each-any)))) %%e1358))) (%%chi-set!423 (lambda (%%e1371 %%r1372 %%w1373 %%ae1374 %%rib1375) ((lambda (%%tmp1376) ((lambda (%%tmp1377) (if (if %%tmp1377 (apply (lambda (%%_1378 %%id1379 %%val1380) (%%id?222 %%id1379)) %%tmp1377) #f) (apply (lambda (%%_1381 %%id1382 %%val1383) ((lambda (%%n1384) ((lambda (%%b1385) ((lambda (%%t1386) (if (memv %%t1386 '(macro!)) ((lambda (%%id1387 %%val1388) (%%syntax-type365 (%%chi-macro424 (%%binding-value198 %%b1385) (list '#structure(#4# #(#5# set! #6# 2755037) (#7# #structure(#9# () () ()) #structure(#9# #(id val) #(#7# #7#) #("i" "i")) #structure(#9# () () ()) #structure(#9# #(t) #(("m" . #11#)) #("i")) #structure(#9# () () ()) #structure(#9# #(b) #(#7#) #("i")) #structure(#9# () () ()) #structure(#9# #(n) #(#7#) #("i")) #structure(#9# #(_ id val) #(#7# #7# #7#) #("i" "i" "i")) #structure(#9# () () ()) #structure(#9# #(e r w ae rib) #(#7# #7# #7# #7# #7#) #("i" "i" "i" "i" "i")) #10# . #12#)) %%id1387 %%val1388) %%r1372 '(()) #f %%rib1375) %%r1372 '(()) #f %%rib1375)) (%%wrap362 %%id1382 %%w1373) (%%wrap362 %%val1383 %%w1373)) (values 'core (lambda (%%e1389 %%r1390 %%mr1391 %%w1392 %%ae1393 %%m?1394) ((lambda (%%val1395 %%n1396) ((lambda (%%b1397) ((lambda (%%t1398) (if (memv %%t1398 '(lexical)) (build-source %%ae1393 (list (build-source %%ae1393 'set!) (%%binding-value198 %%b1397) %%val1395)) (if (memv %%t1398 '(global)) ((lambda (%%sym1399) (begin (if (%%read-only-binding?46 %%n1396) (syntax-error (%%source-wrap363 %%e1389 %%w1392 %%ae1393) "invalid assignment to read-only variable") (void)) (build-source %%ae1393 (list (build-source %%ae1393 'set!) %%sym1399 %%val1395)))) (%%binding-value198 %%b1397)) (if (memv %%t1398 '(meta-variable)) (if %%m?1394 (build-source %%ae1393 (list (build-source %%ae1393 'set!) (%%binding-value198 %%b1397) %%val1395)) (%%displaced-lexical-error215 (%%wrap362 %%id1382 %%w1392))) (if (memv %%t1398 '(displaced-lexical)) (%%displaced-lexical-error215 (%%wrap362 %%id1382 %%w1392)) (syntax-error (%%source-wrap363 %%e1389 %%w1392 %%ae1393))))))) (%%binding-type197 %%b1397))) (%%lookup217 %%n1396 %%r1390))) (%%chi420 %%val1383 %%r1390 %%mr1391 %%w1392 %%m?1394) (%%id-var-name353 %%id1382 %%w1392))) %%e1371 %%w1373 %%ae1374))) (%%binding-type197 %%b1385))) (%%lookup217 %%n1384 %%r1372))) (%%id-var-name353 %%id1382 %%w1373))) %%tmp1377) ((lambda (%%_1400) (syntax-error (%%source-wrap363 %%e1371 %%w1373 %%ae1374))) %%tmp1376))) ($syntax-dispatch %%tmp1376 '(any any any)))) %%e1371))) (%%chi-macro424 (lambda (%%p1401 %%e1402 %%r1403 %%w1404 %%ae1405 %%rib1406) (letrec ((%%rebuild-macro-output1407 (lambda (%%x1408 %%m1409) (if (pair? %%x1408) (cons (%%rebuild-macro-output1407 (car %%x1408) %%m1409) (%%rebuild-macro-output1407 (cdr %%x1408) %%m1409)) (if (%%syntax?37 %%x1408) ((lambda (%%w1410) ((lambda (%%ms1411 %%s1412) (%%make-syntax-object36 (%%syntax-expression38 %%x1408) (if (if (pair? %%ms1411) (eq? (car %%ms1411) #f) #f) (%%make-wrap231 (cdr %%ms1411) (cdr %%s1412)) (%%make-wrap231 (cons %%m1409 %%ms1411) (if %%rib1406 (cons %%rib1406 (cons 'shift %%s1412)) (cons 'shift %%s1412)))))) (%%wrap-marks232 %%w1410) (%%wrap-subst233 %%w1410))) (%%syntax-wrap39 %%x1408)) (if (vector? %%x1408) ((lambda (%%n1413) ((lambda (%%v1414) ((lambda () ((letrec ((%%do1415 (lambda (%%i1416) (if (fx= %%i1416 %%n1413) %%v1414 (begin (vector-set! %%v1414 %%i1416 (%%rebuild-macro-output1407 (vector-ref %%x1408 %%i1416) %%m1409)) (%%do1415 (fx+ %%i1416 1))))))) %%do1415) 0)))) (make-vector %%n1413))) (vector-length %%x1408)) (if (symbol? %%x1408) (syntax-error (%%source-wrap363 %%e1402 %%w1404 %%ae1405) "encountered raw symbol " (symbol->string %%x1408) " in output of macro") %%x1408))))))) (%%rebuild-macro-output1407 ((lambda (%%out1417) (if (procedure? %%out1417) (%%out1417 (lambda (%%id1418) (begin (if (not (identifier? %%id1418)) (syntax-error %%id1418 "environment argument is not an identifier") (void)) (%%lookup217 (%%id-var-name353 %%id1418 '(())) %%r1403)))) %%out1417)) (%%p1401 (%%source-wrap363 %%e1402 (%%anti-mark319 %%w1404) %%ae1405))) (string #\m))))) (%%chi-body425 (lambda (%%body1419 %%outer-form1420 %%r1421 %%mr1422 %%w1423 %%m?1424) ((lambda (%%ribcage1425) ((lambda (%%w1426) ((lambda (%%body1427) ((lambda () (call-with-values (lambda () (%%chi-internal426 %%ribcage1425 %%outer-form1420 %%body1427 %%r1421 %%mr1422 %%m?1424)) (lambda (%%r1428 %%mr1429 %%exprs1430 %%ids1431 %%vars1432 %%vals1433 %%inits1434) (begin (if (null? %%exprs1430) (syntax-error %%outer-form1420 "no expressions in body") (void)) (%%build-body152 #f (reverse %%vars1432) (%%chi-frobs417 (reverse %%vals1433) %%r1428 %%mr1429 %%m?1424) (%%build-sequence150 #f (%%chi-frobs417 (append %%inits1434 %%exprs1430) %%r1428 %%mr1429 %%m?1424))))))))) (map (lambda (%%x1435) (%%make-frob398 (%%wrap362 %%x1435 %%w1426) #f)) %%body1419))) (%%make-wrap231 (%%wrap-marks232 %%w1423) (cons %%ribcage1425 (%%wrap-subst233 %%w1423))))) (%%make-ribcage282 '() '() '())))) (%%chi-internal426 (lambda (%%ribcage1436 %%source-exp1437 %%body1438 %%r1439 %%mr1440 %%m?1441) (letrec ((%%return1442 (lambda (%%r1443 %%mr1444 %%exprs1445 %%ids1446 %%vars1447 %%vals1448 %%inits1449) (begin (%%check-defined-ids407 %%source-exp1437 %%ids1446) (values %%r1443 %%mr1444 %%exprs1445 %%ids1446 %%vars1447 %%vals1448 %%inits1449))))) ((letrec ((%%parse1450 (lambda (%%body1451 %%r1452 %%mr1453 %%ids1454 %%vars1455 %%vals1456 %%inits1457 %%meta-seen?1458) (if (null? %%body1451) (%%return1442 %%r1452 %%mr1453 %%body1451 %%ids1454 %%vars1455 %%vals1456 %%inits1457) ((lambda (%%fr1459) ((lambda (%%e1460) ((lambda (%%meta?1461) ((lambda () (call-with-values (lambda () (%%syntax-type365 %%e1460 %%r1452 '(()) #f %%ribcage1436)) (lambda (%%type1462 %%value1463 %%e1464 %%w1465 %%ae1466) ((lambda (%%t1467) (if (memv %%t1467 '(define-form)) (call-with-values (lambda () (%%parse-define432 %%e1464 %%w1465 %%ae1466)) (lambda (%%id1468 %%rhs1469 %%w1470) ((lambda (%%id1471 %%label1472) (if %%meta?1461 ((lambda (%%sym1473) (begin (%%extend-ribcage!329 %%ribcage1436 %%id1471 %%label1472) ((lambda (%%mr1474) (begin (%%define-top-level-value-hook42 %%sym1473 (%%top-level-eval-hook40 (%%chi420 %%rhs1469 %%mr1474 %%mr1474 %%w1470 #t))) (%%parse1450 (cdr %%body1451) %%r1452 %%mr1474 (cons %%id1471 %%ids1454) %%vars1455 %%vals1456 %%inits1457 #f))) (%%extend-env211 %%label1472 (cons 'meta-variable %%sym1473) %%mr1453)))) (($generate-id) ((lambda (%%x1475) ((lambda (%%e1476) (if (annotation? %%e1476) (annotation-expression %%e1476) %%e1476)) (if (%%syntax?37 %%x1475) (%%syntax-expression38 %%x1475) %%x1475))) %%id1471))) ((lambda (%%var1477) (begin (%%extend-ribcage!329 %%ribcage1436 %%id1471 %%label1472) (%%parse1450 (cdr %%body1451) (%%extend-env211 %%label1472 (cons 'lexical %%var1477) %%r1452) %%mr1453 (cons %%id1471 %%ids1454) (cons %%var1477 %%vars1455) (cons (%%make-frob398 (%%wrap362 %%rhs1469 %%w1470) %%meta?1461) %%vals1456) %%inits1457 #f))) (%%gen-var453 %%id1471)))) (%%wrap362 %%id1468 %%w1470) (%%gen-label279)))) (if (memv %%t1467 '(define-syntax-form)) (call-with-values (lambda () (%%parse-define-syntax433 %%e1464 %%w1465 %%ae1466)) (lambda (%%id1478 %%rhs1479 %%w1480) ((lambda (%%id1481 %%label1482 %%exp1483) (begin (%%extend-ribcage!329 %%ribcage1436 %%id1481 %%label1482) ((lambda (%%b1484) (%%parse1450 (cdr %%body1451) (%%extend-env211 %%label1482 %%b1484 %%r1452) (%%extend-env211 %%label1482 %%b1484 %%mr1453) (cons %%id1481 %%ids1454) %%vars1455 %%vals1456 %%inits1457 #f)) (%%defer-or-eval-transformer219 %%local-eval-hook41 %%exp1483)))) (%%wrap362 %%id1478 %%w1480) (%%gen-label279) (%%chi420 %%rhs1479 %%mr1453 %%mr1453 %%w1480 #t)))) (if (memv %%t1467 '($module-form)) ((lambda (%%*ribcage1485) ((lambda (%%*w1486) ((lambda () (call-with-values (lambda () (%%parse-module430 %%e1464 %%w1465 %%ae1466 %%*w1486)) (lambda (%%orig1487 %%id1488 %%exports1489 %%forms1490) (call-with-values (lambda () (%%chi-internal426 %%*ribcage1485 %%orig1487 (map (lambda (%%d1491) (%%make-frob398 %%d1491 %%meta?1461)) %%forms1490) %%r1452 %%mr1453 %%m?1441)) (lambda (%%r1492 %%mr1493 %%*body1494 %%*ids1495 %%*vars1496 %%*vals1497 %%*inits1498) (begin (%%check-module-exports406 %%source-exp1437 (%%flatten-exports369 %%exports1489) %%*ids1495) ((lambda (%%iface1499 %%vars1500 %%vals1501 %%inits1502 %%label1503) (begin (%%extend-ribcage!329 %%ribcage1436 %%id1488 %%label1503) ((lambda (%%b1504) (%%parse1450 (cdr %%body1451) (%%extend-env211 %%label1503 %%b1504 %%r1492) (%%extend-env211 %%label1503 %%b1504 %%mr1493) (cons %%id1488 %%ids1454) %%vars1500 %%vals1501 %%inits1502 #f)) (cons '$module %%iface1499)))) (%%make-resolved-interface380 %%id1488 %%exports1489 #f) (append %%*vars1496 %%vars1455) (append %%*vals1497 %%vals1456) (append %%inits1457 %%*inits1498 %%*body1494) (%%gen-label279)))))))))) (%%make-wrap231 (%%wrap-marks232 %%w1465) (cons %%*ribcage1485 (%%wrap-subst233 %%w1465))))) (%%make-ribcage282 '() '() '())) (if (memv %%t1467 '($import-form)) (call-with-values (lambda () (%%parse-import431 %%e1464 %%w1465 %%ae1466)) (lambda (%%orig1505 %%only?1506 %%mid1507) ((lambda (%%mlabel1508) ((lambda (%%binding1509) ((lambda (%%t1510) (if (memv %%t1510 '($module)) ((lambda (%%iface1511) ((lambda (%%import-iface1512) ((lambda () (begin (if %%only?1506 (%%extend-ribcage-barrier!331 %%ribcage1436 %%mid1507) (void)) (%%do-import!429 %%import-iface1512 %%ribcage1436) (%%parse1450 (cdr %%body1451) %%r1452 %%mr1453 (cons %%import-iface1512 %%ids1454) %%vars1455 %%vals1456 %%inits1457 #f))))) (%%make-import-interface297 %%iface1511 (%%import-mark-delta427 %%mid1507 %%iface1511)))) (%%binding-value198 %%binding1509)) (if (memv %%t1510 '(displaced-lexical)) (%%displaced-lexical-error215 %%mid1507) (syntax-error %%mid1507 "unknown module")))) (%%binding-type197 %%binding1509))) (%%lookup217 %%mlabel1508 %%r1452))) (%%id-var-name353 %%mid1507 '(()))))) (if (memv %%t1467 '(alias-form)) (call-with-values (lambda () (%%parse-alias436 %%e1464 %%w1465 %%ae1466)) (lambda (%%new-id1513 %%old-id1514) ((lambda (%%new-id1515) (begin (%%extend-ribcage!329 %%ribcage1436 %%new-id1515 (%%id-var-name-loc352 %%old-id1514 %%w1465)) (%%parse1450 (cdr %%body1451) %%r1452 %%mr1453 (cons %%new-id1515 %%ids1454) %%vars1455 %%vals1456 %%inits1457 #f))) (%%wrap362 %%new-id1513 %%w1465)))) (if (memv %%t1467 '(begin-form)) (%%parse1450 ((letrec ((%%f1516 (lambda (%%forms1517) (if (null? %%forms1517) (cdr %%body1451) (cons (%%make-frob398 (%%wrap362 (car %%forms1517) %%w1465) %%meta?1461) (%%f1516 (cdr %%forms1517))))))) %%f1516) (%%parse-begin437 %%e1464 %%w1465 %%ae1466 #t)) %%r1452 %%mr1453 %%ids1454 %%vars1455 %%vals1456 %%inits1457 #f) (if (memv %%t1467 '(eval-when-form)) (call-with-values (lambda () (%%parse-eval-when435 %%e1464 %%w1465 %%ae1466)) (lambda (%%when-list1518 %%forms1519) (%%parse1450 (if (memq 'eval %%when-list1518) ((letrec ((%%f1520 (lambda (%%forms1521) (if (null? %%forms1521) (cdr %%body1451) (cons (%%make-frob398 (%%wrap362 (car %%forms1521) %%w1465) %%meta?1461) (%%f1520 (cdr %%forms1521))))))) %%f1520) %%forms1519) (cdr %%body1451)) %%r1452 %%mr1453 %%ids1454 %%vars1455 %%vals1456 %%inits1457 #f))) (if (memv %%t1467 '(meta-form)) (%%parse1450 (cons (%%make-frob398 (%%wrap362 (%%parse-meta434 %%e1464 %%w1465 %%ae1466) %%w1465) #t) (cdr %%body1451)) %%r1452 %%mr1453 %%ids1454 %%vars1455 %%vals1456 %%inits1457 #t) (if (memv %%t1467 '(local-syntax-form)) (call-with-values (lambda () (%%chi-local-syntax447 %%value1463 %%e1464 %%r1452 %%mr1453 %%w1465 %%ae1466)) (lambda (%%forms1522 %%r1523 %%mr1524 %%w1525 %%ae1526) (%%parse1450 ((letrec ((%%f1527 (lambda (%%forms1528) (if (null? %%forms1528) (cdr %%body1451) (cons (%%make-frob398 (%%wrap362 (car %%forms1528) %%w1525) %%meta?1461) (%%f1527 (cdr %%forms1528))))))) %%f1527) %%forms1522) %%r1523 %%mr1524 %%ids1454 %%vars1455 %%vals1456 %%inits1457 #f))) (begin (if %%meta-seen?1458 (syntax-error (%%source-wrap363 %%e1464 %%w1465 %%ae1466) "invalid meta definition") (void)) ((letrec ((%%f1529 (lambda (%%body1530) (if ((lambda (%%t1531) (if %%t1531 %%t1531 (not (%%frob-meta?402 (car %%body1530))))) (null? %%body1530)) (%%return1442 %%r1452 %%mr1453 %%body1530 %%ids1454 %%vars1455 %%vals1456 %%inits1457) (begin (%%top-level-eval-hook40 (%%chi-meta-frob418 (car %%body1530) %%mr1453)) (%%f1529 (cdr %%body1530))))))) %%f1529) (cons (%%make-frob398 (%%source-wrap363 %%e1464 %%w1465 %%ae1466) %%meta?1461) (cdr %%body1451)))))))))))))) %%type1462)))))) (%%frob-meta?402 %%fr1459))) (%%frob-e400 %%fr1459))) (car %%body1451)))))) %%parse1450) %%body1438 %%r1439 %%mr1440 '() '() '() '() #f)))) (%%import-mark-delta427 (lambda (%%mid1532 %%iface1533) (%%diff-marks345 (%%id-marks228 %%mid1532) (%%interface-marks373 %%iface1533)))) (%%lookup-import-label428 (lambda (%%id1534) ((lambda (%%label1535) (begin (if (not %%label1535) (syntax-error %%id1534 "exported identifier not visible") (void)) %%label1535)) (%%id-var-name-loc352 %%id1534 '(()))))) (%%do-import!429 (lambda (%%import-iface1536 %%ribcage1537) ((lambda (%%ie1538) (if (<= (vector-length %%ie1538) 20) ((lambda (%%new-marks1539) (%%vfor-each410 (lambda (%%id1540) (%%import-extend-ribcage!330 %%ribcage1537 %%new-marks1539 %%id1540 (%%lookup-import-label428 %%id1540))) %%ie1538)) (%%import-interface-new-marks301 %%import-iface1536)) (%%extend-ribcage-subst!333 %%ribcage1537 %%import-iface1536))) (%%interface-exports375 (%%import-interface-interface299 %%import-iface1536))))) (%%parse-module430 (lambda (%%e1541 %%w1542 %%ae1543 %%*w1544) (letrec ((%%listify1545 (lambda (%%exports1546) (if (null? %%exports1546) '() (cons ((lambda (%%tmp1547) ((lambda (%%tmp1548) (if %%tmp1548 (apply (lambda (%%ex1549) (%%listify1545 %%ex1549)) %%tmp1548) ((lambda (%%x1551) (if (%%id?222 %%x1551) (%%wrap362 %%x1551 %%*w1544) (syntax-error (%%source-wrap363 %%e1541 %%w1542 %%ae1543) "invalid exports list in"))) %%tmp1547))) ($syntax-dispatch %%tmp1547 'each-any))) (car %%exports1546)) (%%listify1545 (cdr %%exports1546))))))) ((lambda (%%tmp1552) ((lambda (%%tmp1553) (if (if %%tmp1553 (apply (lambda (%%_1554 %%orig1555 %%mid1556 %%ex1557 %%form1558) (%%id?222 %%mid1556)) %%tmp1553) #f) (apply (lambda (%%_1559 %%orig1560 %%mid1561 %%ex1562 %%form1563) (values %%orig1560 (%%wrap362 %%mid1561 %%w1542) (%%listify1545 %%ex1562) (map (lambda (%%x1565) (%%wrap362 %%x1565 %%*w1544)) %%form1563))) %%tmp1553) ((lambda (%%_1567) (syntax-error (%%source-wrap363 %%e1541 %%w1542 %%ae1543))) %%tmp1552))) ($syntax-dispatch %%tmp1552 '(any any any each-any . each-any)))) %%e1541)))) (%%parse-import431 (lambda (%%e1568 %%w1569 %%ae1570) ((lambda (%%tmp1571) ((lambda (%%tmp1572) (if (if %%tmp1572 (apply (lambda (%%_1573 %%orig1574 %%mid1575) (%%id?222 %%mid1575)) %%tmp1572) #f) (apply (lambda (%%_1576 %%orig1577 %%mid1578) (values %%orig1577 #t (%%wrap362 %%mid1578 %%w1569))) %%tmp1572) ((lambda (%%tmp1579) (if (if %%tmp1579 (apply (lambda (%%_1580 %%orig1581 %%mid1582) (%%id?222 %%mid1582)) %%tmp1579) #f) (apply (lambda (%%_1583 %%orig1584 %%mid1585) (values %%orig1584 #f (%%wrap362 %%mid1585 %%w1569))) %%tmp1579) ((lambda (%%_1586) (syntax-error (%%source-wrap363 %%e1568 %%w1569 %%ae1570))) %%tmp1571))) ($syntax-dispatch %%tmp1571 '(any any #(atom #f) any))))) ($syntax-dispatch %%tmp1571 '(any any #(atom #t) any)))) %%e1568))) (%%parse-define432 (lambda (%%e1587 %%w1588 %%ae1589) ((lambda (%%tmp1590) ((lambda (%%tmp1591) (if (if %%tmp1591 (apply (lambda (%%_1592 %%name1593 %%val1594) (%%id?222 %%name1593)) %%tmp1591) #f) (apply (lambda (%%_1595 %%name1596 %%val1597) (values %%name1596 %%val1597 %%w1588)) %%tmp1591) ((lambda (%%tmp1598) (if (if %%tmp1598 (apply (lambda (%%_1599 %%name1600 %%args1601 %%e11602 %%e21603) (%%id?222 %%name1600)) %%tmp1598) #f) (apply (lambda (%%_1604 %%name1605 %%args1606 %%e11607 %%e21608) (values (%%wrap362 %%name1605 %%w1588) (cons '#structure(#4# #(#5# lambda #6# 1903373) (#7# #structure(#9# #(_ name args e1 e2) #(#7# #7# #7# #7# #7#) #("i" "i" "i" "i" "i")) . #13=(#structure(#9# () () ()) #structure(#9# #(e w ae) #(#7# #7# #7#) #("i" "i" "i")) #10# . #12#))) (%%wrap362 (cons %%args1606 (cons %%e11607 %%e21608)) %%w1588)) '(()))) %%tmp1598) ((lambda (%%tmp1610) (if (if %%tmp1610 (apply (lambda (%%_1611 %%name1612) (%%id?222 %%name1612)) %%tmp1610) #f) (apply (lambda (%%_1613 %%name1614) (values (%%wrap362 %%name1614 %%w1588) '#structure(#4# #(#5# (#(#5# void #6# 3083025)) #6# 3017489) (#7# #structure(#9# #(_ name) #(#7# #7#) #("i" "i")) . #13#)) '(()))) %%tmp1610) ((lambda (%%_1615) (syntax-error (%%source-wrap363 %%e1587 %%w1588 %%ae1589))) %%tmp1590))) ($syntax-dispatch %%tmp1590 '(any any))))) ($syntax-dispatch %%tmp1590 '(any (any . any) any . each-any))))) ($syntax-dispatch %%tmp1590 '(any any any)))) %%e1587))) (%%parse-define-syntax433 (lambda (%%e1616 %%w1617 %%ae1618) ((lambda (%%tmp1619) ((lambda (%%tmp1620) (if (if %%tmp1620 (apply (lambda (%%_1621 %%name1622 %%id1623 %%e11624 %%e21625) (if (%%id?222 %%name1622) (%%id?222 %%id1623) #f)) %%tmp1620) #f) (apply (lambda (%%_1626 %%name1627 %%id1628 %%e11629 %%e21630) (values (%%wrap362 %%name1627 %%w1617) (cons '#structure(#4# #(#5# lambda #6# 1706778) (#7# #structure(#9# #(_ name id e1 e2) #(#7# #7# #7# #7# #7#) #("i" "i" "i" "i" "i")) #structure(#9# () () ()) #structure(#9# #(e w ae) #(#7# #7# #7#) #("i" "i" "i")) #10# . #12#)) (cons (%%wrap362 (list %%id1628) %%w1617) (%%wrap362 (cons %%e11629 %%e21630) %%w1617))) '(()))) %%tmp1620) ((lambda (%%tmp1632) (if (if %%tmp1632 (apply (lambda (%%_1633 %%name1634 %%val1635) (%%id?222 %%name1634)) %%tmp1632) #f) (apply (lambda (%%_1636 %%name1637 %%val1638) (values %%name1637 %%val1638 %%w1617)) %%tmp1632) ((lambda (%%_1639) (syntax-error (%%source-wrap363 %%e1616 %%w1617 %%ae1618))) %%tmp1619))) ($syntax-dispatch %%tmp1619 '(any any any))))) ($syntax-dispatch %%tmp1619 '(any (any any) any . each-any)))) %%e1616))) (%%parse-meta434 (lambda (%%e1640 %%w1641 %%ae1642) ((lambda (%%tmp1643) ((lambda (%%tmp1644) (if %%tmp1644 (apply (lambda (%%_1645 %%form1646) %%form1646) %%tmp1644) ((lambda (%%_1647) (syntax-error (%%source-wrap363 %%e1640 %%w1641 %%ae1642))) %%tmp1643))) ($syntax-dispatch %%tmp1643 '(any . any)))) %%e1640))) (%%parse-eval-when435 (lambda (%%e1648 %%w1649 %%ae1650) ((lambda (%%tmp1651) ((lambda (%%tmp1652) (if %%tmp1652 (apply (lambda (%%_1653 %%x1654 %%e11655 %%e21656) (values (%%chi-when-list364 %%x1654 %%w1649) (cons %%e11655 %%e21656))) %%tmp1652) ((lambda (%%_1659) (syntax-error (%%source-wrap363 %%e1648 %%w1649 %%ae1650))) %%tmp1651))) ($syntax-dispatch %%tmp1651 '(any each-any any . each-any)))) %%e1648))) (%%parse-alias436 (lambda (%%e1660 %%w1661 %%ae1662) ((lambda (%%tmp1663) ((lambda (%%tmp1664) (if (if %%tmp1664 (apply (lambda (%%_1665 %%new-id1666 %%old-id1667) (if (%%id?222 %%new-id1666) (%%id?222 %%old-id1667) #f)) %%tmp1664) #f) (apply (lambda (%%_1668 %%new-id1669 %%old-id1670) (values %%new-id1669 %%old-id1670)) %%tmp1664) ((lambda (%%_1671) (syntax-error (%%source-wrap363 %%e1660 %%w1661 %%ae1662))) %%tmp1663))) ($syntax-dispatch %%tmp1663 '(any any any)))) %%e1660))) (%%parse-begin437 (lambda (%%e1672 %%w1673 %%ae1674 %%empty-okay?1675) ((lambda (%%tmp1676) ((lambda (%%tmp1677) (if (if %%tmp1677 (apply (lambda (%%_1678) %%empty-okay?1675) %%tmp1677) #f) (apply (lambda (%%_1679) '()) %%tmp1677) ((lambda (%%tmp1680) (if %%tmp1680 (apply (lambda (%%_1681 %%e11682 %%e21683) (cons %%e11682 %%e21683)) %%tmp1680) ((lambda (%%_1685) (syntax-error (%%source-wrap363 %%e1672 %%w1673 %%ae1674))) %%tmp1676))) ($syntax-dispatch %%tmp1676 '(any any . each-any))))) ($syntax-dispatch %%tmp1676 '(any)))) %%e1672))) (%%chi-lambda-clause446 (lambda (%%e1686 %%c1687 %%r1688 %%mr1689 %%w1690 %%m?1691) (letrec ((%%reverse*1692 (lambda (%%l1695) ((letrec ((%%f1696 (lambda (%%ls11697 %%ls21698) (if (null? %%ls11697) %%ls21698 (%%f1696 (cdr %%ls11697) (cons (car %%ls11697) %%ls21698)))))) %%f1696) (cdr %%l1695) (car %%l1695)))) (%%ids/emitter1693 (lambda (%%formals1699 %%ids1700 %%emitter1701 %%ae1702 %%template1703) (begin (if (if (pair? (syntax-case-debug)) (memq 'dsssl (syntax-case-debug)) #f) (pp (vector 'ids/emitter %%ids1700 'template %%template1703)) (void)) (if (null? %%ids1700) (values (reverse %%formals1699) %%emitter1701) (if (%%syntax?37 (car %%ids1700)) (%%ids/emitter1693 %%formals1699 (cons (syntax->datum (car %%ids1700)) (cdr %%ids1700)) %%emitter1701 %%ae1702 (car %%ids1700)) (if (annotation? (car %%ids1700)) (%%ids/emitter1693 %%formals1699 (cons ((lambda (%%e1704) (if (annotation? %%e1704) (annotation-expression %%e1704) %%e1704)) (car %%ids1700)) (cdr %%ids1700)) %%emitter1701 (car %%ids1700) %%template1703) (if (eq? (car %%ids1700) #!key) (%%ids/emitter1693 %%formals1699 (cdr %%ids1700) 'keyword %%ae1702 #f) (if (memq (car %%ids1700) '(#!optional #!rest)) (%%ids/emitter1693 %%formals1699 (cdr %%ids1700) ((lambda (%%t1705) (if %%t1705 %%t1705 %%emitter1701)) (if (eq? %%emitter1701 'rnrs) 'optional/rest #f)) %%ae1702 #f) (if (pair? (car %%ids1700)) (%%ids/emitter1693 %%formals1699 (cons (car (car %%ids1700)) (cdr %%ids1700)) %%emitter1701 %%ae1702 (if %%template1703 (%%make-syntax-object36 (car ((lambda (%%e1706) (if (annotation? %%e1706) (annotation-expression %%e1706) %%e1706)) (%%syntax-expression38 %%template1703))) (%%syntax-wrap39 %%template1703)) #f)) (%%ids/emitter1693 (cons (if %%template1703 (datum->syntax %%template1703 (car %%ids1700)) (car %%ids1700)) %%formals1699) (cdr %%ids1700) %%emitter1701 %%ae1702 #f)))))))))) (%%emit-formals1694 (lambda (%%formals*1707 %%formals1708 %%vars1709 %%emitter1710 %%ae1711 %%template1712) (letrec ((%%formal1713 (lambda () ((lambda (%%t1714) (if (memv %%t1714 '(optional/rest)) %%vars1709 (if (memv %%t1714 '(rnrs keyword)) %%formals1708 (void)))) %%emitter1710)))) (if (null? %%formals1708) (reverse %%formals*1707) (if (%%syntax?37 %%formals1708) (%%emit-formals1694 %%formals*1707 (syntax->datum %%formals1708) %%vars1709 %%emitter1710 %%ae1711 %%formals1708) (if (%%id?222 %%formals1708) (%%reverse*1692 (cons (%%formal1713) %%formals*1707)) (if (annotation? %%formals1708) (%%emit-formals1694 %%formals*1707 ((lambda (%%e1715) (if (annotation? %%e1715) (annotation-expression %%e1715) %%e1715)) %%formals1708) %%vars1709 %%emitter1710 %%ae1711 %%template1712) (if (annotation? (car %%formals1708)) (%%emit-formals1694 %%formals*1707 (cons ((lambda (%%e1716) (if (annotation? %%e1716) (annotation-expression %%e1716) %%e1716)) (car %%formals1708)) (cdr %%formals1708)) %%vars1709 %%emitter1710 (car %%formals1708) %%template1712) (if (%%syntax?37 (car %%formals1708)) (%%emit-formals1694 %%formals*1707 (cons (syntax->datum (car %%formals1708)) (cdr %%formals1708)) %%vars1709 %%emitter1710 %%ae1711 (car %%formals1708)) (if (memq (car %%formals1708) '(#!optional #!rest #!key)) (%%emit-formals1694 (cons (build-source %%ae1711 (car %%formals1708)) %%formals*1707) (cdr %%formals1708) %%vars1709 %%emitter1710 %%ae1711 %%template1712) (if (pair? (car %%formals1708)) (%%emit-formals1694 (cons (list ((lambda (%%e1717) (if (annotation? %%e1717) (annotation-expression %%e1717) %%e1717)) (car ((lambda (%%t1718) (if (memv %%t1718 '(keyword)) (car (%%formal1713)) (if (memv %%t1718 '(optional/rest)) (%%formal1713) (void)))) %%emitter1710))) ((lambda (%%e1719) (if (annotation? %%e1719) (annotation-expression %%e1719) %%e1719)) (%%chi420 (cadr (car %%formals1708)) %%r1688 %%mr1689 (if (%%syntax?37 %%c1687) (%%syntax-wrap39 %%c1687) %%w1690) %%m?1691))) %%formals*1707) (cdr %%formals1708) (cdr %%vars1709) %%emitter1710 %%ae1711 %%template1712) (if (%%id?222 (car %%formals1708)) (%%emit-formals1694 (cons (car (%%formal1713)) %%formals*1707) (cdr (syntax->datum %%formals1708)) (cdr %%vars1709) %%emitter1710 %%ae1711 %%template1712) (syntax-error (car %%formals1708) "unexpected formal")))))))))))))) ((lambda (%%tmp1720) ((lambda (%%tmp1721) (if %%tmp1721 (apply (lambda (%%id1722 %%e11723 %%e21724) ((lambda (%%formals1725) (call-with-values (lambda () (%%ids/emitter1693 '() %%formals1725 'rnrs #f #f)) (lambda (%%ids1726 %%emitter1727) (begin (if (if (pair? (syntax-case-debug)) (memq 'dsssl (syntax-case-debug)) #f) (pp (vector 'formals %%formals1725 'ids %%ids1726)) (void)) (if (not (%%valid-bound-ids?358 %%ids1726)) (syntax-error %%e1686 "invalid parameter list in") ((lambda (%%labels1728 %%new-vars1729) (values %%emitter1727 (if (eq? %%emitter1727 'keyword) (%%gen-var453 'dsssl-args) #f) (if ((lambda (%%t1730) (if %%t1730 %%t1730 (null? %%new-vars1729))) (pair? %%new-vars1729)) (build-source #f %%new-vars1729) %%new-vars1729) ((lambda (%%f1731) (begin (if (if (pair? (syntax-case-debug)) (memq 'dsssl (syntax-case-debug)) #f) (vector 'emit-formals %%f1731) (void)) (if (annotation? %%f1731) %%f1731 (build-source #f %%f1731)))) (%%emit-formals1694 '() %%formals1725 %%new-vars1729 %%emitter1727 #f #f)) (map syntax->datum %%ids1726) (%%chi-body425 (cons %%e11723 %%e21724) %%e1686 (%%extend-var-env*213 %%labels1728 %%new-vars1729 %%r1688) %%mr1689 (%%make-binding-wrap336 %%ids1726 %%labels1728 %%w1690) %%m?1691))) (%%gen-labels281 %%ids1726) (map %%gen-var453 %%ids1726))))))) %%id1722)) %%tmp1721) ((lambda (%%tmp1734) (if %%tmp1734 (apply (lambda (%%ids1735 %%e11736 %%e21737) ((lambda (%%formals1738) (call-with-values (lambda () (%%ids/emitter1693 '() (%%lambda-var-list454 %%formals1738) 'rnrs #f #f)) (lambda (%%old-ids1739 %%emitter1740) (if (not (%%valid-bound-ids?358 %%old-ids1739)) (syntax-error %%e1686 "invalid parameter list in") ((lambda (%%labels1741 %%new-vars1742) (values %%emitter1740 (if (eq? %%emitter1740 'keyword) (%%gen-var453 'dsssl-args) #f) ((lambda (%%vars1743) (if (annotation? %%vars1743) %%vars1743 (build-source #f %%vars1743))) (if (eq? %%emitter1740 'rnrs) (%%reverse*1692 %%new-vars1742) (reverse %%new-vars1742))) ((lambda (%%dsssl-formals1744) (if (annotation? %%dsssl-formals1744) %%dsssl-formals1744 (build-source #f %%dsssl-formals1744))) (%%emit-formals1694 '() %%formals1738 (%%reverse*1692 %%new-vars1742) %%emitter1740 #f #f)) (reverse (map syntax->datum %%old-ids1739)) (%%chi-body425 (cons %%e11736 %%e21737) %%e1686 (%%extend-var-env*213 %%labels1741 %%new-vars1742 %%r1688) %%mr1689 (%%make-binding-wrap336 %%old-ids1739 %%labels1741 %%w1690) %%m?1691))) (%%gen-labels281 %%old-ids1739) (map %%gen-var453 %%old-ids1739)))))) %%ids1735)) %%tmp1734) ((lambda (%%_1746) (syntax-error %%e1686)) %%tmp1720))) ($syntax-dispatch %%tmp1720 '(any any . each-any))))) ($syntax-dispatch %%tmp1720 '(each-any any . each-any)))) %%c1687)))) (%%chi-local-syntax447 (lambda (%%rec?1747 %%e1748 %%r1749 %%mr1750 %%w1751 %%ae1752) ((lambda (%%tmp1753) ((lambda (%%tmp1754) (if %%tmp1754 (apply (lambda (%%_1755 %%id1756 %%val1757 %%e11758 %%e21759) ((lambda (%%ids1760) (if (not (%%valid-bound-ids?358 %%ids1760)) (%%invalid-ids-error360 (map (lambda (%%x1761) (%%wrap362 %%x1761 %%w1751)) %%ids1760) (%%source-wrap363 %%e1748 %%w1751 %%ae1752) "keyword") ((lambda (%%labels1762) ((lambda (%%new-w1763) ((lambda (%%b*1764) (values (cons %%e11758 %%e21759) (%%extend-env*212 %%labels1762 %%b*1764 %%r1749) (%%extend-env*212 %%labels1762 %%b*1764 %%mr1750) %%new-w1763 %%ae1752)) ((lambda (%%w1766) (map (lambda (%%x1767) (%%defer-or-eval-transformer219 %%local-eval-hook41 (%%chi420 %%x1767 %%mr1750 %%mr1750 %%w1766 #t))) %%val1757)) (if %%rec?1747 %%new-w1763 %%w1751)))) (%%make-binding-wrap336 %%ids1760 %%labels1762 %%w1751))) (%%gen-labels281 %%ids1760)))) %%id1756)) %%tmp1754) ((lambda (%%_1770) (syntax-error (%%source-wrap363 %%e1748 %%w1751 %%ae1752))) %%tmp1753))) ($syntax-dispatch %%tmp1753 '(any #(each (any any)) any . each-any)))) %%e1748))) (%%chi-void448 (lambda () (build-source #f (cons (build-source #f 'void) '())))) (%%ellipsis?449 (lambda (%%x1771) (if (%%nonsymbol-id?221 %%x1771) (%%literal-id=?355 %%x1771 '#structure(#4# #(#5# ... #6# 2493421) (#7# #structure(#9# () () ()) #structure(#9# #(x) #(#7#) #("i")) #10# . #12#))) #f))) (%%strip-annotation450 (lambda (%%x1772) (if (pair? %%x1772) (cons (%%strip-annotation450 (car %%x1772)) (%%strip-annotation450 (cdr %%x1772))) (if (annotation? %%x1772) (annotation-stripped %%x1772) %%x1772)))) (%%strip*451 (lambda (%%x1773 %%w1774 %%fn1775) (if (memq 'top (%%wrap-marks232 %%w1774)) (%%fn1775 %%x1773) ((letrec ((%%f1776 (lambda (%%x1777) (if (%%syntax?37 %%x1777) (%%strip*451 (%%syntax-expression38 %%x1777) (%%syntax-wrap39 %%x1777) %%fn1775) (if (pair? %%x1777) ((lambda (%%a1778 %%d1779) (if (if (eq? %%a1778 (car %%x1777)) (eq? %%d1779 (cdr %%x1777)) #f) %%x1777 (cons %%a1778 %%d1779))) (%%f1776 (car %%x1777)) (%%f1776 (cdr %%x1777))) (if (vector? %%x1777) ((lambda (%%old1780) ((lambda (%%new1781) (if (andmap eq? %%old1780 %%new1781) %%x1777 (list->vector %%new1781))) (map %%f1776 %%old1780))) (vector->list %%x1777)) %%x1777)))))) %%f1776) %%x1773)))) (%%strip452 (lambda (%%x1782 %%w1783) (%%strip*451 %%x1782 %%w1783 (lambda (%%x1784) (if ((lambda (%%t1785) (if %%t1785 %%t1785 (if (pair? %%x1784) (annotation? (car %%x1784)) #f))) (annotation? %%x1784)) (%%strip-annotation450 %%x1784) %%x1784))))) (%%gen-var453 (lambda (%%id1786) ((lambda (%%id1787) (if (annotation? %%id1787) (build-source %%id1787 (gensym (annotation-expression %%id1787))) (build-source %%id1787 (gensym %%id1787)))) (if (%%syntax?37 %%id1786) (%%syntax-expression38 %%id1786) %%id1786)))) (%%lambda-var-list454 (lambda (%%vars1788) ((letrec ((%%lvl1789 (lambda (%%vars1790 %%ls1791 %%w1792) (if (pair? %%vars1790) (%%lvl1789 (cdr %%vars1790) (cons (%%wrap362 (car %%vars1790) %%w1792) %%ls1791) %%w1792) (if (%%id?222 %%vars1790) (cons (%%wrap362 %%vars1790 %%w1792) %%ls1791) (if (null? %%vars1790) %%ls1791 (if (%%syntax?37 %%vars1790) (%%lvl1789 (%%syntax-expression38 %%vars1790) %%ls1791 (%%join-wraps341 %%w1792 (%%syntax-wrap39 %%vars1790))) (if (annotation? %%vars1790) (%%lvl1789 (annotation-expression %%vars1790) %%ls1791 %%w1792) (cons %%vars1790 %%ls1791))))))))) %%lvl1789) %%vars1788 '() '(()))))) (begin (set! $load-module (lambda (%%mid1793 %%ctem1794 %%rtem1795) 'not-found)) (set! $update-module (lambda (%%mid1796 %%ctem1797 %%rtem1798) (void))) (set! $include-file-hook (lambda (%%filename1799) (void))) (set! $sc-put-cte (make-parameter (lambda (%%id1800 %%b1801 %%top-token1802) (letrec ((%%sc-put-module1803 (lambda (%%exports1805 %%token1806 %%new-marks1807) (%%vfor-each410 (lambda (%%id1808) (%%store-import-binding335 %%id1808 %%token1806 %%new-marks1807)) %%exports1805))) (%%put-cte1804 (lambda (%%id1809 %%binding1810 %%token1811) ((lambda (%%sym1812) (begin (%%store-import-binding335 %%id1809 %%token1811 '()) (%%put-global-definition-hook45 %%sym1812 (if (if (eq? (%%binding-type197 %%binding1810) 'global) (eq? (%%binding-value198 %%binding1810) %%sym1812) #f) #f %%binding1810)))) (if (symbol? %%id1809) %%id1809 (%%id-var-name353 %%id1809 '(()))))))) ((lambda (%%binding1813) ((lambda (%%t1814) (if (memv %%t1814 '($module)) (begin ((lambda (%%iface1815) (%%sc-put-module1803 (%%interface-exports375 %%iface1815) (%%interface-token377 %%iface1815) '())) (%%binding-value198 %%binding1813)) (%%put-cte1804 %%id1800 %%binding1813 %%top-token1802)) (if (memv %%t1814 '(do-alias)) (%%store-import-binding335 %%id1800 %%top-token1802 '()) (if (memv %%t1814 '(do-import)) ((lambda (%%token1816) ((lambda (%%b1817) ((lambda (%%t1818) (if (memv %%t1818 '($module)) ((lambda (%%iface1819) ((lambda (%%exports1820) ((lambda () (begin (if (not (eq? (%%interface-token377 %%iface1819) %%token1816)) (syntax-error %%id1800 "import mismatch for module") (void)) (%%sc-put-module1803 (%%interface-exports375 %%iface1819) %%top-token1802 (%%import-mark-delta427 %%id1800 %%iface1819)))))) (%%interface-exports375 %%iface1819))) (%%binding-value198 %%b1817)) (syntax-error %%id1800 "unknown module"))) (%%binding-type197 %%b1817))) (%%lookup217 (%%id-var-name353 %%id1800 '(())) '()))) (%%binding-value198 %%b1801)) (%%put-cte1804 %%id1800 %%binding1813 %%top-token1802))))) (%%binding-type197 %%binding1813))) (%%make-transformer-binding218 %%b1801)))))) (%%global-extend220 'core 'c-define-type (lambda (%%e1821 %%r1822 %%mr1823 %%w1824 %%ae1825 %%m?1826) (attach-source %%ae1825 (%%strip452 %%e1821 %%w1824)))) (%%global-extend220 'core 'c-declare (lambda (%%e1827 %%r1828 %%mr1829 %%w1830 %%ae1831 %%m?1832) (attach-source %%ae1831 (%%strip452 %%e1827 %%w1830)))) (%%global-extend220 'core 'c-initialize (lambda (%%e1833 %%r1834 %%mr1835 %%w1836 %%ae1837 %%m?1838) (attach-source %%ae1837 (%%strip452 %%e1833 %%w1836)))) (%%global-extend220 'core 'c-lambda (lambda (%%e1839 %%r1840 %%mr1841 %%w1842 %%ae1843 %%m?1844) (attach-source %%ae1843 (%%strip452 %%e1839 %%w1842)))) (%%global-extend220 'core 'c-define (lambda (%%e1845 %%r1846 %%mr1847 %%w1848 %%ae1849 %%m?1850) (attach-source %%ae1849 (%%strip452 %%e1845 %%w1848)))) (%%global-extend220 'core 'declare (lambda (%%e1851 %%r1852 %%mr1853 %%w1854 %%ae1855 %%m?1856) (attach-source %%ae1855 (%%strip452 %%e1851 %%w1854)))) (%%global-extend220 'local-syntax 'letrec-syntax #t) (%%global-extend220 'local-syntax 'let-syntax #f) (%%global-extend220 'core 'fluid-let-syntax (lambda (%%e1857 %%r1858 %%mr1859 %%w1860 %%ae1861 %%m?1862) ((lambda (%%tmp1863) ((lambda (%%tmp1864) (if (if %%tmp1864 (apply (lambda (%%_1865 %%var1866 %%val1867 %%e11868 %%e21869) (%%valid-bound-ids?358 %%var1866)) %%tmp1864) #f) (apply (lambda (%%_1871 %%var1872 %%val1873 %%e11874 %%e21875) ((lambda (%%names1876) (begin (for-each (lambda (%%id1877 %%n1878) ((lambda (%%t1879) (if (memv %%t1879 '(displaced-lexical)) (%%displaced-lexical-error215 (%%wrap362 %%id1877 %%w1860)) (void))) (%%binding-type197 (%%lookup217 %%n1878 %%r1858)))) %%var1872 %%names1876) ((lambda (%%b*1881) (%%chi-body425 (cons %%e11874 %%e21875) (%%source-wrap363 %%e1857 %%w1860 %%ae1861) (%%extend-env*212 %%names1876 %%b*1881 %%r1858) (%%extend-env*212 %%names1876 %%b*1881 %%mr1859) %%w1860 %%m?1862)) (map (lambda (%%x1883) (%%defer-or-eval-transformer219 %%local-eval-hook41 (%%chi420 %%x1883 %%mr1859 %%mr1859 %%w1860 #t))) %%val1873)))) (map (lambda (%%x1885) (%%id-var-name353 %%x1885 %%w1860)) %%var1872))) %%tmp1864) ((lambda (%%_1887) (syntax-error (%%source-wrap363 %%e1857 %%w1860 %%ae1861))) %%tmp1863))) ($syntax-dispatch %%tmp1863 '(any #(each (any any)) any . each-any)))) %%e1857))) (%%global-extend220 'core 'quote (lambda (%%e1888 %%r1889 %%mr1890 %%w1891 %%ae1892 %%m?1893) ((lambda (%%tmp1894) ((lambda (%%tmp1895) (if %%tmp1895 (apply (lambda (%%_1896 %%e1897) ((lambda (%%x1898) (if (self-eval? (%%strip452 %%e1897 %%w1891)) %%x1898 (build-source %%ae1892 (list (build-source %%ae1892 'quote) %%x1898)))) (attach-source %%ae1892 (%%strip452 %%e1897 %%w1891)))) %%tmp1895) ((lambda (%%_1899) (syntax-error (%%source-wrap363 %%e1888 %%w1891 %%ae1892))) %%tmp1894))) ($syntax-dispatch %%tmp1894 '(any any)))) %%e1888))) (%%global-extend220 'core 'syntax ((lambda () (letrec ((%%gen-syntax1900 (lambda (%%src1908 %%e1909 %%r1910 %%maps1911 %%ellipsis?1912 %%vec?1913) (if (%%id?222 %%e1909) ((lambda (%%label1914) ((lambda (%%b1915) (if (eq? (%%binding-type197 %%b1915) 'syntax) (call-with-values (lambda () ((lambda (%%var.lev1916) (%%gen-ref1901 %%src1908 (car %%var.lev1916) (cdr %%var.lev1916) %%maps1911)) (%%binding-value198 %%b1915))) (lambda (%%var1917 %%maps1918) (values (list 'ref %%var1917) %%maps1918))) (if (%%ellipsis?1912 %%e1909) (syntax-error %%src1908 "misplaced ellipsis in syntax form") (values (list 'quote %%e1909) %%maps1911)))) (%%lookup217 %%label1914 %%r1910))) (%%id-var-name353 %%e1909 '(()))) ((lambda (%%tmp1919) ((lambda (%%tmp1920) (if (if %%tmp1920 (apply (lambda (%%dots1921 %%e1922) (%%ellipsis?1912 %%dots1921)) %%tmp1920) #f) (apply (lambda (%%dots1923 %%e1924) (if %%vec?1913 (syntax-error %%src1908 "misplaced ellipsis in syntax template") (%%gen-syntax1900 %%src1908 %%e1924 %%r1910 %%maps1911 (lambda (%%x1925) #f) #f))) %%tmp1920) ((lambda (%%tmp1926) (if (if %%tmp1926 (apply (lambda (%%x1927 %%dots1928 %%y1929) (%%ellipsis?1912 %%dots1928)) %%tmp1926) #f) (apply (lambda (%%x1930 %%dots1931 %%y1932) ((letrec ((%%f1933 (lambda (%%y1934 %%k1935) ((lambda (%%tmp1936) ((lambda (%%tmp1937) (if (if %%tmp1937 (apply (lambda (%%dots1938 %%y1939) (%%ellipsis?1912 %%dots1938)) %%tmp1937) #f) (apply (lambda (%%dots1940 %%y1941) (%%f1933 %%y1941 (lambda (%%maps1942) (call-with-values (lambda () (%%k1935 (cons '() %%maps1942))) (lambda (%%x1943 %%maps1944) (if (null? (car %%maps1944)) (syntax-error %%src1908 "extra ellipsis in syntax form") (values (%%gen-mappend1903 %%x1943 (car %%maps1944)) (cdr %%maps1944)))))))) %%tmp1937) ((lambda (%%_1945) (call-with-values (lambda () (%%gen-syntax1900 %%src1908 %%y1934 %%r1910 %%maps1911 %%ellipsis?1912 %%vec?1913)) (lambda (%%y1946 %%maps1947) (call-with-values (lambda () (%%k1935 %%maps1947)) (lambda (%%x1948 %%maps1949) (values (%%gen-append1902 %%x1948 %%y1946) %%maps1949)))))) %%tmp1936))) ($syntax-dispatch %%tmp1936 '(any . any)))) %%y1934)))) %%f1933) %%y1932 (lambda (%%maps1950) (call-with-values (lambda () (%%gen-syntax1900 %%src1908 %%x1930 %%r1910 (cons '() %%maps1950) %%ellipsis?1912 #f)) (lambda (%%x1951 %%maps1952) (if (null? (car %%maps1952)) (syntax-error %%src1908 "extra ellipsis in syntax form") (values (%%gen-map1904 %%x1951 (car %%maps1952)) (cdr %%maps1952)))))))) %%tmp1926) ((lambda (%%tmp1953) (if %%tmp1953 (apply (lambda (%%x1954 %%y1955) (call-with-values (lambda () (%%gen-syntax1900 %%src1908 %%x1954 %%r1910 %%maps1911 %%ellipsis?1912 #f)) (lambda (%%xnew1956 %%maps1957) (call-with-values (lambda () (%%gen-syntax1900 %%src1908 %%y1955 %%r1910 %%maps1957 %%ellipsis?1912 %%vec?1913)) (lambda (%%ynew1958 %%maps1959) (values (%%gen-cons1905 %%e1909 %%x1954 %%y1955 %%xnew1956 %%ynew1958) %%maps1959)))))) %%tmp1953) ((lambda (%%tmp1960) (if %%tmp1960 (apply (lambda (%%x11961 %%x21962) ((lambda (%%ls1963) (call-with-values (lambda () (%%gen-syntax1900 %%src1908 %%ls1963 %%r1910 %%maps1911 %%ellipsis?1912 #t)) (lambda (%%lsnew1964 %%maps1965) (values (%%gen-vector1906 %%e1909 %%ls1963 %%lsnew1964) %%maps1965)))) (cons %%x11961 %%x21962))) %%tmp1960) ((lambda (%%_1967) (values (list 'quote %%e1909) %%maps1911)) %%tmp1919))) ($syntax-dispatch %%tmp1919 '#(vector (any . each-any)))))) ($syntax-dispatch %%tmp1919 '(any . any))))) ($syntax-dispatch %%tmp1919 '(any any . any))))) ($syntax-dispatch %%tmp1919 '(any any)))) %%e1909)))) (%%gen-ref1901 (lambda (%%src1968 %%var1969 %%level1970 %%maps1971) (if (fx= %%level1970 0) (values %%var1969 %%maps1971) (if (null? %%maps1971) (syntax-error %%src1968 "missing ellipsis in syntax form") (call-with-values (lambda () (%%gen-ref1901 %%src1968 %%var1969 (fx- %%level1970 1) (cdr %%maps1971))) (lambda (%%outer-var1972 %%outer-maps1973) ((lambda (%%b1974) (if %%b1974 (values (cdr %%b1974) %%maps1971) ((lambda (%%inner-var1975) (values %%inner-var1975 (cons (cons (cons %%outer-var1972 %%inner-var1975) (car %%maps1971)) %%outer-maps1973))) (%%gen-var453 'tmp)))) (assq %%outer-var1972 (car %%maps1971))))))))) (%%gen-append1902 (lambda (%%x1976 %%y1977) (if (equal? %%y1977 ''()) %%x1976 (list 'append %%x1976 %%y1977)))) (%%gen-mappend1903 (lambda (%%e1978 %%map-env1979) (list 'apply '(primitive append) (%%gen-map1904 %%e1978 %%map-env1979)))) (%%gen-map1904 (lambda (%%e1980 %%map-env1981) ((lambda (%%formals1982 %%actuals1983) (if (eq? (car %%e1980) 'ref) (car %%actuals1983) (if (andmap (lambda (%%x1984) (if (eq? (car %%x1984) 'ref) (memq (cadr %%x1984) %%formals1982) #f)) (cdr %%e1980)) (cons 'map (cons (list 'primitive (car %%e1980)) (map ((lambda (%%r1985) (lambda (%%x1986) (cdr (assq (cadr %%x1986) %%r1985)))) (map cons %%formals1982 %%actuals1983)) (cdr %%e1980)))) (cons 'map (cons (list 'lambda %%formals1982 %%e1980) %%actuals1983))))) (map cdr %%map-env1981) (map (lambda (%%x1987) (list 'ref (car %%x1987))) %%map-env1981)))) (%%gen-cons1905 (lambda (%%e1988 %%x1989 %%y1990 %%xnew1991 %%ynew1992) ((lambda (%%t1993) (if (memv %%t1993 '(quote)) (if (eq? (car %%xnew1991) 'quote) ((lambda (%%xnew1994 %%ynew1995) (if (if (eq? %%xnew1994 %%x1989) (eq? %%ynew1995 %%y1990) #f) (list 'quote %%e1988) (list 'quote (cons %%xnew1994 %%ynew1995)))) (cadr %%xnew1991) (cadr %%ynew1992)) (if (eq? (cadr %%ynew1992) '()) (list 'list %%xnew1991) (list 'cons %%xnew1991 %%ynew1992))) (if (memv %%t1993 '(list)) (cons 'list (cons %%xnew1991 (cdr %%ynew1992))) (list 'cons %%xnew1991 %%ynew1992)))) (car %%ynew1992)))) (%%gen-vector1906 (lambda (%%e1996 %%ls1997 %%lsnew1998) (if (eq? (car %%lsnew1998) 'quote) (if (eq? (cadr %%lsnew1998) %%ls1997) (list 'quote %%e1996) (list 'quote (list->vector (cadr %%lsnew1998)))) (if (eq? (car %%lsnew1998) 'list) (cons 'vector (cdr %%lsnew1998)) (list 'list->vector %%lsnew1998))))) (%%regen1907 (lambda (%%x1999) ((lambda (%%t2000) (if (memv %%t2000 '(ref)) (cadr %%x1999) (if (memv %%t2000 '(primitive)) (build-source #f (cadr %%x1999)) (if (memv %%t2000 '(quote)) ((lambda (%%x2001) (if (self-eval? (cadr %%x1999)) %%x2001 (build-source #f (list (build-source #f 'quote) %%x2001)))) (attach-source #f (cadr %%x1999))) (if (memv %%t2000 '(lambda)) (build-source #f (list (build-source #f 'lambda) (build-source #f (cadr %%x1999)) (%%regen1907 (caddr %%x1999)))) (if (memv %%t2000 '(map)) ((lambda (%%ls2002) (build-source #f (cons (if (fx= (length %%ls2002) 2) (build-source #f 'map) (build-source #f 'map)) %%ls2002))) (map %%regen1907 (cdr %%x1999))) (build-source #f (cons (build-source #f (car %%x1999)) (map %%regen1907 (cdr %%x1999)))))))))) (car %%x1999))))) (lambda (%%e2003 %%r2004 %%mr2005 %%w2006 %%ae2007 %%m?2008) ((lambda (%%e2009) ((lambda (%%tmp2010) ((lambda (%%tmp2011) (if %%tmp2011 (apply (lambda (%%_2012 %%x2013) (call-with-values (lambda () (%%gen-syntax1900 %%e2009 %%x2013 %%r2004 '() %%ellipsis?449 #f)) (lambda (%%e2014 %%maps2015) (%%regen1907 %%e2014)))) %%tmp2011) ((lambda (%%_2016) (syntax-error %%e2009)) %%tmp2010))) ($syntax-dispatch %%tmp2010 '(any any)))) %%e2009)) (%%source-wrap363 %%e2003 %%w2006 %%ae2007))))))) (%%global-extend220 'core 'lambda (lambda (%%e2017 %%r2018 %%mr2019 %%w2020 %%ae2021 %%m?2022) ((lambda (%%tmp2023) ((lambda (%%tmp2024) (if %%tmp2024 (apply (lambda (%%_2025 %%c2026) (call-with-values (lambda () (%%chi-lambda-clause446 (%%source-wrap363 %%e2017 %%w2020 %%ae2021) %%c2026 %%r2018 %%mr2019 %%w2020 %%m?2022)) (lambda (%%emitter2027 %%dsssl-args2028 %%vars2029 %%dsssl-formals2030 %%orig-vars2031 %%body2032) ((lambda (%%t2033) (if (memv %%t2033 '(keyword)) (build-source %%ae2021 (list (build-source %%ae2021 'lambda) %%dsssl-args2028 (build-source %%ae2021 (list (build-source %%ae2021 'receive) %%vars2029 (build-source %%ae2021 (list (build-source %%ae2021 'apply) (build-source %%ae2021 (list (build-source %%ae2021 'lambda) %%dsssl-formals2030 (build-source %%ae2021 (cons (build-source %%ae2021 'values) %%orig-vars2031)))) %%dsssl-args2028)) %%body2032)))) (if (memv %%t2033 '(optional/rest)) (build-source %%ae2021 (list (build-source %%ae2021 'lambda) %%dsssl-formals2030 %%body2032)) (if (memv %%t2033 '(rnrs)) (build-source %%ae2021 (list (build-source %%ae2021 'lambda) %%vars2029 %%body2032)) (void))))) %%emitter2027)))) %%tmp2024) (syntax-error %%tmp2023))) ($syntax-dispatch %%tmp2023 '(any . any)))) %%e2017))) (%%global-extend220 'core 'letrec (lambda (%%e2034 %%r2035 %%mr2036 %%w2037 %%ae2038 %%m?2039) ((lambda (%%tmp2040) ((lambda (%%tmp2041) (if %%tmp2041 (apply (lambda (%%_2042 %%id2043 %%val2044 %%e12045 %%e22046) ((lambda (%%ids2047) (if (not (%%valid-bound-ids?358 %%ids2047)) (%%invalid-ids-error360 (map (lambda (%%x2048) (%%wrap362 %%x2048 %%w2037)) %%ids2047) (%%source-wrap363 %%e2034 %%w2037 %%ae2038) "bound variable") ((lambda (%%labels2049 %%new-vars2050) ((lambda (%%w2051 %%r2052) (%%build-letrec151 %%ae2038 %%new-vars2050 (map (lambda (%%x2053) (%%chi420 %%x2053 %%r2052 %%mr2036 %%w2051 %%m?2039)) %%val2044) (%%chi-body425 (cons %%e12045 %%e22046) (%%source-wrap363 %%e2034 %%w2051 %%ae2038) %%r2052 %%mr2036 %%w2051 %%m?2039))) (%%make-binding-wrap336 %%ids2047 %%labels2049 %%w2037) (%%extend-var-env*213 %%labels2049 %%new-vars2050 %%r2035))) (%%gen-labels281 %%ids2047) (map %%gen-var453 %%ids2047)))) %%id2043)) %%tmp2041) ((lambda (%%_2057) (syntax-error (%%source-wrap363 %%e2034 %%w2037 %%ae2038))) %%tmp2040))) ($syntax-dispatch %%tmp2040 '(any #(each (any any)) any . each-any)))) %%e2034))) (%%global-extend220 'core 'if (lambda (%%e2058 %%r2059 %%mr2060 %%w2061 %%ae2062 %%m?2063) ((lambda (%%tmp2064) ((lambda (%%tmp2065) (if %%tmp2065 (apply (lambda (%%_2066 %%test2067 %%then2068) (build-source %%ae2062 (list (build-source %%ae2062 'if) (%%chi420 %%test2067 %%r2059 %%mr2060 %%w2061 %%m?2063) (%%chi420 %%then2068 %%r2059 %%mr2060 %%w2061 %%m?2063) (%%chi-void448)))) %%tmp2065) ((lambda (%%tmp2069) (if %%tmp2069 (apply (lambda (%%_2070 %%test2071 %%then2072 %%else2073) (build-source %%ae2062 (list (build-source %%ae2062 'if) (%%chi420 %%test2071 %%r2059 %%mr2060 %%w2061 %%m?2063) (%%chi420 %%then2072 %%r2059 %%mr2060 %%w2061 %%m?2063) (%%chi420 %%else2073 %%r2059 %%mr2060 %%w2061 %%m?2063)))) %%tmp2069) ((lambda (%%_2074) (syntax-error (%%source-wrap363 %%e2058 %%w2061 %%ae2062))) %%tmp2064))) ($syntax-dispatch %%tmp2064 '(any any any any))))) ($syntax-dispatch %%tmp2064 '(any any any)))) %%e2058))) (%%global-extend220 'set! 'set! '()) (%%global-extend220 'alias 'alias '()) (%%global-extend220 'begin 'begin '()) (%%global-extend220 'begin '##begin '()) (%%global-extend220 '$module-key '$module '()) (%%global-extend220 '$import '$import '()) (%%global-extend220 'define 'define '()) (%%global-extend220 'define-syntax 'define-syntax '()) (%%global-extend220 'eval-when 'eval-when '()) (%%global-extend220 'meta 'meta '()) (%%global-extend220 'core 'syntax-case ((lambda () (letrec ((%%convert-pattern2075 (lambda (%%pattern2079 %%keys2080) (letrec ((%%cvt*2081 (lambda (%%p*2083 %%n2084 %%ids2085) (if (null? %%p*2083) (values '() %%ids2085) (call-with-values (lambda () (%%cvt*2081 (cdr %%p*2083) %%n2084 %%ids2085)) (lambda (%%y2086 %%ids2087) (call-with-values (lambda () (%%cvt2082 (car %%p*2083) %%n2084 %%ids2087)) (lambda (%%x2088 %%ids2089) (values (cons %%x2088 %%y2086) %%ids2089)))))))) (%%cvt2082 (lambda (%%p2090 %%n2091 %%ids2092) (if (%%id?222 %%p2090) (if (%%bound-id-member?361 %%p2090 %%keys2080) (values (vector 'free-id %%p2090) %%ids2092) (values 'any (cons (cons %%p2090 %%n2091) %%ids2092))) ((lambda (%%tmp2093) ((lambda (%%tmp2094) (if (if %%tmp2094 (apply (lambda (%%x2095 %%dots2096) (%%ellipsis?449 %%dots2096)) %%tmp2094) #f) (apply (lambda (%%x2097 %%dots2098) (call-with-values (lambda () (%%cvt2082 %%x2097 (fx+ %%n2091 1) %%ids2092)) (lambda (%%p2099 %%ids2100) (values (if (eq? %%p2099 'any) 'each-any (vector 'each %%p2099)) %%ids2100)))) %%tmp2094) ((lambda (%%tmp2101) (if (if %%tmp2101 (apply (lambda (%%x2102 %%dots2103 %%y2104 %%z2105) (%%ellipsis?449 %%dots2103)) %%tmp2101) #f) (apply (lambda (%%x2106 %%dots2107 %%y2108 %%z2109) (call-with-values (lambda () (%%cvt2082 %%z2109 %%n2091 %%ids2092)) (lambda (%%z2110 %%ids2111) (call-with-values (lambda () (%%cvt*2081 %%y2108 %%n2091 %%ids2111)) (lambda (%%y2113 %%ids2114) (call-with-values (lambda () (%%cvt2082 %%x2106 (fx+ %%n2091 1) %%ids2114)) (lambda (%%x2115 %%ids2116) (values (vector 'each+ %%x2115 (reverse %%y2113) %%z2110) %%ids2116)))))))) %%tmp2101) ((lambda (%%tmp2117) (if %%tmp2117 (apply (lambda (%%x2118 %%y2119) (call-with-values (lambda () (%%cvt2082 %%y2119 %%n2091 %%ids2092)) (lambda (%%y2120 %%ids2121) (call-with-values (lambda () (%%cvt2082 %%x2118 %%n2091 %%ids2121)) (lambda (%%x2122 %%ids2123) (values (cons %%x2122 %%y2120) %%ids2123)))))) %%tmp2117) ((lambda (%%tmp2124) (if %%tmp2124 (apply (lambda () (values '() %%ids2092)) %%tmp2124) ((lambda (%%tmp2125) (if %%tmp2125 (apply (lambda (%%x2126) (call-with-values (lambda () (%%cvt2082 %%x2126 %%n2091 %%ids2092)) (lambda (%%p2128 %%ids2129) (values (vector 'vector %%p2128) %%ids2129)))) %%tmp2125) ((lambda (%%x2130) (values (vector 'atom (%%strip452 %%p2090 '(()))) %%ids2092)) %%tmp2093))) ($syntax-dispatch %%tmp2093 '#(vector each-any))))) ($syntax-dispatch %%tmp2093 '())))) ($syntax-dispatch %%tmp2093 '(any . any))))) ($syntax-dispatch %%tmp2093 '(any any . #(each+ any () any)))))) ($syntax-dispatch %%tmp2093 '(any any)))) %%p2090))))) (%%cvt2082 %%pattern2079 0 '())))) (%%build-dispatch-call2076 (lambda (%%pvars2131 %%exp2132 %%y2133 %%r2134 %%mr2135 %%m?2136) ((lambda (%%ids2137 %%levels2138) ((lambda (%%labels2139 %%new-vars2140) (build-source #f (cons (build-source #f 'apply) (list (build-source #f (list (build-source #f 'lambda) (build-source #f %%new-vars2140) (%%chi420 %%exp2132 (%%extend-env*212 %%labels2139 (map (lambda (%%var2141 %%level2142) (cons 'syntax (cons %%var2141 %%level2142))) %%new-vars2140 (map cdr %%pvars2131)) %%r2134) %%mr2135 (%%make-binding-wrap336 %%ids2137 %%labels2139 '(())) %%m?2136))) %%y2133)))) (%%gen-labels281 %%ids2137) (map %%gen-var453 %%ids2137))) (map car %%pvars2131) (map cdr %%pvars2131)))) (%%gen-clause2077 (lambda (%%x2143 %%keys2144 %%clauses2145 %%r2146 %%mr2147 %%m?2148 %%pat2149 %%fender2150 %%exp2151) (call-with-values (lambda () (%%convert-pattern2075 %%pat2149 %%keys2144)) (lambda (%%p2152 %%pvars2153) (if (not (%%distinct-bound-ids?359 (map car %%pvars2153))) (%%invalid-ids-error360 (map car %%pvars2153) %%pat2149 "pattern variable") (if (not (andmap (lambda (%%x2154) (not (%%ellipsis?449 (car %%x2154)))) %%pvars2153)) (syntax-error %%pat2149 "misplaced ellipsis in syntax-case pattern") ((lambda (%%y2155) (build-source #f (cons (build-source #f (list (build-source #f 'lambda) (build-source #f (list %%y2155)) (build-source #f (list (build-source #f 'if) ((lambda (%%tmp2165) ((lambda (%%tmp2166) (if %%tmp2166 (apply (lambda () %%y2155) %%tmp2166) ((lambda (%%_2167) (build-source #f (list (build-source #f 'if) %%y2155 (%%build-dispatch-call2076 %%pvars2153 %%fender2150 %%y2155 %%r2146 %%mr2147 %%m?2148) ((lambda (%%x2168) (if (self-eval? #f) %%x2168 (build-source #f (list (build-source #f 'quote) %%x2168)))) (attach-source #f #f))))) %%tmp2165))) ($syntax-dispatch %%tmp2165 '#(atom #t)))) %%fender2150) (%%build-dispatch-call2076 %%pvars2153 %%exp2151 %%y2155 %%r2146 %%mr2147 %%m?2148) (%%gen-syntax-case2078 %%x2143 %%keys2144 %%clauses2145 %%r2146 %%mr2147 %%m?2148))))) (list (if (eq? %%p2152 'any) (build-source #f (cons (build-source #f 'list) (list %%x2143))) (build-source #f (cons (build-source #f '$syntax-dispatch) (list %%x2143 ((lambda (%%x2169) (if (self-eval? %%p2152) %%x2169 (build-source #f (list (build-source #f 'quote) %%x2169)))) (attach-source #f %%p2152)))))))))) (%%gen-var453 'tmp)))))))) (%%gen-syntax-case2078 (lambda (%%x2170 %%keys2171 %%clauses2172 %%r2173 %%mr2174 %%m?2175) (if (null? %%clauses2172) (build-source #f (cons (build-source #f 'syntax-error) (list %%x2170))) ((lambda (%%tmp2176) ((lambda (%%tmp2177) (if %%tmp2177 (apply (lambda (%%pat2178 %%exp2179) (if (if (%%id?222 %%pat2178) (if (not (%%bound-id-member?361 %%pat2178 %%keys2171)) (not (%%ellipsis?449 %%pat2178)) #f) #f) ((lambda (%%label2180 %%var2181) (build-source #f (cons (build-source #f (list (build-source #f 'lambda) (build-source #f (list %%var2181)) (%%chi420 %%exp2179 (%%extend-env211 %%label2180 (cons 'syntax (cons %%var2181 0)) %%r2173) %%mr2174 (%%make-binding-wrap336 (list %%pat2178) (list %%label2180) '(())) %%m?2175))) (list %%x2170)))) (%%gen-label279) (%%gen-var453 %%pat2178)) (%%gen-clause2077 %%x2170 %%keys2171 (cdr %%clauses2172) %%r2173 %%mr2174 %%m?2175 %%pat2178 #t %%exp2179))) %%tmp2177) ((lambda (%%tmp2182) (if %%tmp2182 (apply (lambda (%%pat2183 %%fender2184 %%exp2185) (%%gen-clause2077 %%x2170 %%keys2171 (cdr %%clauses2172) %%r2173 %%mr2174 %%m?2175 %%pat2183 %%fender2184 %%exp2185)) %%tmp2182) ((lambda (%%_2186) (syntax-error (car %%clauses2172) "invalid syntax-case clause")) %%tmp2176))) ($syntax-dispatch %%tmp2176 '(any any any))))) ($syntax-dispatch %%tmp2176 '(any any)))) (car %%clauses2172)))))) (lambda (%%e2187 %%r2188 %%mr2189 %%w2190 %%ae2191 %%m?2192) ((lambda (%%e2193) ((lambda (%%tmp2194) ((lambda (%%tmp2195) (if %%tmp2195 (apply (lambda (%%_2196 %%val2197 %%key2198 %%m2199) (if (andmap (lambda (%%x2200) (if (%%id?222 %%x2200) (not (%%ellipsis?449 %%x2200)) #f)) %%key2198) ((lambda (%%x2202) (build-source %%ae2191 (cons (build-source #f (list (build-source #f 'lambda) (build-source #f (list %%x2202)) (%%gen-syntax-case2078 %%x2202 %%key2198 %%m2199 %%r2188 %%mr2189 %%m?2192))) (list (%%chi420 %%val2197 %%r2188 %%mr2189 '(()) %%m?2192))))) (%%gen-var453 'tmp)) (syntax-error %%e2193 "invalid literals list in"))) %%tmp2195) (syntax-error %%tmp2194))) ($syntax-dispatch %%tmp2194 '(any any each-any . each-any)))) %%e2193)) (%%source-wrap363 %%e2187 %%w2190 %%ae2191))))))) (%%put-cte-hook43 'module (lambda (%%x2205) (letrec ((%%proper-export?2206 (lambda (%%e2207) ((lambda (%%tmp2208) ((lambda (%%tmp2209) (if %%tmp2209 (apply (lambda (%%id2210 %%e2211) (if (identifier? %%id2210) (andmap %%proper-export?2206 %%e2211) #f)) %%tmp2209) ((lambda (%%id2213) (identifier? %%id2213)) %%tmp2208))) ($syntax-dispatch %%tmp2208 '(any . each-any)))) %%e2207)))) ((lambda (%%tmp2214) ((lambda (%%orig2215) ((lambda (%%tmp2216) ((lambda (%%tmp2217) (if %%tmp2217 (apply (lambda (%%_2218 %%e2219 %%d2220) (if (andmap %%proper-export?2206 %%e2219) (list '#structure(#4# #(#5# begin #6# 3083836) #14=(#7# #structure(#9# #(_ e d) #(#7# #7# #7#) #("i" "i" "i")) . #15=(#structure(#9# #(orig) #(#7#) #("i")) #structure(#9# (proper-export?) (#7#) ("i")) #structure(#9# #(x) #(#7#) #("i")) #10# . #12#))) (cons '#structure(#4# #(#5# $module #6# 3542588) #14#) (cons %%orig2215 (cons '#structure(#4# #(#5# anon #6# 4394556) #14#) (cons %%e2219 %%d2220)))) (cons '#structure(#4# #(#5# $import #6# 5770812) #14#) (cons %%orig2215 '#structure(#4# (#(#5# #f #6# 6622780) #(#5# anon #6# 6819388)) #14#)))) (syntax-error %%x2205 "invalid exports list in"))) %%tmp2217) ((lambda (%%tmp2224) (if (if %%tmp2224 (apply (lambda (%%_2225 %%m2226 %%e2227 %%d2228) (identifier? %%m2226)) %%tmp2224) #f) (apply (lambda (%%_2229 %%m2230 %%e2231 %%d2232) (if (andmap %%proper-export?2206 %%e2231) (cons '#structure(#4# #(#5# $module #6# 3083841) (#7# #structure(#9# #(_ m e d) #(#7# #7# #7# #7#) #("i" "i" "i" "i")) . #15#)) (cons %%orig2215 (cons %%m2230 (cons %%e2231 %%d2232)))) (syntax-error %%x2205 "invalid exports list in"))) %%tmp2224) (syntax-error %%tmp2216))) ($syntax-dispatch %%tmp2216 '(any any each-any . each-any))))) ($syntax-dispatch %%tmp2216 '(any each-any . each-any)))) %%x2205)) %%tmp2214)) %%x2205)))) ((lambda () (letrec ((%%$module-exports2236 (lambda (%%m2238 %%r2239) ((lambda (%%b2240) ((lambda (%%t2241) (if (memv %%t2241 '($module)) ((lambda (%%interface2242) ((lambda (%%new-marks2243) ((lambda () (%%vmap409 (lambda (%%x2244) ((lambda (%%id2245) (%%make-syntax-object36 (syntax->datum %%id2245) ((lambda (%%marks2246) (%%make-wrap231 %%marks2246 (if (eq? (car %%marks2246) #f) (cons 'shift (%%wrap-subst233 '((top)))) (%%wrap-subst233 '((top)))))) (%%join-marks342 %%new-marks2243 (%%wrap-marks232 (%%syntax-wrap39 %%id2245)))))) (if (pair? %%x2244) (car %%x2244) %%x2244))) (%%interface-exports375 %%interface2242))))) (%%import-mark-delta427 %%m2238 %%interface2242))) (%%binding-value198 %%b2240)) (if (memv %%t2241 '(displaced-lexical)) (%%displaced-lexical-error215 %%m2238) (syntax-error %%m2238 "unknown module")))) (%%binding-type197 %%b2240))) (%%r2239 %%m2238)))) (%%$import-help2237 (lambda (%%orig2247 %%import-only?2248) (lambda (%%r2249) (letrec ((%%difference2250 (lambda (%%ls12256 %%ls22257) (if (null? %%ls12256) %%ls12256 (if (%%bound-id-member?361 (car %%ls12256) %%ls22257) (%%difference2250 (cdr %%ls12256) %%ls22257) (cons (car %%ls12256) (%%difference2250 (cdr %%ls12256) %%ls22257)))))) (%%prefix-add2251 (lambda (%%prefix-id2258) ((lambda (%%prefix2259) (lambda (%%id2260) (datum->syntax %%id2260 (string->symbol (string-append %%prefix2259 (symbol->string (syntax->datum %%id2260))))))) (symbol->string (syntax->datum %%prefix-id2258))))) (%%prefix-drop2252 (lambda (%%prefix-id2261) ((lambda (%%prefix2262) (lambda (%%id2263) ((lambda (%%s2264) ((lambda (%%np2265 %%ns2266) (begin (if (not (if (>= %%ns2266 %%np2265) (string=? (substring %%s2264 0 %%np2265) %%prefix2262) #f)) (syntax-error %%id2263 (string-append "missing expected prefix " %%prefix2262)) (void)) (datum->syntax %%id2263 (string->symbol (substring %%s2264 %%np2265 %%ns2266))))) (string-length %%prefix2262) (string-length %%s2264))) (symbol->string (syntax->datum %%id2263))))) (symbol->string (syntax->datum %%prefix-id2261))))) (%%gen-mid2253 (lambda (%%mid2267) (datum->syntax %%mid2267 (($generate-id) ((lambda (%%x2268) ((lambda (%%e2269) (if (annotation? %%e2269) (annotation-expression %%e2269) %%e2269)) (if (%%syntax?37 %%x2268) (%%syntax-expression38 %%x2268) %%x2268))) %%mid2267))))) (%%modspec2254 (lambda (%%m2270 %%exports?2271) ((lambda (%%tmp2272) ((lambda (%%tmp2273) (if %%tmp2273 (apply (lambda (%%orig2274 %%import-only?2275) ((lambda (%%tmp2276) ((lambda (%%tmp2277) (if (if %%tmp2277 (apply (lambda (%%m2278 %%id2279) (andmap identifier? %%id2279)) %%tmp2277) #f) (apply (lambda (%%m2281 %%id2282) (call-with-values (lambda () (%%modspec2254 %%m2281 #f)) (lambda (%%mid2283 %%d2284 %%exports2285) ((lambda (%%tmp2286) ((lambda (%%tmp2287) (if %%tmp2287 (apply (lambda (%%d2288 %%tmid2289) (values %%mid2283 (list '#structure(#4# #(#5# begin #6# 3935879) #16=(#7# #structure(#9# #(d tmid) #(#7# #7#) #("i" "i")) #structure(#9# () () ()) #structure(#9# #(mid d exports) #(#7# #7# #7#) #("i" "i" "i")) #structure(#9# #(m id) #(#7# #7#) #("i" "i")) . #17=(#structure(#9# #(orig import-only?) #(#7# #7#) #("i" "i")) #structure(#9# () () ()) #structure(#9# #(m exports?) #(#7# #7#) #("i" "i")) . #18=(#structure(#9# (modspec* modspec gen-mid prefix-drop prefix-add difference) (#7# #7# #7# #7# #7# #7#) ("i" "i" "i" "i" "i" "i")) #structure(#9# #(r) #(#7#) #("i")) #structure(#9# () () ()) #structure(#9# #(orig import-only?) #(#7# #7#) #("i" "i")) #structure(#9# ($import-help $module-exports) (#7# #7#) ("i" "i")) #10# . #12#)))) (list '#structure(#4# #(#5# $module #6# 4394631) #16#) %%orig2274 %%tmid2289 %%id2282 %%d2288) (list '#structure(#4# #(#5# $import #6# 6426247) #16#) %%orig2274 %%import-only?2275 %%tmid2289)) (if %%exports?2271 %%id2282 #f))) %%tmp2287) (syntax-error %%tmp2286))) ($syntax-dispatch %%tmp2286 '(any any)))) (list %%d2284 (%%gen-mid2253 %%mid2283)))))) %%tmp2277) ((lambda (%%tmp2292) (if (if %%tmp2292 (apply (lambda (%%m2293 %%id2294) (andmap identifier? %%id2294)) %%tmp2292) #f) (apply (lambda (%%m2296 %%id2297) (call-with-values (lambda () (%%modspec2254 %%m2296 #t)) (lambda (%%mid2298 %%d2299 %%exports2300) ((lambda (%%tmp2301) ((lambda (%%tmp2302) (if %%tmp2302 (apply (lambda (%%d2303 %%tmid2304 %%id2305) (values %%mid2298 (list '#structure(#4# #(#5# begin #6# 3935888) #19=(#7# #structure(#9# #(d tmid id) #(#7# #7# #7#) #("i" "i" "i")) #structure(#9# () () ()) #structure(#9# #(mid d exports) #(#7# #7# #7#) #("i" "i" "i")) #structure(#9# #(m id) #(#7# #7#) #("i" "i")) . #17#)) (list '#structure(#4# #(#5# $module #6# 4394640) #19#) %%orig2274 %%tmid2304 %%id2305 %%d2303) (list '#structure(#4# #(#5# $import #6# 6426256) #19#) %%orig2274 %%import-only?2275 %%tmid2304)) (if %%exports?2271 %%id2305 #f))) %%tmp2302) (syntax-error %%tmp2301))) ($syntax-dispatch %%tmp2301 '(any any each-any)))) (list %%d2299 (%%gen-mid2253 %%mid2298) (%%difference2250 %%exports2300 %%id2297)))))) %%tmp2292) ((lambda (%%tmp2309) (if (if %%tmp2309 (apply (lambda (%%m2310 %%prefix-id2311) (identifier? %%prefix-id2311)) %%tmp2309) #f) (apply (lambda (%%m2312 %%prefix-id2313) (call-with-values (lambda () (%%modspec2254 %%m2312 #t)) (lambda (%%mid2314 %%d2315 %%exports2316) ((lambda (%%tmp2317) ((lambda (%%tmp2318) (if %%tmp2318 (apply (lambda (%%d2319 %%tmid2320 %%old-id2321 %%tmp2322 %%id2323) (values %%mid2314 (list '#structure(#4# #(#5# begin #6# 3935899) #20=(#7# #structure(#9# #(d tmid old-id tmp id) #(#7# #7# #7# #7# #7#) #("i" "i" "i" "i" "i")) #structure(#9# () () ()) #structure(#9# #(mid d exports) #(#7# #7# #7#) #("i" "i" "i")) #structure(#9# #(m prefix-id) #(#7# #7#) #("i" "i")) . #17#)) (cons '#structure(#4# #(#5# $module #6# 4394651) #20#) (cons %%orig2274 (cons %%tmid2320 (cons (map list %%id2323 %%tmp2322) (cons (cons '#structure(#4# #(#5# $module #6# 4984476) #20#) (cons %%orig2274 (cons %%tmid2320 (cons (map list %%tmp2322 %%old-id2321) (cons %%d2319 (map (lambda (%%tmp2329 %%tmp2328) (list '#structure(#4# #(#5# alias #6# 7605916) #20#) %%tmp2328 %%tmp2329)) %%old-id2321 %%tmp2322)))))) (cons (list '#structure(#4# #(#5# $import #6# 4984477) #20#) %%orig2274 %%import-only?2275 %%tmid2320) (map (lambda (%%tmp2331 %%tmp2330) (list '#structure(#4# #(#5# alias #6# 4984478) #20#) %%tmp2330 %%tmp2331)) %%tmp2322 %%id2323))))))) (list '#structure(#4# #(#5# $import #6# 4394655) #20#) %%orig2274 %%import-only?2275 %%tmid2320)) (if %%exports?2271 %%id2323 #f))) %%tmp2318) (syntax-error %%tmp2317))) ($syntax-dispatch %%tmp2317 '(any any each-any each-any each-any)))) (list %%d2315 (%%gen-mid2253 %%mid2314) %%exports2316 (generate-temporaries %%exports2316) (map (%%prefix-add2251 %%prefix-id2313) %%exports2316)))))) %%tmp2309) ((lambda (%%tmp2333) (if (if %%tmp2333 (apply (lambda (%%m2334 %%prefix-id2335) (identifier? %%prefix-id2335)) %%tmp2333) #f) (apply (lambda (%%m2336 %%prefix-id2337) (call-with-values (lambda () (%%modspec2254 %%m2336 #t)) (lambda (%%mid2338 %%d2339 %%exports2340) ((lambda (%%tmp2341) ((lambda (%%tmp2342) (if %%tmp2342 (apply (lambda (%%d2343 %%tmid2344 %%old-id2345 %%tmp2346 %%id2347) (values %%mid2338 (list '#structure(#4# #(#5# begin #6# 3935914) #21=(#7# #structure(#9# #(d tmid old-id tmp id) #(#7# #7# #7# #7# #7#) #("i" "i" "i" "i" "i")) #structure(#9# () () ()) #structure(#9# #(mid d exports) #(#7# #7# #7#) #("i" "i" "i")) #structure(#9# #(m prefix-id) #(#7# #7#) #("i" "i")) . #17#)) (cons '#structure(#4# #(#5# $module #6# 4394666) #21#) (cons %%orig2274 (cons %%tmid2344 (cons (map list %%id2347 %%tmp2346) (cons (cons '#structure(#4# #(#5# $module #6# 4984491) #21#) (cons %%orig2274 (cons %%tmid2344 (cons (map list %%tmp2346 %%old-id2345) (cons %%d2343 (map (lambda (%%tmp2353 %%tmp2352) (list '#structure(#4# #(#5# alias #6# 7605931) #21#) %%tmp2352 %%tmp2353)) %%old-id2345 %%tmp2346)))))) (cons (list '#structure(#4# #(#5# $import #6# 4984492) #21#) %%orig2274 %%import-only?2275 %%tmid2344) (map (lambda (%%tmp2355 %%tmp2354) (list '#structure(#4# #(#5# alias #6# 4984493) #21#) %%tmp2354 %%tmp2355)) %%tmp2346 %%id2347))))))) (list '#structure(#4# #(#5# $import #6# 4394670) #21#) %%orig2274 %%import-only?2275 %%tmid2344)) (if %%exports?2271 %%id2347 #f))) %%tmp2342) (syntax-error %%tmp2341))) ($syntax-dispatch %%tmp2341 '(any any each-any each-any each-any)))) (list %%d2339 (%%gen-mid2253 %%mid2338) %%exports2340 (generate-temporaries %%exports2340) (map (%%prefix-drop2252 %%prefix-id2337) %%exports2340)))))) %%tmp2333) ((lambda (%%tmp2357) (if (if %%tmp2357 (apply (lambda (%%m2358 %%new-id2359 %%old-id2360) (if (andmap identifier? %%new-id2359) (andmap identifier? %%old-id2360) #f)) %%tmp2357) #f) (apply (lambda (%%m2363 %%new-id2364 %%old-id2365) (call-with-values (lambda () (%%modspec2254 %%m2363 #t)) (lambda (%%mid2366 %%d2367 %%exports2368) ((lambda (%%tmp2369) ((lambda (%%tmp2370) (if %%tmp2370 (apply (lambda (%%d2371 %%tmid2372 %%tmp2373 %%other-id2374) (values %%mid2366 (list '#structure(#4# #(#5# begin #6# 3935929) #22=(#7# #structure(#9# #(d tmid tmp other-id) #(#7# #7# #7# #7#) #("i" "i" "i" "i")) #structure(#9# () () ()) #structure(#9# #(mid d exports) #(#7# #7# #7#) #("i" "i" "i")) #structure(#9# #(m new-id old-id) #(#7# #7# #7#) #("i" "i" "i")) . #17#)) (cons '#structure(#4# #(#5# $module #6# 4394681) #22#) (cons %%orig2274 (cons %%tmid2372 (cons (append (map list %%new-id2364 %%tmp2373) %%other-id2374) (cons (cons '#structure(#4# #(#5# $module #6# 4984506) #22#) (cons %%orig2274 (cons %%tmid2372 (cons (append %%other-id2374 (map list %%tmp2373 %%old-id2365)) (cons %%d2371 (map (lambda (%%tmp2382 %%tmp2381) (list '#structure(#4# #(#5# alias #6# 8457914) #22#) %%tmp2381 %%tmp2382)) %%old-id2365 %%tmp2373)))))) (cons (list '#structure(#4# #(#5# $import #6# 4984507) #22#) %%orig2274 %%import-only?2275 %%tmid2372) (map (lambda (%%tmp2384 %%tmp2383) (list '#structure(#4# #(#5# alias #6# 4984508) #22#) %%tmp2383 %%tmp2384)) %%tmp2373 %%new-id2364))))))) (list '#structure(#4# #(#5# $import #6# 4394685) #22#) %%orig2274 %%import-only?2275 %%tmid2372)) (if %%exports?2271 (append %%new-id2364 %%other-id2374) #f))) %%tmp2370) (syntax-error %%tmp2369))) ($syntax-dispatch %%tmp2369 '(any any each-any each-any)))) (list %%d2367 (%%gen-mid2253 %%mid2366) (generate-temporaries %%old-id2365) (%%difference2250 %%exports2368 %%old-id2365)))))) %%tmp2357) ((lambda (%%tmp2389) (if (if %%tmp2389 (apply (lambda (%%m2390 %%new-id2391 %%old-id2392) (if (andmap identifier? %%new-id2391) (andmap identifier? %%old-id2392) #f)) %%tmp2389) #f) (apply (lambda (%%m2395 %%new-id2396 %%old-id2397) (call-with-values (lambda () (%%modspec2254 %%m2395 #t)) (lambda (%%mid2398 %%d2399 %%exports2400) ((lambda (%%tmp2401) ((lambda (%%tmp2402) (if %%tmp2402 (apply (lambda (%%d2403 %%tmid2404 %%other-id2405) (values %%mid2398 (list '#structure(#4# #(#5# begin #6# 3935943) #23=(#7# #structure(#9# #(d tmid other-id) #(#7# #7# #7#) #("i" "i" "i")) #structure(#9# () () ()) #structure(#9# #(mid d exports) #(#7# #7# #7#) #("i" "i" "i")) #structure(#9# #(m new-id old-id) #(#7# #7# #7#) #("i" "i" "i")) . #17#)) (cons '#structure(#4# #(#5# $module #6# 4394695) #23#) (cons %%orig2274 (cons %%tmid2404 (cons (append (map list %%new-id2396 %%old-id2397) %%other-id2405) (cons %%d2403 (map (lambda (%%tmp2410 %%tmp2409) (list '#structure(#4# #(#5# alias #6# 8064711) #23#) %%tmp2409 %%tmp2410)) %%old-id2397 %%new-id2396)))))) (list '#structure(#4# #(#5# $import #6# 4394696) #23#) %%orig2274 %%import-only?2275 %%tmid2404)) (if %%exports?2271 (append %%new-id2396 %%other-id2405) #f))) %%tmp2402) (syntax-error %%tmp2401))) ($syntax-dispatch %%tmp2401 '(any any each-any)))) (list %%d2399 (%%gen-mid2253 %%mid2398) %%exports2400))))) %%tmp2389) ((lambda (%%tmp2413) (if (if %%tmp2413 (apply (lambda (%%mid2414) (identifier? %%mid2414)) %%tmp2413) #f) (apply (lambda (%%mid2415) (values %%mid2415 (list '#structure(#4# #(#5# $import #6# 2952910) (#7# #structure(#9# #(mid) #(#7#) #("i")) . #17#)) %%orig2274 %%import-only?2275 %%mid2415) (if %%exports?2271 (%%$module-exports2236 %%mid2415 %%r2249) #f))) %%tmp2413) ((lambda (%%tmp2416) (if (if %%tmp2416 (apply (lambda (%%mid2417) (identifier? %%mid2417)) %%tmp2416) #f) (apply (lambda (%%mid2418) (values %%mid2418 (list '#structure(#4# #(#5# $import #6# 2952915) (#7# #structure(#9# #(mid) #(#7#) #("i")) . #17#)) %%orig2274 %%import-only?2275 %%mid2418) (if %%exports?2271 (%%$module-exports2236 %%mid2418 %%r2249) #f))) %%tmp2416) ((lambda (%%_2419) (syntax-error %%m2270 "invalid module specifier")) %%tmp2276))) ($syntax-dispatch %%tmp2276 '(any))))) (list %%tmp2276)))) ($syntax-dispatch %%tmp2276 '(#(free-id #structure(#4# #(#5# alias #6# 1904319) #24=(#7# . #17#))) any . #(each (any any))))))) ($syntax-dispatch %%tmp2276 '(#(free-id #structure(#4# #(#5# rename #6# 1904304) #24#)) any . #(each (any any))))))) ($syntax-dispatch %%tmp2276 '(#(free-id #structure(#4# #(#5# drop-prefix #6# 1904289) #24#)) any any))))) ($syntax-dispatch %%tmp2276 '(#(free-id #structure(#4# #(#5# add-prefix #6# 1904274) #24#)) any any))))) ($syntax-dispatch %%tmp2276 '(#(free-id #structure(#4# #(#5# except #6# 1904265) #24#)) any . each-any))))) ($syntax-dispatch %%tmp2276 '(#(free-id #structure(#4# #(#5# only #6# 1904258) #24#)) any . each-any)))) %%m2270)) %%tmp2273) (syntax-error %%tmp2272))) ($syntax-dispatch %%tmp2272 '(any any)))) (list %%orig2247 %%import-only?2248)))) (%%modspec*2255 (lambda (%%m2420) (call-with-values (lambda () (%%modspec2254 %%m2420 #f)) (lambda (%%mid2421 %%d2422 %%exports2423) %%d2422))))) ((lambda (%%tmp2424) ((lambda (%%tmp2425) (if %%tmp2425 (apply (lambda (%%_2426 %%m2427) ((lambda (%%tmp2428) ((lambda (%%tmp2429) (if %%tmp2429 (apply (lambda (%%d2430) (cons '#structure(#4# #(#5# begin #6# 2297564) (#7# #structure(#9# #(d) #(#7#) #("i")) #structure(#9# #(_ m) #(#7# #7#) #("i" "i")) . #18#)) %%d2430)) %%tmp2429) (syntax-error %%tmp2428))) ($syntax-dispatch %%tmp2428 'each-any))) (map %%modspec*2255 %%m2427))) %%tmp2425) (syntax-error %%tmp2424))) ($syntax-dispatch %%tmp2424 '(any . each-any)))) %%orig2247)))))) (begin (%%put-cte-hook43 'import (lambda (%%orig2433) (%%$import-help2237 %%orig2433 #f))) (%%put-cte-hook43 'import-only (lambda (%%orig2434) (%%$import-help2237 %%orig2434 #t))))))) (set! make-expander (lambda (%%ctem2435 %%rtem2436) (lambda (%%x2437) ((lambda (%%env2438) (if (if (pair? %%x2437) (equal? (car %%x2437) %%noexpand35) #f) (cadr %%x2437) (%%chi-top*366 %%x2437 '() (%%env-wrap308 %%env2438) %%ctem2435 %%rtem2436 #f (%%env-top-ribcage306 %%env2438)))) (interaction-environment))))) (set! sc-expand (make-expander '(E) '(E))) (set! $make-environment (lambda (%%token2439 %%mutable?2440) ((lambda (%%top-ribcage2441) (%%make-env304 %%top-ribcage2441 (%%make-wrap231 (%%wrap-marks232 '((top))) (cons %%top-ribcage2441 (%%wrap-subst233 '((top))))))) (%%make-top-ribcage290 %%token2439 %%mutable?2440)))) (set! environment? (lambda (%%x2442) (%%env?305 %%x2442))) (set! interaction-environment ((lambda (%%e2443) (lambda () %%e2443)) ($make-environment '*top* #t))) (set! identifier? (lambda (%%x2444) (%%nonsymbol-id?221 %%x2444))) (set! datum->syntax (lambda (%%id2445 %%datum2446) (begin ((lambda (%%x2447) (if (not (%%nonsymbol-id?221 %%x2447)) (##raise-expression-parsing-exception 'invalid-argument (%%resolve-annotation179 %%x2447) (%%strip452 %%x2447 '(())) 'in 'datum->syntax) (void))) %%id2445) (%%make-syntax-object36 %%datum2446 (%%syntax-wrap39 %%id2445))))) (set! syntax->list (lambda (%%orig-ls2448) ((letrec ((%%f2449 (lambda (%%ls2450) ((lambda (%%tmp2451) ((lambda (%%tmp2452) (if %%tmp2452 (apply (lambda () '()) %%tmp2452) ((lambda (%%tmp2453) (if %%tmp2453 (apply (lambda (%%x2454 %%r2455) (cons %%x2454 (%%f2449 %%r2455))) %%tmp2453) ((lambda (%%_2456) (error "(in syntax->list) invalid argument" %%orig-ls2448)) %%tmp2451))) ($syntax-dispatch %%tmp2451 '(any . any))))) ($syntax-dispatch %%tmp2451 '()))) %%ls2450)))) %%f2449) %%orig-ls2448))) (set! syntax->vector (lambda (%%v2457) ((lambda (%%tmp2458) ((lambda (%%tmp2459) (if %%tmp2459 (apply (lambda (%%x2460) (list->vector (syntax->list %%x2460))) %%tmp2459) ((lambda (%%_2462) (error "(in syntax->vector) invalid argument" %%v2457)) %%tmp2458))) ($syntax-dispatch %%tmp2458 '#(vector each-any)))) %%v2457))) (set! syntax->datum (lambda (%%x2463) (%%strip452 %%x2463 '(())))) (set! generate-temporaries ((lambda (%%n2464) (lambda (%%ls2465) (begin ((lambda (%%x2466) (if (not (list? %%x2466)) (##raise-expression-parsing-exception 'invalid-argument (%%resolve-annotation179 %%x2466) (%%strip452 %%x2466 '(())) 'in 'generate-temporaries) (void))) %%ls2465) (map (lambda (%%x2467) (begin (set! %%n2464 (+ %%n2464 1)) (%%wrap362 (string->symbol (string-append "t" (number->string %%n2464))) '((tmp))))) %%ls2465)))) 0)) (set! free-identifier=? (lambda (%%x2468 %%y2469) (begin ((lambda (%%x2470) (if (not (%%nonsymbol-id?221 %%x2470)) (##raise-expression-parsing-exception 'invalid-argument (%%resolve-annotation179 %%x2470) (%%strip452 %%x2470 '(())) 'in 'free-identifier=?) (void))) %%x2468) ((lambda (%%x2471) (if (not (%%nonsymbol-id?221 %%x2471)) (##raise-expression-parsing-exception 'invalid-argument (%%resolve-annotation179 %%x2471) (%%strip452 %%x2471 '(())) 'in 'free-identifier=?) (void))) %%y2469) (%%free-id=?354 %%x2468 %%y2469)))) (set! bound-identifier=? (lambda (%%x2472 %%y2473) (begin ((lambda (%%x2474) (if (not (%%nonsymbol-id?221 %%x2474)) (##raise-expression-parsing-exception 'invalid-argument (%%resolve-annotation179 %%x2474) (%%strip452 %%x2474 '(())) 'in 'bound-identifier=?) (void))) %%x2472) ((lambda (%%x2475) (if (not (%%nonsymbol-id?221 %%x2475)) (##raise-expression-parsing-exception 'invalid-argument (%%resolve-annotation179 %%x2475) (%%strip452 %%x2475 '(())) 'in 'bound-identifier=?) (void))) %%y2473) (%%bound-id=?357 %%x2472 %%y2473)))) (set! literal-identifier=? (lambda (%%x2476 %%y2477) (begin ((lambda (%%x2478) (if (not (%%nonsymbol-id?221 %%x2478)) (##raise-expression-parsing-exception 'invalid-argument (%%resolve-annotation179 %%x2478) (%%strip452 %%x2478 '(())) 'in 'literal-identifier=?) (void))) %%x2476) ((lambda (%%x2479) (if (not (%%nonsymbol-id?221 %%x2479)) (##raise-expression-parsing-exception 'invalid-argument (%%resolve-annotation179 %%x2479) (%%strip452 %%x2479 '(())) 'in 'literal-identifier=?) (void))) %%y2477) (%%literal-id=?355 %%x2476 %%y2477)))) (set! syntax-error (lambda (%%object2481 . %%messages2480) (begin (for-each (lambda (%%x2482) ((lambda (%%x2483) (if (not (string? %%x2483)) (##raise-expression-parsing-exception 'invalid-argument (%%resolve-annotation179 %%x2483) (%%strip452 %%x2483 '(())) 'in 'syntax-error) (void))) %%x2482)) %%messages2480) ((lambda (%%messages2484 %%source2485) (apply ##raise-expression-parsing-exception (cons 'psyntax-error (cons %%source2485 (append %%messages2484 (list (list 'quote (%%strip452 %%object2481 '(()))))))))) (if (null? %%messages2480) '(invalid syntax) %%messages2480) (%%resolve-annotation179 %%object2481))))) ((lambda () (letrec ((%%match-each2486 (lambda (%%e2493 %%p2494 %%w2495) (if (annotation? %%e2493) (%%match-each2486 (annotation-expression %%e2493) %%p2494 %%w2495) (if (pair? %%e2493) ((lambda (%%first2496) (if %%first2496 ((lambda (%%rest2497) (if %%rest2497 (cons %%first2496 %%rest2497) #f)) (%%match-each2486 (cdr %%e2493) %%p2494 %%w2495)) #f)) (%%match2492 (car %%e2493) %%p2494 %%w2495 '())) (if (null? %%e2493) '() (if (%%syntax?37 %%e2493) (%%match-each2486 (%%syntax-expression38 %%e2493) %%p2494 (%%join-wraps341 %%w2495 (%%syntax-wrap39 %%e2493))) #f)))))) (%%match-each+2487 (lambda (%%e2498 %%x-pat2499 %%y-pat2500 %%z-pat2501 %%w2502 %%r2503) ((letrec ((%%f2504 (lambda (%%e2505 %%w2506) (if (pair? %%e2505) (call-with-values (lambda () (%%f2504 (cdr %%e2505) %%w2506)) (lambda (%%xr*2507 %%y-pat2508 %%r2509) (if %%r2509 (if (null? %%y-pat2508) ((lambda (%%xr2510) (if %%xr2510 (values (cons %%xr2510 %%xr*2507) %%y-pat2508 %%r2509) (values #f #f #f))) (%%match2492 (car %%e2505) %%x-pat2499 %%w2506 '())) (values '() (cdr %%y-pat2508) (%%match2492 (car %%e2505) (car %%y-pat2508) %%w2506 %%r2509))) (values #f #f #f)))) (if (annotation? %%e2505) (%%f2504 (annotation-expression %%e2505) %%w2506) (if (%%syntax?37 %%e2505) (%%f2504 (%%syntax-expression38 %%e2505) (%%join-wraps341 %%w2506 (%%syntax-wrap39 %%e2505))) (values '() %%y-pat2500 (%%match2492 %%e2505 %%z-pat2501 %%w2506 %%r2503)))))))) %%f2504) %%e2498 %%w2502))) (%%match-each-any2488 (lambda (%%e2511 %%w2512) (if (annotation? %%e2511) (%%match-each-any2488 (annotation-expression %%e2511) %%w2512) (if (pair? %%e2511) ((lambda (%%l2513) (if %%l2513 (cons (%%wrap362 (car %%e2511) %%w2512) %%l2513) #f)) (%%match-each-any2488 (cdr %%e2511) %%w2512)) (if (null? %%e2511) '() (if (%%syntax?37 %%e2511) (%%match-each-any2488 (%%syntax-expression38 %%e2511) (%%join-wraps341 %%w2512 (%%syntax-wrap39 %%e2511))) #f)))))) (%%match-empty2489 (lambda (%%p2514 %%r2515) (if (null? %%p2514) %%r2515 (if (eq? %%p2514 'any) (cons '() %%r2515) (if (pair? %%p2514) (%%match-empty2489 (car %%p2514) (%%match-empty2489 (cdr %%p2514) %%r2515)) (if (eq? %%p2514 'each-any) (cons '() %%r2515) ((lambda (%%t2516) (if (memv %%t2516 '(each)) (%%match-empty2489 (vector-ref %%p2514 1) %%r2515) (if (memv %%t2516 '(each+)) (%%match-empty2489 (vector-ref %%p2514 1) (%%match-empty2489 (reverse (vector-ref %%p2514 2)) (%%match-empty2489 (vector-ref %%p2514 3) %%r2515))) (if (memv %%t2516 '(free-id atom)) %%r2515 (if (memv %%t2516 '(vector)) (%%match-empty2489 (vector-ref %%p2514 1) %%r2515) (void)))))) (vector-ref %%p2514 0)))))))) (%%combine2490 (lambda (%%r*2517 %%r2518) (if (null? (car %%r*2517)) %%r2518 (cons (map car %%r*2517) (%%combine2490 (map cdr %%r*2517) %%r2518))))) (%%match*2491 (lambda (%%e2519 %%p2520 %%w2521 %%r2522) (if (null? %%p2520) (if (null? %%e2519) %%r2522 #f) (if (pair? %%p2520) (if (pair? %%e2519) (%%match2492 (car %%e2519) (car %%p2520) %%w2521 (%%match2492 (cdr %%e2519) (cdr %%p2520) %%w2521 %%r2522)) #f) (if (eq? %%p2520 'each-any) ((lambda (%%l2523) (if %%l2523 (cons %%l2523 %%r2522) #f)) (%%match-each-any2488 %%e2519 %%w2521)) ((lambda (%%t2524) (if (memv %%t2524 '(each)) (if (null? %%e2519) (%%match-empty2489 (vector-ref %%p2520 1) %%r2522) ((lambda (%%r*2525) (if %%r*2525 (%%combine2490 %%r*2525 %%r2522) #f)) (%%match-each2486 %%e2519 (vector-ref %%p2520 1) %%w2521))) (if (memv %%t2524 '(free-id)) (if (%%id?222 %%e2519) (if (%%literal-id=?355 (%%wrap362 %%e2519 %%w2521) (vector-ref %%p2520 1)) %%r2522 #f) #f) (if (memv %%t2524 '(each+)) (call-with-values (lambda () (%%match-each+2487 %%e2519 (vector-ref %%p2520 1) (vector-ref %%p2520 2) (vector-ref %%p2520 3) %%w2521 %%r2522)) (lambda (%%xr*2526 %%y-pat2527 %%r2528) (if %%r2528 (if (null? %%y-pat2527) (if (null? %%xr*2526) (%%match-empty2489 (vector-ref %%p2520 1) %%r2528) (%%combine2490 %%xr*2526 %%r2528)) #f) #f))) (if (memv %%t2524 '(atom)) (if (equal? (vector-ref %%p2520 1) (%%strip452 %%e2519 %%w2521)) %%r2522 #f) (if (memv %%t2524 '(vector)) (if (vector? %%e2519) (%%match2492 (vector->list %%e2519) (vector-ref %%p2520 1) %%w2521 %%r2522) #f) (void))))))) (vector-ref %%p2520 0))))))) (%%match2492 (lambda (%%e2529 %%p2530 %%w2531 %%r2532) (if (not %%r2532) #f (if (eq? %%p2530 'any) (cons (%%wrap362 %%e2529 %%w2531) %%r2532) (if (%%syntax?37 %%e2529) (%%match*2491 ((lambda (%%e2533) (if (annotation? %%e2533) (annotation-expression %%e2533) %%e2533)) (%%syntax-expression38 %%e2529)) %%p2530 (%%join-wraps341 %%w2531 (%%syntax-wrap39 %%e2529)) %%r2532) (%%match*2491 ((lambda (%%e2534) (if (annotation? %%e2534) (annotation-expression %%e2534) %%e2534)) %%e2529) %%p2530 %%w2531 %%r2532))))))) (set! $syntax-dispatch (lambda (%%e2535 %%p2536) (if (eq? %%p2536 'any) (list %%e2535) (if (%%syntax?37 %%e2535) (%%match*2491 ((lambda (%%e2537) (if (annotation? %%e2537) (annotation-expression %%e2537) %%e2537)) (%%syntax-expression38 %%e2535)) %%p2536 (%%syntax-wrap39 %%e2535) '()) (%%match*2491 ((lambda (%%e2538) (if (annotation? %%e2538) (annotation-expression %%e2538) %%e2538)) %%e2535) %%p2536 '(()) '())))))))) (%%global-extend220 'macro 'with-syntax (lambda (%%x2539) ((lambda (%%tmp2540) ((lambda (%%tmp2541) (if %%tmp2541 (apply (lambda (%%_2542 %%e12543 %%e22544) (cons '#structure(#4# #(#5# begin #6# 1118257) (#7# #structure(#9# #(_ e1 e2) #(#7# #7# #7#) #("i" "i" "i")) . #25=(#structure(#9# () () ()) #structure(#9# #(x) #(#7#) #("i")) #10# . #12#))) (cons %%e12543 %%e22544))) %%tmp2541) ((lambda (%%tmp2546) (if %%tmp2546 (apply (lambda (%%_2547 %%out2548 %%in2549 %%e12550 %%e22551) (list '#structure(#4# #(#5# syntax-case #6# 1118259) #26=(#7# #structure(#9# #(_ out in e1 e2) #(#7# #7# #7# #7# #7#) #("i" "i" "i" "i" "i")) . #25#)) %%in2549 '#structure(#4# #(#5# () #6# 2101299) #26#) (list %%out2548 (cons '#structure(#4# #(#5# begin #6# 2691123) #26#) (cons %%e12550 %%e22551))))) %%tmp2546) ((lambda (%%tmp2553) (if %%tmp2553 (apply (lambda (%%_2554 %%out2555 %%in2556 %%e12557 %%e22558) (list '#structure(#4# #(#5# syntax-case #6# 1118261) #27=(#7# #structure(#9# #(_ out in e1 e2) #(#7# #7# #7# #7# #7#) #("i" "i" "i" "i" "i")) . #25#)) (cons '#structure(#4# #(#5# list #6# 1970229) #27#) %%in2556) '#structure(#4# #(#5# () #6# 2822197) #27#) (list %%out2555 (cons '#structure(#4# #(#5# begin #6# 1970230) #27#) (cons %%e12557 %%e22558))))) %%tmp2553) (syntax-error %%tmp2540))) ($syntax-dispatch %%tmp2540 '(any #(each (any any)) any . each-any))))) ($syntax-dispatch %%tmp2540 '(any ((any any)) any . each-any))))) ($syntax-dispatch %%tmp2540 '(any () any . each-any)))) %%x2539))) (%%global-extend220 'macro 'with-implicit (lambda (%%x2562) ((lambda (%%tmp2563) ((lambda (%%tmp2564) (if (if %%tmp2564 (apply (lambda (%%dummy2565 %%tid2566 %%id2567 %%e12568 %%e22569) (andmap identifier? (cons %%tid2566 %%id2567))) %%tmp2564) #f) (apply (lambda (%%dummy2571 %%tid2572 %%id2573 %%e12574 %%e22575) (list '#structure(#4# #(#5# begin #6# 462909) #28=(#7# #structure(#9# #(dummy tid id e1 e2) #((#29="m" . #11#) #7# #7# #7# #7#) #("i" "i" "i" "i" "i")) #structure(#9# () () ()) #structure(#9# #(x) #((#29# . #11#)) #("i")) #10# . #12#)) (list '#structure(#4# #(#5# unless #6# 593982) #28#) (list '#structure(#4# #(#5# identifier? #6# 1118270) #28#) (list '#structure(#4# #(#5# syntax #6# 1970238) #28#) %%tid2572)) (cons '#structure(#4# #(#5# syntax-error #6# 1118271) #28#) (cons (list '#structure(#4# #(#5# syntax #6# 2035775) #28#) %%tid2572) '#structure(#4# (#(#5# "non-identifier with-implicit template" #6# 2822207)) #28#)))) (cons '#structure(#4# #(#5# with-syntax #6# 593984) #28#) (cons (map (lambda (%%tmp2576) (list %%tmp2576 (list '#structure(#4# #(#5# datum->syntax #6# 1773632) #28#) (list '#structure(#4# #(#5# syntax #6# 2756672) #28#) %%tid2572) (list '#structure(#4# #(#5# quote #6# 3543104) #28#) %%tmp2576)))) %%id2573) (cons %%e12574 %%e22575))))) %%tmp2564) (syntax-error %%tmp2563))) ($syntax-dispatch %%tmp2563 '(any (any . each-any) any . each-any)))) %%x2562))) (%%global-extend220 'macro 'datum (lambda (%%x2578) ((lambda (%%tmp2579) ((lambda (%%tmp2580) (if %%tmp2580 (apply (lambda (%%dummy2581 %%x2582) (list '#structure(#4# #(#5# syntax->datum #6# 856134) #30=(#7# #structure(#9# #(dummy x) #((#31="m" . #11#) #7#) #("i" "i")) #structure(#9# () () ()) #structure(#9# #(x) #((#31# . #11#)) #("i")) #10# . #12#)) (list '#structure(#4# #(#5# syntax #6# 1839174) #30#) %%x2582))) %%tmp2580) (syntax-error %%tmp2579))) ($syntax-dispatch %%tmp2579 '(any any)))) %%x2578))) (%%global-extend220 'macro 'syntax-rules (lambda (%%x2583) (letrec ((%%clause2584 (lambda (%%y2585) ((lambda (%%tmp2586) ((lambda (%%tmp2587) (if %%tmp2587 (apply (lambda (%%keyword2588 %%pattern2589 %%template2590) (list (cons '#structure(#4# #(#5# dummy #6# 1445967) #32=(#7# #structure(#9# #(keyword pattern template) #(#7# #7# #7#) #("i" "i" "i")) . #33=(#structure(#9# () () ()) #structure(#9# #(y) #(#7#) #("i")) . #34=(#structure(#9# (clause) (#7#) ("i")) #structure(#9# #(x) #(#7#) #("i")) #10# . #12#)))) %%pattern2589) (list '#structure(#4# #(#5# syntax #6# 2625615) #32#) %%template2590))) %%tmp2587) ((lambda (%%tmp2591) (if %%tmp2591 (apply (lambda (%%keyword2592 %%pattern2593 %%fender2594 %%template2595) (list (cons '#structure(#4# #(#5# dummy #6# 1445969) #35=(#7# #structure(#9# #(keyword pattern fender template) #(#7# #7# #7# #7#) #("i" "i" "i" "i")) . #33#)) %%pattern2593) %%fender2594 (list '#structure(#4# #(#5# syntax #6# 3084369) #35#) %%template2595))) %%tmp2591) ((lambda (%%_2596) (syntax-error %%x2583)) %%tmp2586))) ($syntax-dispatch %%tmp2586 '((any . any) any any))))) ($syntax-dispatch %%tmp2586 '((any . any) any)))) %%y2585)))) ((lambda (%%tmp2597) ((lambda (%%tmp2598) (if (if %%tmp2598 (apply (lambda (%%_2599 %%k2600 %%cl2601) (andmap identifier? %%k2600)) %%tmp2598) #f) (apply (lambda (%%_2603 %%k2604 %%cl2605) ((lambda (%%tmp2606) ((lambda (%%tmp2607) (if %%tmp2607 (apply (lambda (%%cl2608) (list '#structure(#4# #(#5# lambda #6# 1970263) #36=(#7# #structure(#9# #(cl) #(#7#) #("i")) #structure(#9# #(_ k cl) #(#7# #7# #7#) #("i" "i" "i")) . #34#)) '#structure(#4# #(#5# (#(#5# x #6# 2494551)) #6# 2429015) #36#) (cons '#structure(#4# #(#5# syntax-case #6# 2756695) #36#) (cons '#structure(#4# #(#5# x #6# 3543127) #36#) (cons %%k2604 %%cl2608))))) %%tmp2607) (syntax-error %%tmp2606))) ($syntax-dispatch %%tmp2606 'each-any))) (map %%clause2584 %%cl2605))) %%tmp2598) (syntax-error %%tmp2597))) ($syntax-dispatch %%tmp2597 '(any each-any . each-any)))) %%x2583)))) (%%global-extend220 'macro 'or (lambda (%%x2612) ((lambda (%%tmp2613) ((lambda (%%tmp2614) (if %%tmp2614 (apply (lambda (%%_2615) '#structure(#4# #(#5# #f #6# 1314909) (#7# #structure(#9# #(_) #(#7#) #("i")) . #37=(#structure(#9# () () ()) #structure(#9# #(x) #(#7#) #("i")) #10# . #12#)))) %%tmp2614) ((lambda (%%tmp2616) (if %%tmp2616 (apply (lambda (%%_2617 %%e2618) %%e2618) %%tmp2616) ((lambda (%%tmp2619) (if %%tmp2619 (apply (lambda (%%_2620 %%e12621 %%e22622 %%e32623) (list '#structure(#4# #(#5# let #6# 1118304) #38=(#7# #structure(#9# #(_ e1 e2 e3) #(#7# #7# #7# #7#) #("i" "i" "i" "i")) . #37#)) (list (list '#structure(#4# #(#5# t #6# 1511520) #38#) %%e12621)) (list '#structure(#4# #(#5# if #6# 2035808) #38#) '#structure(#4# #(#5# t #6# 2232416) #38#) '#structure(#4# #(#5# t #6# 2363488) #38#) (cons '#structure(#4# #(#5# or #6# 2560096) #38#) (cons %%e22622 %%e32623))))) %%tmp2619) (syntax-error %%tmp2613))) ($syntax-dispatch %%tmp2613 '(any any any . each-any))))) ($syntax-dispatch %%tmp2613 '(any any))))) ($syntax-dispatch %%tmp2613 '(any)))) %%x2612))) (%%global-extend220 'macro 'and (lambda (%%x2625) ((lambda (%%tmp2626) ((lambda (%%tmp2627) (if %%tmp2627 (apply (lambda (%%_2628 %%e12629 %%e22630 %%e32631) (cons '#structure(#4# #(#5# if #6# 2232422) #39=(#7# #structure(#9# #(_ e1 e2 e3) #(#7# #7# #7# #7#) #("i" "i" "i" "i")) . #40=(#structure(#9# () () ()) #structure(#9# #(x) #(#7#) #("i")) #10# . #12#))) (cons %%e12629 (cons (cons '#structure(#4# #(#5# and #6# 2691174) #39#) (cons %%e22630 %%e32631)) '#structure(#4# (#(#5# #f #6# 3674214)) #39#))))) %%tmp2627) ((lambda (%%tmp2633) (if %%tmp2633 (apply (lambda (%%_2634 %%e2635) %%e2635) %%tmp2633) ((lambda (%%tmp2636) (if %%tmp2636 (apply (lambda (%%_2637) '#structure(#4# #(#5# #t #6# 1314920) (#7# #structure(#9# #(_) #(#7#) #("i")) . #40#))) %%tmp2636) (syntax-error %%tmp2626))) ($syntax-dispatch %%tmp2626 '(any))))) ($syntax-dispatch %%tmp2626 '(any any))))) ($syntax-dispatch %%tmp2626 '(any any any . each-any)))) %%x2625))) (%%global-extend220 'macro 'let (lambda (%%x2638) ((lambda (%%tmp2639) ((lambda (%%tmp2640) (if (if %%tmp2640 (apply (lambda (%%_2641 %%x2642 %%v2643 %%e12644 %%e22645) (andmap identifier? %%x2642)) %%tmp2640) #f) (apply (lambda (%%_2647 %%x2648 %%v2649 %%e12650 %%e22651) (cons (cons '#structure(#4# #(#5# lambda #6# 1183856) (#7# #structure(#9# #(_ x v e1 e2) #(#7# #7# #7# #7# #7#) #("i" "i" "i" "i" "i")) . #41=(#structure(#9# () () ()) #structure(#9# #(x) #(#7#) #("i")) #10# . #12#))) (cons %%x2648 (cons %%e12650 %%e22651))) %%v2649)) %%tmp2640) ((lambda (%%tmp2655) (if (if %%tmp2655 (apply (lambda (%%_2656 %%f2657 %%x2658 %%v2659 %%e12660 %%e22661) (andmap identifier? (cons %%f2657 %%x2658))) %%tmp2655) #f) (apply (lambda (%%_2663 %%f2664 %%x2665 %%v2666 %%e12667 %%e22668) (cons (list '#structure(#4# #(#5# letrec #6# 1183859) #42=(#7# #structure(#9# #(_ f x v e1 e2) #(#7# #7# #7# #7# #7# #7#) #("i" "i" "i" "i" "i" "i")) . #41#)) (list (list %%f2664 (cons '#structure(#4# #(#5# lambda #6# 1970291) #42#) (cons %%x2665 (cons %%e12667 %%e22668))))) %%f2664) %%v2666)) %%tmp2655) (syntax-error %%tmp2639))) ($syntax-dispatch %%tmp2639 '(any any #(each (any any)) any . each-any))))) ($syntax-dispatch %%tmp2639 '(any #(each (any any)) any . each-any)))) %%x2638))) (%%global-extend220 'macro 'let* (lambda (%%x2672) ((lambda (%%tmp2673) ((lambda (%%tmp2674) (if (if %%tmp2674 (apply (lambda (%%let*2675 %%x2676 %%v2677 %%e12678 %%e22679) (andmap identifier? %%x2676)) %%tmp2674) #f) (apply (lambda (%%let*2681 %%x2682 %%v2683 %%e12684 %%e22685) ((letrec ((%%f2686 (lambda (%%bindings2687) (if (null? %%bindings2687) (cons '#structure(#4# #(#5# let #6# 1511550) #43=(#7# . #44=(#structure(#9# () () ()) #structure(#9# #(bindings) #(#7#) #("i")) #structure(#9# #(f) #(#7#) #("i")) #structure(#9# #(let* x v e1 e2) #(#7# #7# #7# #7# #7#) #("i" "i" "i" "i" "i")) #structure(#9# () () ()) #structure(#9# #(x) #(#7#) #("i")) #10# . #12#))) (cons '#structure(#4# #(#5# () #6# 1773694) #43#) (cons %%e12684 %%e22685))) ((lambda (%%tmp2689) ((lambda (%%tmp2690) (if %%tmp2690 (apply (lambda (%%body2691 %%binding2692) (list '#structure(#4# #(#5# let #6# 2363521) (#7# #structure(#9# #(body binding) #(#7# #7#) #("i" "i")) . #44#)) (list %%binding2692) %%body2691)) %%tmp2690) (syntax-error %%tmp2689))) ($syntax-dispatch %%tmp2689 '(any any)))) (list (%%f2686 (cdr %%bindings2687)) (car %%bindings2687))))))) %%f2686) (map list %%x2682 %%v2683))) %%tmp2674) (syntax-error %%tmp2673))) ($syntax-dispatch %%tmp2673 '(any #(each (any any)) any . each-any)))) %%x2672))) (%%global-extend220 'macro 'cond (lambda (%%x2695) ((lambda (%%tmp2696) ((lambda (%%tmp2697) (if %%tmp2697 (apply (lambda (%%_2698 %%m12699 %%m22700) ((letrec ((%%f2701 (lambda (%%clause2702 %%clauses2703) (if (null? %%clauses2703) ((lambda (%%tmp2704) ((lambda (%%tmp2705) (if %%tmp2705 (apply (lambda (%%e12706 %%e22707) (cons '#structure(#4# #(#5# begin #6# 2822283) (#7# #structure(#9# #(e1 e2) #(#7# #7#) #("i" "i")) . #45=(#structure(#9# () () ()) #structure(#9# #(clause clauses) #(#7# #7#) #("i" "i")) #structure(#9# #(f) #(#7#) #("i")) #structure(#9# #(_ m1 m2) #(#7# #7# #7#) #("i" "i" "i")) #structure(#9# () () ()) #structure(#9# #(x) #(#7#) #("i")) #10# . #12#))) (cons %%e12706 %%e22707))) %%tmp2705) ((lambda (%%tmp2709) (if %%tmp2709 (apply (lambda (%%e02710) (cons '#structure(#4# #(#5# let #6# 2035852) #46=(#7# #structure(#9# #(e0) #(#7#) #("i")) . #45#)) (cons (list (list '#structure(#4# #(#5# t #6# 2429068) #46#) %%e02710)) '#structure(#4# (#(#5# (#(#5# if #6# 2953356) #(#5# t #6# 3149964) #(#5# t #6# 3281036)) #6# 2887820)) #46#)))) %%tmp2709) ((lambda (%%tmp2711) (if %%tmp2711 (apply (lambda (%%e02712 %%e12713) (list '#structure(#4# #(#5# let #6# 2429069) #47=(#7# #structure(#9# #(e0 e1) #(#7# #7#) #("i" "i")) . #45#)) (list (list '#structure(#4# #(#5# t #6# 2822285) #47#) %%e02712)) (list '#structure(#4# #(#5# if #6# 3346573) #47#) '#structure(#4# #(#5# t #6# 3543181) #47#) (cons %%e12713 '#structure(#4# (#(#5# t #6# 3936397)) #47#))))) %%tmp2711) ((lambda (%%tmp2714) (if %%tmp2714 (apply (lambda (%%e02715 %%e12716 %%e22717) (list '#structure(#4# #(#5# if #6# 2691214) #48=(#7# #structure(#9# #(e0 e1 e2) #(#7# #7# #7#) #("i" "i" "i")) . #45#)) %%e02715 (cons '#structure(#4# #(#5# begin #6# 3149966) #48#) (cons %%e12716 %%e22717)))) %%tmp2714) ((lambda (%%_2719) (syntax-error %%x2695)) %%tmp2704))) ($syntax-dispatch %%tmp2704 '(any any . each-any))))) ($syntax-dispatch %%tmp2704 '(any #(free-id #structure(#4# #(#5# => #6# 1380493) #49=(#7# . #45#))) any))))) ($syntax-dispatch %%tmp2704 '(any))))) ($syntax-dispatch %%tmp2704 '(#(free-id #structure(#4# #(#5# else #6# 1183883) #49#)) any . each-any)))) %%clause2702) ((lambda (%%tmp2720) ((lambda (%%rest2721) ((lambda (%%tmp2722) ((lambda (%%tmp2723) (if %%tmp2723 (apply (lambda (%%e02724) (list '#structure(#4# #(#5# let #6# 2887826) #50=(#7# #structure(#9# #(e0) #(#7#) #("i")) . #51=(#structure(#9# #(rest) #(#7#) #("i")) . #45#))) (list (list '#structure(#4# #(#5# t #6# 3281042) #50#) %%e02724)) (list '#structure(#4# #(#5# if #6# 3805330) #50#) '#structure(#4# #(#5# t #6# 4001938) #50#) '#structure(#4# #(#5# t #6# 4133010) #50#) %%rest2721))) %%tmp2723) ((lambda (%%tmp2725) (if %%tmp2725 (apply (lambda (%%e02726 %%e12727) (list '#structure(#4# #(#5# let #6# 3281043) #52=(#7# #structure(#9# #(e0 e1) #(#7# #7#) #("i" "i")) . #51#)) (list (list '#structure(#4# #(#5# t #6# 3674259) #52#) %%e02726)) (list '#structure(#4# #(#5# if #6# 4198547) #52#) '#structure(#4# #(#5# t #6# 4395155) #52#) (cons %%e12727 '#structure(#4# (#(#5# t #6# 4788371)) #52#)) %%rest2721))) %%tmp2725) ((lambda (%%tmp2728) (if %%tmp2728 (apply (lambda (%%e02729 %%e12730 %%e22731) (list '#structure(#4# #(#5# if #6# 3543188) #53=(#7# #structure(#9# #(e0 e1 e2) #(#7# #7# #7#) #("i" "i" "i")) . #51#)) %%e02729 (cons '#structure(#4# #(#5# begin #6# 4001940) #53#) (cons %%e12730 %%e22731)) %%rest2721)) %%tmp2728) ((lambda (%%_2733) (syntax-error %%x2695)) %%tmp2722))) ($syntax-dispatch %%tmp2722 '(any any . each-any))))) ($syntax-dispatch %%tmp2722 '(any #(free-id #structure(#4# #(#5# => #6# 2232467) (#7# . #51#))) any))))) ($syntax-dispatch %%tmp2722 '(any)))) %%clause2702)) %%tmp2720)) (%%f2701 (car %%clauses2703) (cdr %%clauses2703))))))) %%f2701) %%m12699 %%m22700)) %%tmp2697) (syntax-error %%tmp2696))) ($syntax-dispatch %%tmp2696 '(any any . each-any)))) %%x2695))) (%%global-extend220 'macro 'do (lambda (%%orig-x2735) ((lambda (%%tmp2736) ((lambda (%%tmp2737) (if %%tmp2737 (apply (lambda (%%_2738 %%var2739 %%init2740 %%step2741 %%e02742 %%e12743 %%c2744) ((lambda (%%tmp2745) ((lambda (%%tmp2746) (if %%tmp2746 (apply (lambda (%%step2747) ((lambda (%%tmp2748) ((lambda (%%tmp2749) (if %%tmp2749 (apply (lambda () (list '#structure(#4# #(#5# let #6# 2363557) #54=(#7# . #55=(#structure(#9# #(step) #(#7#) #("i")) #structure(#9# #(_ var init step e0 e1 c) #(#7# #7# #7# #7# #7# #7# #7#) #("i" "i" "i" "i" "i" "i" "i")) #structure(#9# () () ()) #structure(#9# #(orig-x) #(#7#) #("i")) #10# . #12#))) '#structure(#4# #(#5# do #6# 2625701) #54#) (map list %%var2739 %%init2740) (list '#structure(#4# #(#5# if #6# 2494630) #54#) (list '#structure(#4# #(#5# not #6# 2756774) #54#) %%e02742) (cons '#structure(#4# #(#5# begin #6# 2756775) #54#) (append %%c2744 (list (cons '#structure(#4# #(#5# do #6# 3608743) #54#) %%step2747))))))) %%tmp2749) ((lambda (%%tmp2754) (if %%tmp2754 (apply (lambda (%%e12755 %%e22756) (list '#structure(#4# #(#5# let #6# 2166953) #56=(#7# #structure(#9# #(e1 e2) #(#7# #7#) #("i" "i")) . #55#)) '#structure(#4# #(#5# do #6# 2429097) #56#) (map list %%var2739 %%init2740) (list '#structure(#4# #(#5# if #6# 2298026) #56#) %%e02742 (cons '#structure(#4# #(#5# begin #6# 2560171) #56#) (cons %%e12755 %%e22756)) (cons '#structure(#4# #(#5# begin #6# 2560172) #56#) (append %%c2744 (list (cons '#structure(#4# #(#5# do #6# 3412140) #56#) %%step2747))))))) %%tmp2754) (syntax-error %%tmp2748))) ($syntax-dispatch %%tmp2748 '(any . each-any))))) ($syntax-dispatch %%tmp2748 '()))) %%e12743)) %%tmp2746) (syntax-error %%tmp2745))) ($syntax-dispatch %%tmp2745 'each-any))) (map (lambda (%%v2763 %%s2764) ((lambda (%%tmp2765) ((lambda (%%tmp2766) (if %%tmp2766 (apply (lambda () %%v2763) %%tmp2766) ((lambda (%%tmp2767) (if %%tmp2767 (apply (lambda (%%e2768) %%e2768) %%tmp2767) ((lambda (%%_2769) (syntax-error %%orig-x2735)) %%tmp2765))) ($syntax-dispatch %%tmp2765 '(any))))) ($syntax-dispatch %%tmp2765 '()))) %%s2764)) %%var2739 %%step2741))) %%tmp2737) (syntax-error %%tmp2736))) ($syntax-dispatch %%tmp2736 '(any #(each (any any . any)) (any . each-any) . each-any)))) %%orig-x2735))) (%%global-extend220 'macro 'quasiquote ((lambda () (letrec ((%%quasi2772 (lambda (%%p2779 %%lev2780) ((lambda (%%tmp2781) ((lambda (%%tmp2782) (if %%tmp2782 (apply (lambda (%%p2783) (if (= %%lev2780 0) (list '#structure(#4# #(#5# "value" #6# 1118389) #57=(#7# #structure(#9# #(p) #(#7#) #("i")) . #58=(#structure(#9# () () ()) #structure(#9# #(p lev) #(#7# #7#) #("i" "i")) #59=#structure(#9# (emit quasivector quasilist* quasiappend quasicons vquasi quasi) (#7# #7# #7# #7# #7# #7# #7#) ("i" "i" "i" "i" "i" "i" "i")) . #60=(#10# . #12#)))) %%p2783) (%%quasicons2774 '#structure(#4# #(#5# (#(#5# "quote" #6# 1839286) #(#5# unquote #6# 2363574)) #6# 1773750) #57#) (%%quasi2772 (list %%p2783) (- %%lev2780 1))))) %%tmp2782) ((lambda (%%tmp2784) (if %%tmp2784 (apply (lambda (%%p2785) (%%quasicons2774 '#structure(#4# #(#5# (#(#5# "quote" #6# 2560183) #(#5# quasiquote #6# 3084471)) #6# 2494647) (#7# #structure(#9# #(p) #(#7#) #("i")) . #58#)) (%%quasi2772 (list %%p2785) (+ %%lev2780 1)))) %%tmp2784) ((lambda (%%tmp2786) (if %%tmp2786 (apply (lambda (%%p2787 %%q2788) ((lambda (%%tmp2789) ((lambda (%%tmp2790) (if %%tmp2790 (apply (lambda (%%p2791) (if (= %%lev2780 0) (%%quasilist*2776 (map (lambda (%%tmp2792) (list '#structure(#4# #(#5# "value" #6# 2166972) #61=(#7# #structure(#9# #(p) #(#7#) #("i")) . #62=(#structure(#9# #(p q) #(#7# #7#) #("i" "i")) . #58#))) %%tmp2792)) %%p2791) (%%quasi2772 %%q2788 %%lev2780)) (%%quasicons2774 (%%quasicons2774 '#structure(#4# #(#5# (#(#5# "quote" #6# 2101438) #(#5# unquote #6# 2625726)) #6# 2035902) #61#) (%%quasi2772 %%p2791 (- %%lev2780 1))) (%%quasi2772 %%q2788 %%lev2780)))) %%tmp2790) ((lambda (%%tmp2794) (if %%tmp2794 (apply (lambda (%%p2795) (if (= %%lev2780 0) (%%quasiappend2775 (map (lambda (%%tmp2796) (list '#structure(#4# #(#5# "value" #6# 2232514) #63=(#7# #structure(#9# #(p) #(#7#) #("i")) . #62#)) %%tmp2796)) %%p2795) (%%quasi2772 %%q2788 %%lev2780)) (%%quasicons2774 (%%quasicons2774 '#structure(#4# #(#5# (#(#5# "quote" #6# 2101444) #(#5# unquote-splicing #6# 2625732)) #6# 2035908) #63#) (%%quasi2772 %%p2795 (- %%lev2780 1))) (%%quasi2772 %%q2788 %%lev2780)))) %%tmp2794) ((lambda (%%_2798) (%%quasicons2774 (%%quasi2772 %%p2787 %%lev2780) (%%quasi2772 %%q2788 %%lev2780))) %%tmp2789))) ($syntax-dispatch %%tmp2789 '(#(free-id #structure(#4# #(#5# unquote-splicing #6# 921792) #64=(#7# . #62#))) . each-any))))) ($syntax-dispatch %%tmp2789 '(#(free-id #structure(#4# #(#5# unquote #6# 921786) #64#)) . each-any)))) %%p2787)) %%tmp2786) ((lambda (%%tmp2799) (if %%tmp2799 (apply (lambda (%%x2800) (%%quasivector2777 (%%vquasi2773 %%x2800 %%lev2780))) %%tmp2799) ((lambda (%%p2802) (list '#structure(#4# #(#5# "quote" #6# 987336) (#7# #structure(#9# #(p) #(#7#) #("i")) . #58#)) %%p2802)) %%tmp2781))) ($syntax-dispatch %%tmp2781 '#(vector each-any))))) ($syntax-dispatch %%tmp2781 '(any . any))))) ($syntax-dispatch %%tmp2781 '(#(free-id #structure(#4# #(#5# quasiquote #6# 725175) #65=(#7# . #58#))) any))))) ($syntax-dispatch %%tmp2781 '(#(free-id #structure(#4# #(#5# unquote #6# 725171) #65#)) any)))) %%p2779))) (%%vquasi2773 (lambda (%%p2803 %%lev2804) ((lambda (%%tmp2805) ((lambda (%%tmp2806) (if %%tmp2806 (apply (lambda (%%p2807 %%q2808) ((lambda (%%tmp2809) ((lambda (%%tmp2810) (if %%tmp2810 (apply (lambda (%%p2811) (if (= %%lev2804 0) (%%quasilist*2776 (map (lambda (%%tmp2812) (list '#structure(#4# #(#5# "value" #6# 2166991) #66=(#7# #structure(#9# #(p) #(#7#) #("i")) . #67=(#structure(#9# #(p q) #(#7# #7#) #("i" "i")) . #68=(#structure(#9# () () ()) #structure(#9# #(p lev) #(#7# #7#) #("i" "i")) #59# . #60#)))) %%tmp2812)) %%p2811) (%%vquasi2773 %%q2808 %%lev2804)) (%%quasicons2774 (%%quasicons2774 '#structure(#4# #(#5# (#(#5# "quote" #6# 2101457) #(#5# unquote #6# 2625745)) #6# 2035921) #66#) (%%quasi2772 %%p2811 (- %%lev2804 1))) (%%vquasi2773 %%q2808 %%lev2804)))) %%tmp2810) ((lambda (%%tmp2814) (if %%tmp2814 (apply (lambda (%%p2815) (if (= %%lev2804 0) (%%quasiappend2775 (map (lambda (%%tmp2816) (list '#structure(#4# #(#5# "value" #6# 2232533) #69=(#7# #structure(#9# #(p) #(#7#) #("i")) . #67#)) %%tmp2816)) %%p2815) (%%vquasi2773 %%q2808 %%lev2804)) (%%quasicons2774 (%%quasicons2774 '#structure(#4# #(#5# (#(#5# "quote" #6# 1446104) #(#5# unquote-splicing #6# 1970392)) #6# 1380568) #69#) (%%quasi2772 %%p2815 (- %%lev2804 1))) (%%vquasi2773 %%q2808 %%lev2804)))) %%tmp2814) ((lambda (%%_2818) (%%quasicons2774 (%%quasi2772 %%p2807 %%lev2804) (%%vquasi2773 %%q2808 %%lev2804))) %%tmp2809))) ($syntax-dispatch %%tmp2809 '(#(free-id #structure(#4# #(#5# unquote-splicing #6# 921811) #70=(#7# . #67#))) . each-any))))) ($syntax-dispatch %%tmp2809 '(#(free-id #structure(#4# #(#5# unquote #6# 921805) #70#)) . each-any)))) %%p2807)) %%tmp2806) ((lambda (%%tmp2819) (if %%tmp2819 (apply (lambda () '#structure(#4# #(#5# (#(#5# "quote" #6# 1052892) #(#5# () #6# 1577180)) #6# 987356) (#7# . #68#))) %%tmp2819) (syntax-error %%tmp2805))) ($syntax-dispatch %%tmp2805 '())))) ($syntax-dispatch %%tmp2805 '(any . any)))) %%p2803))) (%%quasicons2774 (lambda (%%x2820 %%y2821) ((lambda (%%tmp2822) ((lambda (%%tmp2823) (if %%tmp2823 (apply (lambda (%%x2824 %%y2825) ((lambda (%%tmp2826) ((lambda (%%tmp2827) (if %%tmp2827 (apply (lambda (%%dy2828) ((lambda (%%tmp2829) ((lambda (%%tmp2830) (if %%tmp2830 (apply (lambda (%%dx2831) (list '#structure(#4# #(#5# "quote" #6# 2756834) (#7# #structure(#9# #(dx) #(#7#) #("i")) . #71=(#structure(#9# #(dy) #(#7#) #("i")) . #72=(#structure(#9# #(x y) #(#7# #7#) #("i" "i")) #structure(#9# () () ()) #structure(#9# #(x y) #(#7# #7#) #("i" "i")) #59# . #60#)))) (cons %%dx2831 %%dy2828))) %%tmp2830) ((lambda (%%_2832) (if (null? %%dy2828) (list '#structure(#4# #(#5# "list" #6# 3150051) #73=(#7# #structure(#9# #(_) #(#7#) #("i")) . #71#)) %%x2824) (list '#structure(#4# #(#5# "list*" #6# 4002019) #73#) %%x2824 %%y2825))) %%tmp2829))) ($syntax-dispatch %%tmp2829 '(#(atom "quote") any)))) %%x2824)) %%tmp2827) ((lambda (%%tmp2833) (if %%tmp2833 (apply (lambda (%%stuff2834) (cons '#structure(#4# #(#5# "list" #6# 2822372) (#7# #structure(#9# #(stuff) #(#7#) #("i")) . #72#)) (cons %%x2824 %%stuff2834))) %%tmp2833) ((lambda (%%tmp2835) (if %%tmp2835 (apply (lambda (%%stuff2836) (cons '#structure(#4# #(#5# "list*" #6# 2887909) (#7# #structure(#9# #(stuff) #(#7#) #("i")) . #72#)) (cons %%x2824 %%stuff2836))) %%tmp2835) ((lambda (%%_2837) (list '#structure(#4# #(#5# "list*" #6# 1839334) (#7# #structure(#9# #(_) #(#7#) #("i")) . #72#)) %%x2824 %%y2825)) %%tmp2826))) ($syntax-dispatch %%tmp2826 '(#(atom "list*") . any))))) ($syntax-dispatch %%tmp2826 '(#(atom "list") . any))))) ($syntax-dispatch %%tmp2826 '(#(atom "quote") any)))) %%y2825)) %%tmp2823) (syntax-error %%tmp2822))) ($syntax-dispatch %%tmp2822 '(any any)))) (list %%x2820 %%y2821)))) (%%quasiappend2775 (lambda (%%x2838 %%y2839) ((lambda (%%tmp2840) ((lambda (%%tmp2841) (if %%tmp2841 (apply (lambda () (if (null? %%x2838) '#structure(#4# #(#5# (#(#5# "quote" #6# 1642731) #(#5# () #6# 2167019)) #6# 1577195) (#7# . #74=(#structure(#9# () () ()) #structure(#9# #(x y) #(#7# #7#) #("i" "i")) #59# . #60#))) (if (null? (cdr %%x2838)) (car %%x2838) ((lambda (%%tmp2842) ((lambda (%%tmp2843) (if %%tmp2843 (apply (lambda (%%p2844) (cons '#structure(#4# #(#5# "append" #6# 3084525) (#7# #structure(#9# #(p) #(#7#) #("i")) . #74#)) %%p2844)) %%tmp2843) (syntax-error %%tmp2842))) ($syntax-dispatch %%tmp2842 'each-any))) %%x2838)))) %%tmp2841) ((lambda (%%_2846) (if (null? %%x2838) %%y2839 ((lambda (%%tmp2847) ((lambda (%%tmp2848) (if %%tmp2848 (apply (lambda (%%p2849 %%y2850) (cons '#structure(#4# #(#5# "append" #6# 3477745) (#7# #structure(#9# #(p y) #(#7# #7#) #("i" "i")) #structure(#9# #(_) #(#7#) #("i")) . #74#)) (append %%p2849 (list %%y2850)))) %%tmp2848) (syntax-error %%tmp2847))) ($syntax-dispatch %%tmp2847 '(each-any any)))) (list %%x2838 %%y2839)))) %%tmp2840))) ($syntax-dispatch %%tmp2840 '(#(atom "quote") ())))) %%y2839))) (%%quasilist*2776 (lambda (%%x2852 %%y2853) ((letrec ((%%f2854 (lambda (%%x2855) (if (null? %%x2855) %%y2853 (%%quasicons2774 (car %%x2855) (%%f2854 (cdr %%x2855))))))) %%f2854) %%x2852))) (%%quasivector2777 (lambda (%%x2856) ((lambda (%%tmp2857) ((lambda (%%tmp2858) (if %%tmp2858 (apply (lambda (%%x2859) (list '#structure(#4# #(#5# "quote" #6# 2035961) (#7# #structure(#9# #(x) #(#7#) #("i")) . #75=(#structure(#9# () () ()) #structure(#9# #(x) #(#7#) #("i")) #59# . #60#))) (list->vector %%x2859))) %%tmp2858) ((lambda (%%_2861) ((letrec ((%%f2862 (lambda (%%y2863 %%k2864) ((lambda (%%tmp2865) ((lambda (%%tmp2866) (if %%tmp2866 (apply (lambda (%%y2867) (%%k2864 (map (lambda (%%tmp2868) (list '#structure(#4# #(#5# "quote" #6# 2625789) (#7# #structure(#9# #(y) #(#7#) #("i")) . #76=(#structure(#9# () () ()) #structure(#9# #(y k) #(#7# #7#) #("i" "i")) #structure(#9# #(f) #(#7#) #("i")) . #77=(#structure(#9# #(_) #(#7#) #("i")) . #75#)))) %%tmp2868)) %%y2867))) %%tmp2866) ((lambda (%%tmp2869) (if %%tmp2869 (apply (lambda (%%y2870) (%%k2864 %%y2870)) %%tmp2869) ((lambda (%%tmp2872) (if %%tmp2872 (apply (lambda (%%y2873 %%z2874) (%%f2862 %%z2874 (lambda (%%ls2875) (%%k2864 (append %%y2873 %%ls2875))))) %%tmp2872) ((lambda (%%else2877) ((lambda (%%tmp2878) ((lambda (%%t12879) (list '#structure(#4# #(#5# "list->vector" #6# 1511680) (#7# #structure(#9# #(t1) #(("m" . #78=(tmp))) #("i")) #structure(#9# #(else) #(#7#) #("i")) . #76#)) %%t12879)) %%tmp2878)) %%x2856)) %%tmp2865))) ($syntax-dispatch %%tmp2865 '(#(atom "list*") . #(each+ any (any) ())))))) ($syntax-dispatch %%tmp2865 '(#(atom "list") . each-any))))) ($syntax-dispatch %%tmp2865 '(#(atom "quote") each-any)))) %%y2863)))) %%f2862) %%x2856 (lambda (%%ls2880) ((lambda (%%tmp2881) ((lambda (%%tmp2882) (if %%tmp2882 (apply (lambda (%%t22883) (cons '#structure(#4# #(#5# "vector" #6# 2822395) (#7# #structure(#9# #(t2) #(("m" . #78#)) #("i")) #structure(#9# () () ()) #structure(#9# #(ls) #(#7#) #("i")) . #77#)) %%t22883)) %%tmp2882) (syntax-error %%tmp2881))) ($syntax-dispatch %%tmp2881 'each-any))) %%ls2880)))) %%tmp2857))) ($syntax-dispatch %%tmp2857 '(#(atom "quote") each-any)))) %%x2856))) (%%emit2778 (lambda (%%x2885) ((lambda (%%tmp2886) ((lambda (%%tmp2887) (if %%tmp2887 (apply (lambda (%%x2888) (list '#structure(#4# #(#5# quote #6# 1577219) (#7# #structure(#9# #(x) #(#7#) #("i")) . #79=(#structure(#9# () () ()) #structure(#9# #(x) #(#7#) #("i")) #59# . #60#))) %%x2888)) %%tmp2887) ((lambda (%%tmp2889) (if %%tmp2889 (apply (lambda (%%x2890) ((lambda (%%tmp2891) ((lambda (%%tmp2892) (if %%tmp2892 (apply (lambda (%%t32893) (cons '#structure(#4# #(#5# list #6# 1839364) (#7# #structure(#9# #(t3) #(("m" . #78#)) #("i")) #structure(#9# #(x) #(#7#) #("i")) . #79#)) %%t32893)) %%tmp2892) (syntax-error %%tmp2891))) ($syntax-dispatch %%tmp2891 'each-any))) (map %%emit2778 %%x2890))) %%tmp2889) ((lambda (%%tmp2896) (if %%tmp2896 (apply (lambda (%%x2897 %%y2898) ((letrec ((%%f2899 (lambda (%%x*2900) (if (null? %%x*2900) (%%emit2778 %%y2898) ((lambda (%%tmp2901) ((lambda (%%tmp2902) (if %%tmp2902 (apply (lambda (%%t52903 %%t42904) (list '#structure(#4# #(#5# cons #6# 1249546) (#7# #structure(#9# #(t5 t4) #((#80="m" . #78#) (#80# . #78#)) #("i" "i")) #structure(#9# () () ()) #structure(#9# #(x*) #(#7#) #("i")) #structure(#9# #(f) #(#7#) #("i")) #structure(#9# #(x y) #(#7# #7#) #("i" "i")) . #79#)) %%t52903 %%t42904)) %%tmp2902) (syntax-error %%tmp2901))) ($syntax-dispatch %%tmp2901 '(any any)))) (list (%%emit2778 (car %%x*2900)) (%%f2899 (cdr %%x*2900)))))))) %%f2899) %%x2897)) %%tmp2896) ((lambda (%%tmp2906) (if %%tmp2906 (apply (lambda (%%x2907) ((lambda (%%tmp2908) ((lambda (%%tmp2909) (if %%tmp2909 (apply (lambda (%%t62910) (cons '#structure(#4# #(#5# append #6# 1970443) (#7# #structure(#9# #(t6) #(("m" . #78#)) #("i")) #structure(#9# #(x) #(#7#) #("i")) . #79#)) %%t62910)) %%tmp2909) (syntax-error %%tmp2908))) ($syntax-dispatch %%tmp2908 'each-any))) (map %%emit2778 %%x2907))) %%tmp2906) ((lambda (%%tmp2913) (if %%tmp2913 (apply (lambda (%%x2914) ((lambda (%%tmp2915) ((lambda (%%tmp2916) (if %%tmp2916 (apply (lambda (%%t72917) (cons '#structure(#4# #(#5# vector #6# 1970444) (#7# #structure(#9# #(t7) #(("m" . #78#)) #("i")) #structure(#9# #(x) #(#7#) #("i")) . #79#)) %%t72917)) %%tmp2916) (syntax-error %%tmp2915))) ($syntax-dispatch %%tmp2915 'each-any))) (map %%emit2778 %%x2914))) %%tmp2913) ((lambda (%%tmp2920) (if %%tmp2920 (apply (lambda (%%x2921) ((lambda (%%tmp2922) ((lambda (%%t82923) (list '#structure(#4# #(#5# list->vector #6# 2101517) (#7# #structure(#9# #(t8) #(("m" . #78#)) #("i")) #structure(#9# #(x) #(#7#) #("i")) . #79#)) %%t82923)) %%tmp2922)) (%%emit2778 %%x2921))) %%tmp2920) ((lambda (%%tmp2924) (if %%tmp2924 (apply (lambda (%%x2925) %%x2925) %%tmp2924) (syntax-error %%tmp2886))) ($syntax-dispatch %%tmp2886 '(#(atom "value") any))))) ($syntax-dispatch %%tmp2886 '(#(atom "list->vector") any))))) ($syntax-dispatch %%tmp2886 '(#(atom "vector") . each-any))))) ($syntax-dispatch %%tmp2886 '(#(atom "append") . each-any))))) ($syntax-dispatch %%tmp2886 '(#(atom "list*") . #(each+ any (any) ())))))) ($syntax-dispatch %%tmp2886 '(#(atom "list") . each-any))))) ($syntax-dispatch %%tmp2886 '(#(atom "quote") any)))) %%x2885)))) (lambda (%%x2926) ((lambda (%%tmp2927) ((lambda (%%tmp2928) (if %%tmp2928 (apply (lambda (%%_2929 %%e2930) (%%emit2778 (%%quasi2772 %%e2930 0))) %%tmp2928) (syntax-error %%tmp2927))) ($syntax-dispatch %%tmp2927 '(any any)))) %%x2926)))))) (%%global-extend220 'macro 'quasisyntax (lambda (%%x2931) (letrec ((%%qs2932 (lambda (%%q2934 %%n2935 %%b*2936 %%k2937) ((lambda (%%tmp2938) ((lambda (%%tmp2939) (if %%tmp2939 (apply (lambda (%%d2940) (%%qs2932 %%d2940 (+ %%n2935 1) %%b*2936 (lambda (%%b*2941 %%dnew2942) (%%k2937 %%b*2941 (if (eq? %%dnew2942 %%d2940) %%q2934 ((lambda (%%tmp2943) ((lambda (%%d2944) (cons '#structure(#4# #(#5# quasisyntax #6# 3281198) (#7# #structure(#9# #(d) #(#7#) #("i")) #structure(#9# () () ()) #structure(#9# #(b* dnew) #(#7# #7#) #("i" "i")) #structure(#9# #(d) #(#7#) #("i")) . #81=(#structure(#9# () () ()) #structure(#9# #(q n b* k) #(#7# #7# #7# #7#) #("i" "i" "i" "i")) . #82=(#structure(#9# (vqs qs) (#7# #7#) ("i" "i")) #structure(#9# #(x) #(#7#) #("i")) #10# . #12#)))) %%d2944)) %%tmp2943)) %%dnew2942)))))) %%tmp2939) ((lambda (%%tmp2945) (if (if %%tmp2945 (apply (lambda (%%d2946) (not (= %%n2935 0))) %%tmp2945) #f) (apply (lambda (%%d2947) (%%qs2932 %%d2947 (- %%n2935 1) %%b*2936 (lambda (%%b*2948 %%dnew2949) (%%k2937 %%b*2948 (if (eq? %%dnew2949 %%d2947) %%q2934 ((lambda (%%tmp2950) ((lambda (%%d2951) (cons '#structure(#4# #(#5# unsyntax #6# 3281206) (#7# #structure(#9# #(d) #(#7#) #("i")) #structure(#9# () () ()) #structure(#9# #(b* dnew) #(#7# #7#) #("i" "i")) #structure(#9# #(d) #(#7#) #("i")) . #81#)) %%d2951)) %%tmp2950)) %%dnew2949)))))) %%tmp2945) ((lambda (%%tmp2952) (if (if %%tmp2952 (apply (lambda (%%d2953) (not (= %%n2935 0))) %%tmp2952) #f) (apply (lambda (%%d2954) (%%qs2932 %%d2954 (- %%n2935 1) %%b*2936 (lambda (%%b*2955 %%dnew2956) (%%k2937 %%b*2955 (if (eq? %%dnew2956 %%d2954) %%q2934 ((lambda (%%tmp2957) ((lambda (%%d2958) (cons '#structure(#4# #(#5# unsyntax-splicing #6# 3281214) (#7# #structure(#9# #(d) #(#7#) #("i")) #structure(#9# () () ()) #structure(#9# #(b* dnew) #(#7# #7#) #("i" "i")) #structure(#9# #(d) #(#7#) #("i")) . #81#)) %%d2958)) %%tmp2957)) %%dnew2956)))))) %%tmp2952) ((lambda (%%tmp2959) (if (if %%tmp2959 (apply (lambda (%%q2960) (= %%n2935 0)) %%tmp2959) #f) (apply (lambda (%%q2961) ((lambda (%%tmp2962) ((lambda (%%tmp2963) (if %%tmp2963 (apply (lambda (%%t2964) (%%k2937 (cons (list %%t2964 %%q2961) %%b*2936) %%t2964)) %%tmp2963) (syntax-error %%tmp2962))) ($syntax-dispatch %%tmp2962 '(any)))) (generate-temporaries (list %%q2961)))) %%tmp2959) ((lambda (%%tmp2965) (if (if %%tmp2965 (apply (lambda (%%q2966 %%d2967) (= %%n2935 0)) %%tmp2965) #f) (apply (lambda (%%q2968 %%d2969) (%%qs2932 %%d2969 %%n2935 %%b*2936 (lambda (%%b*2970 %%dnew2971) ((lambda (%%tmp2972) ((lambda (%%tmp2973) (if %%tmp2973 (apply (lambda (%%t2974) (%%k2937 (append (map list %%t2974 %%q2968) %%b*2970) ((lambda (%%tmp2977) ((lambda (%%d2978) (append %%t2974 %%d2978)) %%tmp2977)) %%dnew2971))) %%tmp2973) (syntax-error %%tmp2972))) ($syntax-dispatch %%tmp2972 'each-any))) (generate-temporaries %%q2968))))) %%tmp2965) ((lambda (%%tmp2981) (if (if %%tmp2981 (apply (lambda (%%q2982 %%d2983) (= %%n2935 0)) %%tmp2981) #f) (apply (lambda (%%q2984 %%d2985) (%%qs2932 %%d2985 %%n2935 %%b*2936 (lambda (%%b*2986 %%dnew2987) ((lambda (%%tmp2988) ((lambda (%%tmp2989) (if %%tmp2989 (apply (lambda (%%t2990) (%%k2937 (append (map (lambda (%%tmp2992 %%tmp2991) (list (cons %%tmp2991 '(#structure(#4# #(#5# ... #6# 3412303) (#7# . #83=(#structure(#9# #(t) #(#7#) #("i")) #structure(#9# () () ()) #structure(#9# #(b* dnew) #(#7# #7#) #("i" "i")) #structure(#9# #(q d) #(#7# #7#) #("i" "i")) . #81#))))) %%tmp2992)) %%q2984 %%t2990) %%b*2986) ((lambda (%%tmp2993) ((lambda (%%tmp2994) (if %%tmp2994 (apply (lambda (%%m2995) ((lambda (%%tmp2996) ((lambda (%%d2997) (append (apply append %%m2995) %%d2997)) %%tmp2996)) %%dnew2987)) %%tmp2994) (syntax-error %%tmp2993))) ($syntax-dispatch %%tmp2993 '#(each each-any)))) (map (lambda (%%tmp3000) (cons %%tmp3000 '(#structure(#4# #(#5# ... #6# 4723024) (#7# . #83#))))) %%t2990)))) %%tmp2989) (syntax-error %%tmp2988))) ($syntax-dispatch %%tmp2988 'each-any))) (generate-temporaries %%q2984))))) %%tmp2981) ((lambda (%%tmp3002) (if %%tmp3002 (apply (lambda (%%a3003 %%d3004) (%%qs2932 %%a3003 %%n2935 %%b*2936 (lambda (%%b*3005 %%anew3006) (%%qs2932 %%d3004 %%n2935 %%b*3005 (lambda (%%b*3007 %%dnew3008) (%%k2937 %%b*3007 (if (if (eq? %%anew3006 %%a3003) (eq? %%dnew3008 %%d3004) #f) %%q2934 ((lambda (%%tmp3009) ((lambda (%%tmp3010) (if %%tmp3010 (apply (lambda (%%a3011 %%d3012) (cons %%a3011 %%d3012)) %%tmp3010) (syntax-error %%tmp3009))) ($syntax-dispatch %%tmp3009 '(any any)))) (list %%anew3006 %%dnew3008))))))))) %%tmp3002) ((lambda (%%tmp3013) (if %%tmp3013 (apply (lambda (%%x3014) (%%vqs2933 %%x3014 %%n2935 %%b*2936 (lambda (%%b*3016 %%xnew*3017) (%%k2937 %%b*3016 (if ((letrec ((%%same?3018 (lambda (%%x*3019 %%xnew*3020) (if (null? %%x*3019) (null? %%xnew*3020) (if (not (null? %%xnew*3020)) (if (eq? (car %%x*3019) (car %%xnew*3020)) (%%same?3018 (cdr %%x*3019) (cdr %%xnew*3020)) #f) #f))))) %%same?3018) %%x3014 %%xnew*3017) %%q2934 ((lambda (%%tmp3022) ((lambda (%%tmp3023) (if %%tmp3023 (apply (lambda (%%x3024) (list->vector %%x3024)) %%tmp3023) (syntax-error %%tmp3022))) ($syntax-dispatch %%tmp3022 'each-any))) %%xnew*3017)))))) %%tmp3013) ((lambda (%%_3026) (%%k2937 %%b*2936 %%q2934)) %%tmp2938))) ($syntax-dispatch %%tmp2938 '#(vector each-any))))) ($syntax-dispatch %%tmp2938 '(any . any))))) ($syntax-dispatch %%tmp2938 '((#(free-id #structure(#4# #(#5# unsyntax-splicing #6# 790858) #84=(#7# . #81#))) . each-any) . any))))) ($syntax-dispatch %%tmp2938 '((#(free-id #structure(#4# #(#5# unsyntax #6# 790851) #84#)) . each-any) . any))))) ($syntax-dispatch %%tmp2938 '(#(free-id #structure(#4# #(#5# unsyntax #6# 725311) #84#)) any))))) ($syntax-dispatch %%tmp2938 '(#(free-id #structure(#4# #(#5# unsyntax-splicing #6# 725303) #84#)) . any))))) ($syntax-dispatch %%tmp2938 '(#(free-id #structure(#4# #(#5# unsyntax #6# 725295) #84#)) . any))))) ($syntax-dispatch %%tmp2938 '(#(free-id #structure(#4# #(#5# quasisyntax #6# 725288) #84#)) . any)))) %%q2934))) (%%vqs2933 (lambda (%%x*3027 %%n3028 %%b*3029 %%k3030) (if (null? %%x*3027) (%%k3030 %%b*3029 '()) (%%vqs2933 (cdr %%x*3027) %%n3028 %%b*3029 (lambda (%%b*3031 %%xnew*3032) ((lambda (%%tmp3033) ((lambda (%%tmp3034) (if (if %%tmp3034 (apply (lambda (%%q3035) (= %%n3028 0)) %%tmp3034) #f) (apply (lambda (%%q3036) ((lambda (%%tmp3037) ((lambda (%%tmp3038) (if %%tmp3038 (apply (lambda (%%t3039) (%%k3030 (append (map list %%t3039 %%q3036) %%b*3031) (append %%t3039 %%xnew*3032))) %%tmp3038) (syntax-error %%tmp3037))) ($syntax-dispatch %%tmp3037 'each-any))) (generate-temporaries %%q3036))) %%tmp3034) ((lambda (%%tmp3044) (if (if %%tmp3044 (apply (lambda (%%q3045) (= %%n3028 0)) %%tmp3044) #f) (apply (lambda (%%q3046) ((lambda (%%tmp3047) ((lambda (%%tmp3048) (if %%tmp3048 (apply (lambda (%%t3049) (%%k3030 (append (map (lambda (%%tmp3051 %%tmp3050) (list (cons %%tmp3050 '(#structure(#4# #(#5# ... #6# 3740022) (#7# . #85=(#structure(#9# #(t) #(#7#) #("i")) #structure(#9# #(q) #(#7#) #("i")) . #86=(#structure(#9# () () ()) #structure(#9# #(b* xnew*) #(#7# #7#) #("i" "i")) #structure(#9# () () ()) #structure(#9# #(x* n b* k) #(#7# #7# #7# #7#) #("i" "i" "i" "i")) . #82#)))))) %%tmp3051)) %%q3046 %%t3049) %%b*3031) ((lambda (%%tmp3052) ((lambda (%%tmp3053) (if %%tmp3053 (apply (lambda (%%m3054) (append (apply append %%m3054) %%xnew*3032)) %%tmp3053) (syntax-error %%tmp3052))) ($syntax-dispatch %%tmp3052 '#(each each-any)))) (map (lambda (%%tmp3057) (cons %%tmp3057 '(#structure(#4# #(#5# ... #6# 5050743) (#7# . #85#))))) %%t3049)))) %%tmp3048) (syntax-error %%tmp3047))) ($syntax-dispatch %%tmp3047 'each-any))) (generate-temporaries %%q3046))) %%tmp3044) ((lambda (%%_3059) (%%qs2932 (car %%x*3027) %%n3028 %%b*3031 (lambda (%%b*3060 %%xnew3061) (%%k3030 %%b*3060 (cons %%xnew3061 %%xnew*3032))))) %%tmp3033))) ($syntax-dispatch %%tmp3033 '(#(free-id #structure(#4# #(#5# unsyntax-splicing #6# 1446259) #87=(#7# . #86#))) . each-any))))) ($syntax-dispatch %%tmp3033 '(#(free-id #structure(#4# #(#5# unsyntax #6# 1446254) #87#)) . each-any)))) (car %%x*3027)))))))) ((lambda (%%tmp3062) ((lambda (%%tmp3063) (if %%tmp3063 (apply (lambda (%%_3064 %%x3065) (%%qs2932 %%x3065 0 '() (lambda (%%b*3066 %%xnew3067) (if (eq? %%xnew3067 %%x3065) (list '#structure(#4# #(#5# syntax #6# 1380737) (#7# . #88=(#structure(#9# () () ()) #structure(#9# #(b* xnew) #(#7# #7#) #("i" "i")) #structure(#9# #(_ x) #(#7# #7#) #("i" "i")) . #82#))) %%x3065) ((lambda (%%tmp3068) ((lambda (%%tmp3069) (if %%tmp3069 (apply (lambda (%%b3070 %%x3071) (list '#structure(#4# #(#5# with-syntax #6# 2232707) #89=(#7# #structure(#9# #(b x) #(#7# #7#) #("i" "i")) . #88#)) %%b3070 (list '#structure(#4# #(#5# syntax #6# 3608963) #89#) %%x3071))) %%tmp3069) (syntax-error %%tmp3068))) ($syntax-dispatch %%tmp3068 '(each-any any)))) (list %%b*3066 %%xnew3067)))))) %%tmp3063) (syntax-error %%tmp3062))) ($syntax-dispatch %%tmp3062 '(any any)))) %%x2931)))) (%%global-extend220 'macro 'include (lambda (%%x3073) (letrec ((%%read-file3074 (lambda (%%port3075 %%k3076) (vector-ref (##read-all-as-a-begin-expr-from-port %%port3075 (##current-readtable) ##wrap-datum ##unwrap-datum #f #t) 1)))) ((lambda (%%tmp3077) ((lambda (%%tmp3078) (if %%tmp3078 (apply (lambda (%%k3079 %%filename3080) ((lambda (%%this-include-expr3081) ((lambda (%%this-include-expr-locat3082) ((lambda (%%this-include-expr-filename3083) ((lambda (%%directory3084) ((lambda (%%filename3085) ((lambda () (begin ($include-file-hook %%filename3085) (datum->syntax %%k3079 (call-with-input-file %%filename3085 (lambda (%%port3086) (%%read-file3074 %%port3086 %%k3079)))))))) (path-normalize (path-expand (syntax->datum %%filename3080) %%directory3084)))) ((lambda (%%t3087) (if %%t3087 %%t3087 (current-directory))) (if (string? %%this-include-expr-filename3083) (path-directory %%this-include-expr-filename3083) #f)))) (if %%this-include-expr-locat3082 (vector-ref %%this-include-expr-locat3082 0) #f))) (if (##source? %%this-include-expr3081) (##source-locat %%this-include-expr3081) #f))) (%%syntax-expression38 %%k3079))) %%tmp3078) (syntax-error %%tmp3077))) ($syntax-dispatch %%tmp3077 '(any any)))) %%x3073)))) (%%global-extend220 'macro 'case (lambda (%%x3088) ((lambda (%%tmp3089) ((lambda (%%tmp3090) (if %%tmp3090 (apply (lambda (%%_3091 %%e3092 %%m13093 %%m23094) ((lambda (%%tmp3095) ((lambda (%%body3096) (list '#structure(#4# #(#5# let #6# 1249746) #90=(#7# #structure(#9# #(body) #(#7#) #("i")) . #91=(#structure(#9# #(_ e m1 m2) #(#7# #7# #7# #7#) #("i" "i" "i" "i")) #structure(#9# () () ()) #structure(#9# #(x) #(#7#) #("i")) #10# . #12#))) (list (list '#structure(#4# #(#5# t #6# 1642962) #90#) %%e3092)) %%body3096)) %%tmp3095)) ((letrec ((%%f3097 (lambda (%%clause3098 %%clauses3099) (if (null? %%clauses3099) ((lambda (%%tmp3100) ((lambda (%%tmp3101) (if %%tmp3101 (apply (lambda (%%e13102 %%e23103) (cons '#structure(#4# #(#5# begin #6# 3412423) (#7# #structure(#9# #(e1 e2) #(#7# #7#) #("i" "i")) . #92=(#structure(#9# () () ()) #structure(#9# #(clause clauses) #(#7# #7#) #("i" "i")) #structure(#9# #(f) #(#7#) #("i")) . #91#))) (cons %%e13102 %%e23103))) %%tmp3101) ((lambda (%%tmp3105) (if %%tmp3105 (apply (lambda (%%k3106 %%e13107 %%e23108) (list '#structure(#4# #(#5# if #6# 2298313) #93=(#7# #structure(#9# #(k e1 e2) #(#7# #7# #7#) #("i" "i" "i")) . #92#)) (list '#structure(#4# #(#5# memv #6# 2560457) #93#) '#structure(#4# #(#5# t #6# 2888137) #93#) (list '#structure(#4# #(#5# quote #6# 3019209) #93#) %%k3106)) (cons '#structure(#4# #(#5# begin #6# 3740105) #93#) (cons %%e13107 %%e23108)))) %%tmp3105) ((lambda (%%_3111) (syntax-error %%x3088)) %%tmp3100))) ($syntax-dispatch %%tmp3100 '(each-any any . each-any))))) ($syntax-dispatch %%tmp3100 '(#(free-id #structure(#4# #(#5# else #6# 1774023) (#7# . #92#))) any . each-any)))) %%clause3098) ((lambda (%%tmp3112) ((lambda (%%rest3113) ((lambda (%%tmp3114) ((lambda (%%tmp3115) (if %%tmp3115 (apply (lambda (%%k3116 %%e13117 %%e23118) (list '#structure(#4# #(#5# if #6# 3150286) #94=(#7# #structure(#9# #(k e1 e2) #(#7# #7# #7#) #("i" "i" "i")) #structure(#9# #(rest) #(#7#) #("i")) . #92#)) (list '#structure(#4# #(#5# memv #6# 3412430) #94#) '#structure(#4# #(#5# t #6# 3740110) #94#) (list '#structure(#4# #(#5# quote #6# 3871182) #94#) %%k3116)) (cons '#structure(#4# #(#5# begin #6# 3412431) #94#) (cons %%e13117 %%e23118)) %%rest3113)) %%tmp3115) ((lambda (%%_3121) (syntax-error %%x3088)) %%tmp3114))) ($syntax-dispatch %%tmp3114 '(each-any any . each-any)))) %%clause3098)) %%tmp3112)) (%%f3097 (car %%clauses3099) (cdr %%clauses3099))))))) %%f3097) %%m13093 %%m23094))) %%tmp3090) (syntax-error %%tmp3089))) ($syntax-dispatch %%tmp3089 '(any any any . each-any)))) %%x3088))) (%%global-extend220 'macro 'identifier-syntax (lambda (%%x3123) ((lambda (%%tmp3124) ((lambda (%%tmp3125) (if %%tmp3125 (apply (lambda (%%_3126 %%e3127) (list '#structure(#4# #(#5# lambda #6# 1577432) #95=(#7# #structure(#9# #(_ e) #(#7# #7#) #("i" "i")) . #96=(#structure(#9# () () ()) #structure(#9# #(x) #(#7#) #("i")) #10# . #12#))) '#structure(#4# #(#5# (#(#5# x #6# 2101720)) #6# 2036184) #95#) (list '#structure(#4# #(#5# syntax-case #6# 1708505) #95#) '#structure(#4# #(#5# x #6# 2494937) #95#) '#structure(#4# #(#5# () #6# 2626009) #95#) (list '#structure(#4# #(#5# id #6# 1839578) #95#) '#structure(#4# #(#5# (#(#5# identifier? #6# 2101722) #(#5# (#(#5# syntax #6# 2953690) #(#5# id #6# 3412442)) #6# 2888154)) #6# 2036186) #95#) (list '#structure(#4# #(#5# syntax #6# 3805658) #95#) %%e3127)) (list (cons %%_3126 '(#structure(#4# #(#5# x #6# 2036187) #95#) #structure(#4# #(#5# ... #6# 2494939) #95#))) (list '#structure(#4# #(#5# syntax #6# 2953691) #95#) (cons %%e3127 '(#structure(#4# #(#5# x #6# 3609051) #95#) #structure(#4# #(#5# ... #6# 4067803) #95#)))))))) %%tmp3125) ((lambda (%%tmp3128) (if (if %%tmp3128 (apply (lambda (%%_3129 %%id3130 %%exp13131 %%var3132 %%val3133 %%exp23134) (if (identifier? %%id3130) (identifier? %%var3132) #f)) %%tmp3128) #f) (apply (lambda (%%_3135 %%id3136 %%exp13137 %%var3138 %%val3139 %%exp23140) (list '#structure(#4# #(#5# cons #6# 725471) #97=(#7# #structure(#9# #(_ id exp1 var val exp2) #(#7# #7# #7# #7# #7# #7#) #("i" "i" "i" "i" "i" "i")) . #96#)) '#structure(#4# #(#5# (#(#5# quote #6# 1053151) #(#5# macro! #6# 1118687)) #6# 1053151) #97#) (list '#structure(#4# #(#5# lambda #6# 1118688) #97#) '#structure(#4# #(#5# (#(#5# x #6# 1642976)) #6# 1577440) #97#) (list '#structure(#4# #(#5# syntax-case #6# 1249761) #97#) '#structure(#4# #(#5# x #6# 2036193) #97#) '#structure(#4# #(#5# (#(#5# set! #6# 2232801)) #6# 2167265) #97#) (list (list '#structure(#4# #(#5# set! #6# 1446370) #97#) %%var3138 %%val3139) (list '#structure(#4# #(#5# syntax #6# 2429410) #97#) %%exp23140)) (list (cons %%id3136 '(#structure(#4# #(#5# x #6# 1642979) #97#) #structure(#4# #(#5# ... #6# 2101731) #97#))) (list '#structure(#4# #(#5# syntax #6# 2560483) #97#) (cons %%exp13137 '(#structure(#4# #(#5# x #6# 3412451) #97#) #structure(#4# #(#5# ... #6# 3871203) #97#))))) (list %%id3136 (list '#structure(#4# #(#5# identifier? #6# 1642980) #97#) (list '#structure(#4# #(#5# syntax #6# 2494948) #97#) %%id3136)) (list '#structure(#4# #(#5# syntax #6# 3346916) #97#) %%exp13137)))))) %%tmp3128) (syntax-error %%tmp3124))) ($syntax-dispatch %%tmp3124 '(any (any any) ((#(free-id #structure(#4# #(#5# set! #6# 1577436) (#7# . #96#))) any any) any)))))) ($syntax-dispatch %%tmp3124 '(any any)))) %%x3123))) (%%global-extend220 'macro 'cond-expand (lambda (%%x3141) ((lambda (%%tmp3142) ((lambda (%%tmp3143) (if %%tmp3143 (apply (lambda (%%dummy3144) '#structure(#4# #(#5# (#(#5# syntax-error #6# 1446378) #(#5# "Unfulfilled cond-expand" #6# 2298346)) #6# 1380842) (#7# #structure(#9# #(dummy) #((#98="m" . #11#)) #("i")) #99=#structure(#9# () () ()) #100=#structure(#9# #(x) #((#98# . #11#)) #("i")) . #101=(#10# . #12#)))) %%tmp3143) ((lambda (%%tmp3145) (if %%tmp3145 (apply (lambda (%%dummy3146 %%body3147) (cons '#structure(#4# #(#5# begin #6# 528876) (#7# #structure(#9# #(dummy body) #((#98# . #11#) #7#) #("i" "i")) #99# #100# . #101#)) %%body3147)) %%tmp3145) ((lambda (%%tmp3149) (if %%tmp3149 (apply (lambda (%%dummy3150 %%body3151 %%more-clauses3152) (cons '#structure(#4# #(#5# begin #6# 528878) (#7# #structure(#9# #(dummy body more-clauses) #((#98# . #11#) #7# #7#) #("i" "i" "i")) #99# #100# . #101#)) %%body3151)) %%tmp3149) ((lambda (%%tmp3154) (if %%tmp3154 (apply (lambda (%%dummy3155 %%req13156 %%req23157 %%body3158 %%more-clauses3159) (cons '#structure(#4# #(#5# cond-expand #6# 528880) #102=(#7# #structure(#9# #(dummy req1 req2 body more-clauses) #((#98# . #11#) #7# #7# #7# #7#) #("i" "i" "i" "i" "i")) #99# #100# . #101#)) (cons (list %%req13156 (cons '#structure(#4# #(#5# cond-expand #6# 659954) #102#) (cons (cons (cons '#structure(#4# #(#5# and #6# 791027) #102#) %%req23157) %%body3158) %%more-clauses3159))) %%more-clauses3159))) %%tmp3154) ((lambda (%%tmp3164) (if %%tmp3164 (apply (lambda (%%dummy3165 %%body3166 %%more-clauses3167) (cons '#structure(#4# #(#5# cond-expand #6# 528887) (#7# #structure(#9# #(dummy body more-clauses) #((#98# . #11#) #7# #7#) #("i" "i" "i")) #99# #100# . #101#)) %%more-clauses3167)) %%tmp3164) ((lambda (%%tmp3169) (if %%tmp3169 (apply (lambda (%%dummy3170 %%req13171 %%req23172 %%body3173 %%more-clauses3174) (list '#structure(#4# #(#5# cond-expand #6# 528889) #103=(#7# #structure(#9# #(dummy req1 req2 body more-clauses) #((#98# . #11#) #7# #7# #7# #7#) #("i" "i" "i" "i" "i")) #99# #100# . #101#)) (list %%req13171 (cons '#structure(#4# #(#5# begin #6# 659963) #103#) %%body3173)) (list '#structure(#4# #(#5# else #6# 594428) #103#) (cons '#structure(#4# #(#5# cond-expand #6# 659965) #103#) (cons (cons (cons '#structure(#4# #(#5# or #6# 791038) #103#) %%req23172) %%body3173) %%more-clauses3174))))) %%tmp3169) ((lambda (%%tmp3179) (if %%tmp3179 (apply (lambda (%%dummy3180 %%req3181 %%body3182 %%more-clauses3183) (list '#structure(#4# #(#5# cond-expand #6# 528897) #104=(#7# #structure(#9# #(dummy req body more-clauses) #((#98# . #11#) #7# #7# #7#) #("i" "i" "i" "i")) #99# #100# . #101#)) (list %%req3181 (cons '#structure(#4# #(#5# cond-expand #6# 659971) #104#) %%more-clauses3183)) (cons '#structure(#4# #(#5# else #6# 594436) #104#) %%body3182))) %%tmp3179) ((lambda (%%tmp3186) (if %%tmp3186 (apply (lambda (%%dummy3187 %%body3188 %%more-clauses3189) (cons '#structure(#4# #(#5# begin #6# 528902) (#7# #structure(#9# #(dummy body more-clauses) #((#98# . #11#) #7# #7#) #("i" "i" "i")) #99# #100# . #101#)) %%body3188)) %%tmp3186) ((lambda (%%tmp3191) (if %%tmp3191 (apply (lambda (%%dummy3192 %%body3193 %%more-clauses3194) (cons '#structure(#4# #(#5# begin #6# 528904) (#7# #structure(#9# #(dummy body more-clauses) #((#98# . #11#) #7# #7#) #("i" "i" "i")) #99# #100# . #101#)) %%body3193)) %%tmp3191) ((lambda (%%tmp3196) (if %%tmp3196 (apply (lambda (%%dummy3197 %%feature-id3198 %%body3199 %%more-clauses3200) (cons '#structure(#4# #(#5# cond-expand #6# 528906) (#7# #structure(#9# #(dummy feature-id body more-clauses) #((#98# . #11#) #7# #7# #7#) #("i" "i" "i" "i")) #99# #100# . #101#)) %%more-clauses3200)) %%tmp3196) (syntax-error %%tmp3142))) ($syntax-dispatch %%tmp3142 '(any (any . each-any) . each-any))))) ($syntax-dispatch %%tmp3142 '(any (#(free-id #structure(#4# #(#5# gambit #6# 1380871) (#7# #99# #100# . #101#))) . each-any) . each-any))))) ($syntax-dispatch %%tmp3142 '(any (#(free-id #structure(#4# #(#5# srfi-0 #6# 1380869) (#7# #99# #100# . #101#))) . each-any) . each-any))))) ($syntax-dispatch %%tmp3142 '(any ((#(free-id #structure(#4# #(#5# not #6# 1446400) (#7# #99# #100# . #101#))) any) . each-any) . each-any))))) ($syntax-dispatch %%tmp3142 '(any ((#(free-id #structure(#4# #(#5# or #6# 1446392) (#7# #99# #100# . #101#))) any . each-any) . each-any) . each-any))))) ($syntax-dispatch %%tmp3142 '(any ((#(free-id #structure(#4# #(#5# or #6# 1446390) (#7# #99# #100# . #101#)))) . each-any) . each-any))))) ($syntax-dispatch %%tmp3142 '(any ((#(free-id #structure(#4# #(#5# and #6# 1446383) (#7# #99# #100# . #101#))) any . each-any) . each-any) . each-any))))) ($syntax-dispatch %%tmp3142 '(any ((#(free-id #structure(#4# #(#5# and #6# 1446381) (#7# #99# #100# . #101#)))) . each-any) . each-any))))) ($syntax-dispatch %%tmp3142 '(any (#(free-id #structure(#4# #(#5# else #6# 1380843) (#7# #99# #100# . #101#))) . each-any)))))) ($syntax-dispatch %%tmp3142 '(any)))) %%x3141))) (%%global-extend220 'macro 'define-macro (lambda (%%x3202) ((lambda (%%tmp3203) ((lambda (%%tmp3204) (if %%tmp3204 (apply (lambda (%%_3205 %%name3206 %%params3207 %%body13208 %%body23209) (list '#structure(#4# #(#5# define-macro #6# 1184273) #105=(#7# #structure(#9# #(_ name params body1 body2) #(#7# #7# #7# #7# #7#) #("i" "i" "i" "i" "i")) . #106=(#structure(#9# () () ()) #structure(#9# #(x) #(#7#) #("i")) #10# . #12#))) %%name3206 (cons '#structure(#4# #(#5# lambda #6# 2429457) #105#) (cons %%params3207 (cons %%body13208 %%body23209))))) %%tmp3204) ((lambda (%%tmp3211) (if %%tmp3211 (apply (lambda (%%_3212 %%name3213 %%expander3214) (list '#structure(#4# #(#5# define-syntax #6# 1184275) #107=(#7# #structure(#9# #(_ name expander) #(#7# #7# #7#) #("i" "i" "i")) . #106#)) %%name3213 (list '#structure(#4# #(#5# lambda #6# 1315348) #107#) '#structure(#4# #(#5# (#(#5# y #6# 1839636)) #6# 1774100) #107#) (list '#structure(#4# #(#5# syntax-case #6# 1446421) #107#) '#structure(#4# #(#5# y #6# 2232853) #107#) '#structure(#4# #(#5# () #6# 2363925) #107#) (list '#structure(#4# #(#5# (#(#5# k #6# 1643030) . #(#5# args #6# 1905174)) #6# 1577494) #107#) (list '#structure(#4# #(#5# let #6# 1643031) #107#) '#structure(#4# #(#5# (#(#5# (#(#5# lst #6# 2036247) #(#5# (#(#5# syntax->datum #6# 2363927) #(#5# (#(#5# syntax #6# 3346967) #(#5# args #6# 3805719)) #6# 3281431)) #6# 2298391)) #6# 1970711)) #6# 1905175) #107#) (list '#structure(#4# #(#5# datum->syntax #6# 1774104) #107#) '#structure(#4# #(#5# (#(#5# syntax #6# 1839641) #(#5# k #6# 2298393)) #6# 1774105) #107#) (cons '#structure(#4# #(#5# apply #6# 1839642) #107#) (cons %%expander3214 '#structure(#4# (#(#5# lst #6# 2822682)) #107#)))))))))) %%tmp3211) (syntax-error %%tmp3203))) ($syntax-dispatch %%tmp3203 '(any any any))))) ($syntax-dispatch %%tmp3203 '(any (any . any) any . each-any)))) %%x3202)))))));;;============================================================================

;;; Install the syntax-case expander.

(define c#expand-source
  (lambda (src)
    src))

(set! c#expand-source ;; setup compiler's expander
  (lambda (src)
    ((make-expander '(E) '(E)) src)))

(set! ##expand-source ;; setup interpreter's expander
  (lambda (src)
    (let ((expansion ((make-expander '(E) '(E)) src)))
      (if (syntax-case-debug)
          (pp (##desourcify expansion)))
      (unmark! expansion)
      expansion)))

;;;============================================================================
