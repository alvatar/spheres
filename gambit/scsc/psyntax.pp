((lambda () (letrec ((%%noexpand35 "noexpand") (%%make-syntax-object36 (lambda (%%p1469 %%p2470) (begin (##declare (extended-bindings)) (##structure '#0=#structure(#1=#structure(#1# ##type-5 type 8 #f #(id 1 #f name 5 #f flags 5 #f super 5 #f fields 5 #f)) ##type-2-2D9C624D-3630-42AF-884C-FD82C537B2D7 syntax-object 24 #f #(expression 2 #f wrap 2 #f)) %%p1469 %%p2470)))) (%%bs-syntax?37 (lambda (%%obj471) (begin (##declare (extended-bindings)) (##structure-direct-instance-of? %%obj471 '##type-2-2D9C624D-3630-42AF-884C-FD82C537B2D7)))) (%%bs-syntax-expression38 (lambda (%%obj472) (((lambda () (begin (##declare (extended-bindings)) ##direct-structure-ref))) %%obj472 1 '#0# %%bs-syntax-expression38))) (%%bs-syntax-wrap39 (lambda (%%obj473) (((lambda () (begin (##declare (extended-bindings)) ##direct-structure-ref))) %%obj473 2 '#0# %%bs-syntax-wrap39))) (%%syntax-object?40 (lambda (%%obj474) ((lambda (%%t475) (if %%t475 %%t475 ((lambda (%%obj476) (if (vector? %%obj476) (eq? (vector-ref %%obj476 0) 'syntax-object) #f)) (if (annotation? %%obj474) (annotation-stripped %%obj474) %%obj474)))) (%%bs-syntax?37 %%obj474)))) (%%syntax-object-expression41 (lambda (%%obj477) (if (%%bs-syntax?37 %%obj477) (%%bs-syntax-expression38 %%obj477) ((lambda (%%obj478) (vector-ref %%obj478 1)) (if (annotation? %%obj477) (annotation-stripped %%obj477) %%obj477))))) (%%syntax-object-wrap42 (lambda (%%obj479) (if (%%bs-syntax?37 %%obj479) (%%bs-syntax-wrap39 %%obj479) ((lambda (%%obj480) (vector-ref %%obj480 2)) (if (annotation? %%obj479) (annotation-stripped %%obj479) %%obj479))))) (%%top-level-eval-hook43 (lambda (%%x481) (eval (list %%noexpand35 %%x481)))) (%%local-eval-hook44 (lambda (%%x482) (eval (list %%noexpand35 %%x482)))) (%%define-top-level-value-hook45 (lambda (%%sym483 %%val484) (%%top-level-eval-hook43 (build-source #f (list (build-source #f 'define) %%sym483 ((lambda (%%x485) (if (self-eval? %%val484) %%x485 (build-source #f (list (build-source #f 'quote) %%x485)))) (attach-source #f %%val484))))))) (%%put-cte-hook46 (lambda (%%symbol486 %%val487) (($sc-put-cte) %%symbol486 %%val487 '*top*))) (%%get-global-definition-hook47 (lambda (%%symbol488) (getprop %%symbol488 '*sc-expander*))) (%%put-global-definition-hook48 (lambda (%%symbol489 %%x490) (if (not %%x490) (remprop %%symbol489 '*sc-expander*) (putprop %%symbol489 '*sc-expander* %%x490)))) (%%read-only-binding?49 (lambda (%%symbol491) #f)) (%%get-import-binding50 (lambda (%%symbol492 %%token493) (getprop %%symbol492 %%token493))) (%%update-import-binding!51 (lambda (%%symbol494 %%token495 %%p496) ((lambda (%%x497) (if (not %%x497) (remprop %%symbol494 %%token495) (putprop %%symbol494 %%token495 %%x497))) (%%p496 (%%get-import-binding50 %%symbol494 %%token495))))) (%%built-lambda?135 (lambda (%%x498) ((lambda (%%t499) (if %%t499 %%t499 (if (##source? %%x498) (if (pair? (##source-code %%x498)) (if (##source? (car (##source-code %%x498))) (eq? (##source-code (car (##source-code %%x498))) 'lambda) #f) #f) #f))) (if (pair? %%x498) (eq? (car %%x498) 'lambda) #f)))) (%%build-sequence153 (lambda (%%ae500 %%exps501) ((letrec ((%%loop502 (lambda (%%exps503) (if (null? (cdr %%exps503)) (car %%exps503) (if ((lambda (%%x504) ((lambda (%%t505) (if %%t505 %%t505 (if (##source? %%x504) (if (pair? (##source-code %%x504)) (if (##source? (car (##source-code %%x504))) (if (eq? (##source-code (car (##source-code %%x504))) 'void) (null? (cdr (##source-code %%x504))) #f) #f) #f) #f))) (equal? %%x504 '(void)))) (car %%exps503)) (%%loop502 (cdr %%exps503)) (build-source %%ae500 (cons (build-source %%ae500 'begin) %%exps503))))))) %%loop502) %%exps501))) (%%build-letrec154 (lambda (%%ae506 %%vars507 %%val-exps508 %%body-exp509) (if (null? %%vars507) %%body-exp509 (build-source %%ae506 (list (build-source %%ae506 'letrec) (build-source %%ae506 (map (lambda (%%v510 %%e511) (build-source %%ae506 (list %%v510 %%e511))) %%vars507 %%val-exps508)) %%body-exp509))))) (%%build-body155 (lambda (%%ae512 %%vars513 %%val-exps514 %%body-exp515) (%%build-letrec154 %%ae512 %%vars513 %%val-exps514 %%body-exp515))) (%%build-top-module156 (lambda (%%ae516 %%types517 %%vars518 %%val-exps519 %%body-exp520) (call-with-values (lambda () ((letrec ((%%f521 (lambda (%%types522 %%vars523) (if (null? %%types522) (values '() '() '()) ((lambda (%%var524) (call-with-values (lambda () (%%f521 (cdr %%types522) (cdr %%vars523))) (lambda (%%vars525 %%defns526 %%sets527) (if (eq? (car %%types522) 'global) ((lambda (%%x528) (values (cons %%x528 %%vars525) (cons (build-source #f (list (build-source #f 'define) %%var524 (%%chi-void462))) %%defns526) (cons (build-source #f (list (build-source #f 'set!) %%var524 %%x528)) %%sets527))) (gensym %%var524)) (values (cons %%var524 %%vars525) %%defns526 %%sets527))))) (car %%vars523)))))) %%f521) %%types517 %%vars518)) (lambda (%%vars529 %%defns530 %%sets531) (if (null? %%defns530) (%%build-letrec154 %%ae516 %%vars529 %%val-exps519 %%body-exp520) (%%build-sequence153 #f (append %%defns530 (list (%%build-letrec154 %%ae516 %%vars529 %%val-exps519 (%%build-sequence153 #f (append %%sets531 (list %%body-exp520)))))))))))) (%%sanitize-binding189 (lambda (%%b532) (if (procedure? %%b532) (cons 'macro %%b532) (if (%%binding?203 %%b532) (if ((lambda (%%t533) (if (memv %%t533 '(core macro macro! deferred)) (procedure? (%%binding-value200 %%b532)) (if (memv %%t533 '($module)) (%%interface?386 (%%binding-value200 %%b532)) (if (memv %%t533 '(lexical)) #f (if (memv %%t533 '(global meta-variable)) (symbol? (%%binding-value200 %%b532)) (if (memv %%t533 '(syntax)) ((lambda (%%x534) (if (pair? %%x534) (if #f ((lambda (%%n535) (if (integer? %%n535) (if (exact? %%n535) (>= %%n535 0) #f) #f)) (cdr %%x534)) #f) #f)) (%%binding-value200 %%b532)) (if (memv %%t533 '(begin define define-syntax set! $module-key $import eval-when meta)) (null? (%%binding-value200 %%b532)) (if (memv %%t533 '(local-syntax)) (boolean? (%%binding-value200 %%b532)) (if (memv %%t533 '(displaced-lexical)) (eq? (%%binding-value200 %%b532) #f) #t))))))))) (%%binding-type199 %%b532)) %%b532 #f) #f)))) (%%binding-type199 car) (%%binding-value200 cdr) (%%set-binding-type!201 set-car!) (%%set-binding-value!202 set-cdr!) (%%binding?203 (lambda (%%x536) (if (pair? %%x536) (symbol? (car %%x536)) #f))) (%%extend-env213 (lambda (%%label537 %%binding538 %%r539) (cons (cons %%label537 %%binding538) %%r539))) (%%extend-env*214 (lambda (%%labels540 %%bindings541 %%r542) (if (null? %%labels540) %%r542 (%%extend-env*214 (cdr %%labels540) (cdr %%bindings541) (%%extend-env213 (car %%labels540) (car %%bindings541) %%r542))))) (%%extend-var-env*215 (lambda (%%labels543 %%vars544 %%r545) (if (null? %%labels543) %%r545 (%%extend-var-env*215 (cdr %%labels543) (cdr %%vars544) (%%extend-env213 (car %%labels543) (cons 'lexical (car %%vars544)) %%r545))))) (%%displaced-lexical?216 (lambda (%%id546 %%r547) ((lambda (%%n548) (if %%n548 ((lambda (%%b549) (eq? (%%binding-type199 %%b549) 'displaced-lexical)) (%%lookup219 %%n548 %%r547)) #f)) (%%id-var-name367 %%id546 '(()))))) (%%displaced-lexical-error217 (lambda (%%id550) (syntax-error %%id550 (if (%%id-var-name367 %%id550 '(())) "identifier out of context" "identifier not visible")))) (%%lookup*218 (lambda (%%x551 %%r552) ((lambda (%%t553) (if %%t553 (cdr %%t553) (if (symbol? %%x551) ((lambda (%%t554) (if %%t554 %%t554 (cons 'global %%x551))) (%%get-global-definition-hook47 %%x551)) '(displaced-lexical . #f)))) (assq %%x551 %%r552)))) (%%lookup219 (lambda (%%x555 %%r556) (letrec ((%%whack-binding!557 (lambda (%%b558 %%*b559) (begin (%%set-binding-type!201 %%b558 (%%binding-type199 %%*b559)) (%%set-binding-value!202 %%b558 (%%binding-value200 %%*b559)))))) ((lambda (%%b560) (begin (if (eq? (%%binding-type199 %%b560) 'deferred) (%%whack-binding!557 %%b560 (%%make-transformer-binding220 ((%%binding-value200 %%b560)))) (void)) %%b560)) (%%lookup*218 %%x555 %%r556))))) (%%make-transformer-binding220 (lambda (%%b561) ((lambda (%%t562) (if %%t562 %%t562 (syntax-error %%b561 "invalid transformer"))) (%%sanitize-binding189 %%b561)))) (%%defer-or-eval-transformer221 (lambda (%%eval563 %%x564) (if (%%built-lambda?135 %%x564) (cons 'deferred (lambda () (%%eval563 %%x564))) (%%make-transformer-binding220 (%%eval563 %%x564))))) (%%global-extend222 (lambda (%%type565 %%sym566 %%val567) (%%put-cte-hook46 %%sym566 (cons %%type565 %%val567)))) (%%nonsymbol-id?223 (lambda (%%x568) (if (%%syntax-object?40 %%x568) (symbol? ((lambda (%%e569) (if (annotation? %%e569) (annotation-expression %%e569) %%e569)) (%%syntax-object-expression41 %%x568))) #f))) (%%id?224 (lambda (%%x570) (if (symbol? %%x570) #t (if (%%syntax-object?40 %%x570) (symbol? ((lambda (%%e571) (if (annotation? %%e571) (annotation-expression %%e571) %%e571)) (%%syntax-object-expression41 %%x570))) (if (annotation? %%x570) (symbol? (annotation-expression %%x570)) #f))))) (%%id-marks230 (lambda (%%id572) (if (%%syntax-object?40 %%id572) (%%wrap-marks234 (%%syntax-object-wrap42 %%id572)) (%%wrap-marks234 '((top)))))) (%%id-subst231 (lambda (%%id573) (if (%%syntax-object?40 %%id573) (%%wrap-subst235 (%%syntax-object-wrap42 %%id573)) (%%wrap-marks234 '((top)))))) (%%id-sym-name&marks232 (lambda (%%x574 %%w575) (if (%%syntax-object?40 %%x574) (values ((lambda (%%e576) (if (annotation? %%e576) (annotation-expression %%e576) %%e576)) (%%syntax-object-expression41 %%x574)) (%%join-marks356 (%%wrap-marks234 %%w575) (%%wrap-marks234 (%%syntax-object-wrap42 %%x574)))) (values ((lambda (%%e577) (if (annotation? %%e577) (annotation-expression %%e577) %%e577)) %%x574) (%%wrap-marks234 %%w575))))) (%%make-wrap233 cons) (%%wrap-marks234 car) (%%wrap-subst235 cdr) (%%##type-1-indirect-label273 (((lambda () (begin (##declare (extended-bindings)) ##structure))) ##type-type (((lambda () (begin (##declare (extended-bindings)) ##make-uninterned-symbol))) "##type-1-indirect-label") 'indirect-label 8 #f '#(label 0 #f))) (%%make-indirect-label274 (lambda (%%p1578) (begin (##declare (extended-bindings)) (##structure %%##type-1-indirect-label273 %%p1578)))) (%%indirect-label?275 (lambda (%%obj579) (begin (##declare (extended-bindings)) (##structure-direct-instance-of? %%obj579 ((lambda () (begin (##declare (extended-bindings) (not safe)) (##type-id %%##type-1-indirect-label273)))))))) (%%indirect-label-label276 (lambda (%%obj580) (((lambda () (begin (##declare (extended-bindings)) ##direct-structure-ref))) %%obj580 1 %%##type-1-indirect-label273 %%indirect-label-label276))) (%%set-indirect-label-label!277 (lambda (%%obj581 %%val582) (((lambda () (begin (##declare (extended-bindings)) ##direct-structure-set!))) %%obj581 %%val582 1 %%##type-1-indirect-label273 %%set-indirect-label-label!277))) (%%gen-indirect-label278 (lambda () (%%make-indirect-label274 (%%gen-label281)))) (%%get-indirect-label279 (lambda (%%x583) (%%indirect-label-label276 %%x583))) (%%set-indirect-label!280 (lambda (%%x584 %%v585) (%%set-indirect-label-label!277 %%x584 %%v585))) (%%gen-label281 (lambda () (string #\i))) (%%label?282 (lambda (%%x586) ((lambda (%%t587) (if %%t587 %%t587 ((lambda (%%t588) (if %%t588 %%t588 (%%indirect-label?275 %%x586))) (symbol? %%x586)))) (string? %%x586)))) (%%gen-labels283 (lambda (%%ls589) (if (null? %%ls589) '() (cons (%%gen-label281) (%%gen-labels283 (cdr %%ls589)))))) (%%make-ribcage284 (lambda (%%p1590 %%p2591 %%p3592) (begin (##declare (extended-bindings)) (##structure '#2=#structure(#1# ##type-3-0E54356E-1759-409D-AB3F-0E5AD9E68939 ribcage 24 #f #(symnames 0 #f marks 0 #f labels 0 #f)) %%p1590 %%p2591 %%p3592)))) (%%bs-ribcage?285 (lambda (%%obj593) (begin (##declare (extended-bindings)) (##structure-direct-instance-of? %%obj593 '##type-3-0E54356E-1759-409D-AB3F-0E5AD9E68939)))) (%%bs-ribcage-symnames286 (lambda (%%obj594) (((lambda () (begin (##declare (extended-bindings)) ##direct-structure-ref))) %%obj594 1 '#2# %%bs-ribcage-symnames286))) (%%set-bs-ribcage-symnames!287 (lambda (%%obj595 %%val596) (((lambda () (begin (##declare (extended-bindings)) ##direct-structure-set!))) %%obj595 %%val596 1 '#2# %%set-bs-ribcage-symnames!287))) (%%bs-ribcage-marks288 (lambda (%%obj597) (((lambda () (begin (##declare (extended-bindings)) ##direct-structure-ref))) %%obj597 2 '#2# %%bs-ribcage-marks288))) (%%set-bs-ribcage-marks!289 (lambda (%%obj598 %%val599) (((lambda () (begin (##declare (extended-bindings)) ##direct-structure-set!))) %%obj598 %%val599 2 '#2# %%set-bs-ribcage-marks!289))) (%%bs-ribcage-labels290 (lambda (%%obj600) (((lambda () (begin (##declare (extended-bindings)) ##direct-structure-ref))) %%obj600 3 '#2# %%bs-ribcage-labels290))) (%%set-bs-ribcage-labels!291 (lambda (%%obj601 %%val602) (((lambda () (begin (##declare (extended-bindings)) ##direct-structure-set!))) %%obj601 %%val602 3 '#2# %%set-bs-ribcage-labels!291))) (%%ribcage?292 (lambda (%%obj603) ((lambda (%%t604) (if %%t604 %%t604 ((lambda (%%obj605) (if (vector? %%obj605) (eq? (vector-ref %%obj605 0) 'ribcage) #f)) (if (annotation? %%obj603) (annotation-stripped %%obj603) %%obj603)))) (%%bs-ribcage?285 %%obj603)))) (%%ribcage-symnames293 (lambda (%%obj606) (if (%%bs-ribcage?285 %%obj606) (%%bs-ribcage-symnames286 %%obj606) ((lambda (%%obj607) (vector-ref %%obj607 1)) (if (annotation? %%obj606) (annotation-stripped %%obj606) %%obj606))))) (%%set-ribcage-symnames!294 (lambda (%%obj608 %%val609) (if (%%bs-ribcage?285 %%obj608) (%%set-bs-ribcage-symnames!287 %%obj608 %%val609) ((lambda (%%obj610) (vector-set! %%obj610 1 %%val609)) (if (annotation? %%obj608) (annotation-stripped %%obj608) %%obj608))))) (%%ribcage-marks295 (lambda (%%obj611) (if (%%bs-ribcage?285 %%obj611) (%%bs-ribcage-marks288 %%obj611) ((lambda (%%obj612) (vector-ref %%obj612 2)) (if (annotation? %%obj611) (annotation-stripped %%obj611) %%obj611))))) (%%set-ribcage-marks!296 (lambda (%%obj613 %%val614) (if (%%bs-ribcage?285 %%obj613) (%%set-bs-ribcage-marks!289 %%obj613 %%val614) ((lambda (%%obj615) (vector-set! %%obj615 2 %%val614)) (if (annotation? %%obj613) (annotation-stripped %%obj613) %%obj613))))) (%%ribcage-labels297 (lambda (%%obj616) (if (%%bs-ribcage?285 %%obj616) (%%bs-ribcage-labels290 %%obj616) ((lambda (%%obj617) (vector-ref %%obj617 3)) (if (annotation? %%obj616) (annotation-stripped %%obj616) %%obj616))))) (%%set-ribcage-labels!298 (lambda (%%obj618 %%val619) (if (%%bs-ribcage?285 %%obj618) (%%set-bs-ribcage-labels!291 %%obj618 %%val619) ((lambda (%%obj620) (vector-set! %%obj620 3 %%val619)) (if (annotation? %%obj618) (annotation-stripped %%obj618) %%obj618))))) (%%make-top-ribcage299 (lambda (%%p1621 %%p2622) (begin (##declare (extended-bindings)) (##structure '#3=#structure(#1# ##type-2-E14B1CA5-AADF-4FF2-9EAA-70CCC11E5A91 top-ribcage 24 #f #(key 0 #f mutable? 0 #f)) %%p1621 %%p2622)))) (%%bs-top-ribcage?300 (lambda (%%obj623) (begin (##declare (extended-bindings)) (##structure-direct-instance-of? %%obj623 '##type-2-E14B1CA5-AADF-4FF2-9EAA-70CCC11E5A91)))) (%%bs-top-ribcage-key301 (lambda (%%obj624) (((lambda () (begin (##declare (extended-bindings)) ##direct-structure-ref))) %%obj624 1 '#3# %%bs-top-ribcage-key301))) (%%set-bs-top-ribcage-key!302 (lambda (%%obj625 %%val626) (((lambda () (begin (##declare (extended-bindings)) ##direct-structure-set!))) %%obj625 %%val626 1 '#3# %%set-bs-top-ribcage-key!302))) (%%bs-top-ribcage-mutable?303 (lambda (%%obj627) (((lambda () (begin (##declare (extended-bindings)) ##direct-structure-ref))) %%obj627 2 '#3# %%bs-top-ribcage-mutable?303))) (%%set-bs-top-ribcage-mutable?!304 (lambda (%%obj628 %%val629) (((lambda () (begin (##declare (extended-bindings)) ##direct-structure-set!))) %%obj628 %%val629 2 '#3# %%set-bs-top-ribcage-mutable?!304))) (%%top-ribcage?305 (lambda (%%obj630) ((lambda (%%t631) (if %%t631 %%t631 ((lambda (%%obj632) (if (vector? %%obj632) (eq? (vector-ref %%obj632 0) 'top-ribcage) #f)) (if (annotation? %%obj630) (annotation-stripped %%obj630) %%obj630)))) (%%bs-top-ribcage?300 %%obj630)))) (%%top-ribcage-key306 (lambda (%%obj633) (if (%%bs-top-ribcage?300 %%obj633) (%%bs-top-ribcage-key301 %%obj633) ((lambda (%%obj634) (vector-ref %%obj634 1)) (if (annotation? %%obj633) (annotation-stripped %%obj633) %%obj633))))) (%%set-top-ribcage-key!307 (lambda (%%obj635 %%val636) (if (%%bs-top-ribcage?300 %%obj635) (%%set-bs-top-ribcage-key!302 %%obj635 %%val636) ((lambda (%%obj637) (vector-set! %%obj637 1 %%val636)) (if (annotation? %%obj635) (annotation-stripped %%obj635) %%obj635))))) (%%top-ribcage-mutable?308 (lambda (%%obj638) (if (%%bs-top-ribcage?300 %%obj638) (%%bs-top-ribcage-mutable?303 %%obj638) ((lambda (%%obj639) (vector-ref %%obj639 2)) (if (annotation? %%obj638) (annotation-stripped %%obj638) %%obj638))))) (%%set-top-ribcage-mutable?!309 (lambda (%%obj640 %%val641) (if (%%bs-top-ribcage?300 %%obj640) (%%set-bs-top-ribcage-mutable?!304 %%obj640 %%val641) ((lambda (%%obj642) (vector-set! %%obj642 2 %%val641)) (if (annotation? %%obj640) (annotation-stripped %%obj640) %%obj640))))) (%%##type-2-import-interface310 (((lambda () (begin (##declare (extended-bindings)) ##structure))) ##type-type (((lambda () (begin (##declare (extended-bindings)) ##make-uninterned-symbol))) "##type-2-import-interface") 'import-interface 8 #f '#(interface 0 #f new-marks 0 #f))) (%%make-import-interface311 (lambda (%%p1643 %%p2644) (begin (##declare (extended-bindings)) (##structure %%##type-2-import-interface310 %%p1643 %%p2644)))) (%%import-interface?312 (lambda (%%obj645) (begin (##declare (extended-bindings)) (##structure-direct-instance-of? %%obj645 ((lambda () (begin (##declare (extended-bindings) (not safe)) (##type-id %%##type-2-import-interface310)))))))) (%%import-interface-interface313 (lambda (%%obj646) (((lambda () (begin (##declare (extended-bindings)) ##direct-structure-ref))) %%obj646 1 %%##type-2-import-interface310 %%import-interface-interface313))) (%%import-interface-interface-set!314 (lambda (%%obj647 %%val648) (((lambda () (begin (##declare (extended-bindings)) ##direct-structure-set!))) %%obj647 %%val648 1 %%##type-2-import-interface310 %%import-interface-interface-set!314))) (%%import-interface-new-marks315 (lambda (%%obj649) (((lambda () (begin (##declare (extended-bindings)) ##direct-structure-ref))) %%obj649 2 %%##type-2-import-interface310 %%import-interface-new-marks315))) (%%import-interface-new-marks-set!316 (lambda (%%obj650 %%val651) (((lambda () (begin (##declare (extended-bindings)) ##direct-structure-set!))) %%obj650 %%val651 2 %%##type-2-import-interface310 %%import-interface-new-marks-set!316))) (%%##type-2-env317 (((lambda () (begin (##declare (extended-bindings)) ##structure))) ##type-type (((lambda () (begin (##declare (extended-bindings)) ##make-uninterned-symbol))) "##type-2-env") 'env 8 #f '#(top-ribcage 0 #f wrap 0 #f))) (%%make-env318 (lambda (%%p1652 %%p2653) (begin (##declare (extended-bindings)) (##structure %%##type-2-env317 %%p1652 %%p2653)))) (%%env?319 (lambda (%%obj654) (begin (##declare (extended-bindings)) (##structure-direct-instance-of? %%obj654 ((lambda () (begin (##declare (extended-bindings) (not safe)) (##type-id %%##type-2-env317)))))))) (%%env-top-ribcage320 (lambda (%%obj655) (((lambda () (begin (##declare (extended-bindings)) ##direct-structure-ref))) %%obj655 1 %%##type-2-env317 %%env-top-ribcage320))) (%%env-top-ribcage-set!321 (lambda (%%obj656 %%val657) (((lambda () (begin (##declare (extended-bindings)) ##direct-structure-set!))) %%obj656 %%val657 1 %%##type-2-env317 %%env-top-ribcage-set!321))) (%%env-wrap322 (lambda (%%obj658) (((lambda () (begin (##declare (extended-bindings)) ##direct-structure-ref))) %%obj658 2 %%##type-2-env317 %%env-wrap322))) (%%env-wrap-set!323 (lambda (%%obj659 %%val660) (((lambda () (begin (##declare (extended-bindings)) ##direct-structure-set!))) %%obj659 %%val660 2 %%##type-2-env317 %%env-wrap-set!323))) (%%anti-mark333 (lambda (%%w661) (%%make-wrap233 (cons #f (%%wrap-marks234 %%w661)) (cons 'shift (%%wrap-subst235 %%w661))))) (%%barrier-marker338 #f) (%%extend-ribcage!343 (lambda (%%ribcage662 %%id663 %%label664) (begin (%%set-ribcage-symnames!294 %%ribcage662 (cons ((lambda (%%e665) (if (annotation? %%e665) (annotation-expression %%e665) %%e665)) (%%syntax-object-expression41 %%id663)) (%%ribcage-symnames293 %%ribcage662))) (%%set-ribcage-marks!296 %%ribcage662 (cons (%%wrap-marks234 (%%syntax-object-wrap42 %%id663)) (%%ribcage-marks295 %%ribcage662))) (%%set-ribcage-labels!298 %%ribcage662 (cons %%label664 (%%ribcage-labels297 %%ribcage662)))))) (%%import-extend-ribcage!344 (lambda (%%ribcage666 %%new-marks667 %%id668 %%label669) (begin (%%set-ribcage-symnames!294 %%ribcage666 (cons ((lambda (%%e670) (if (annotation? %%e670) (annotation-expression %%e670) %%e670)) (%%syntax-object-expression41 %%id668)) (%%ribcage-symnames293 %%ribcage666))) (%%set-ribcage-marks!296 %%ribcage666 (cons (%%join-marks356 %%new-marks667 (%%wrap-marks234 (%%syntax-object-wrap42 %%id668))) (%%ribcage-marks295 %%ribcage666))) (%%set-ribcage-labels!298 %%ribcage666 (cons %%label669 (%%ribcage-labels297 %%ribcage666)))))) (%%extend-ribcage-barrier!345 (lambda (%%ribcage671 %%killer-id672) (%%extend-ribcage-barrier-help!346 %%ribcage671 (%%syntax-object-wrap42 %%killer-id672)))) (%%extend-ribcage-barrier-help!346 (lambda (%%ribcage673 %%wrap674) (begin (%%set-ribcage-symnames!294 %%ribcage673 (cons %%barrier-marker338 (%%ribcage-symnames293 %%ribcage673))) (%%set-ribcage-marks!296 %%ribcage673 (cons (%%wrap-marks234 %%wrap674) (%%ribcage-marks295 %%ribcage673)))))) (%%extend-ribcage-subst!347 (lambda (%%ribcage675 %%import-iface676) (%%set-ribcage-symnames!294 %%ribcage675 (cons %%import-iface676 (%%ribcage-symnames293 %%ribcage675))))) (%%lookup-import-binding-name348 (lambda (%%sym677 %%marks678 %%token679 %%new-marks680) ((lambda (%%new681) (if %%new681 ((letrec ((%%f682 (lambda (%%new683) (if (pair? %%new683) ((lambda (%%t684) (if %%t684 %%t684 (%%f682 (cdr %%new683)))) (%%f682 (car %%new683))) (if (symbol? %%new683) (if (%%same-marks?358 %%marks678 (%%join-marks356 %%new-marks680 (%%wrap-marks234 '((top))))) %%new683 #f) (if (%%same-marks?358 %%marks678 (%%join-marks356 %%new-marks680 (%%wrap-marks234 (%%syntax-object-wrap42 %%new683)))) %%new683 #f)))))) %%f682) %%new681) #f)) (%%get-import-binding50 %%sym677 %%token679)))) (%%store-import-binding349 (lambda (%%id685 %%token686 %%new-marks687) (letrec ((%%cons-id688 (lambda (%%id690 %%x691) (if (not %%x691) %%id690 (cons %%id690 %%x691)))) (%%weed689 (lambda (%%marks692 %%x693) (if (pair? %%x693) (if (%%same-marks?358 (%%id-marks230 (car %%x693)) %%marks692) (%%weed689 %%marks692 (cdr %%x693)) (%%cons-id688 (car %%x693) (%%weed689 %%marks692 (cdr %%x693)))) (if %%x693 (if (not (%%same-marks?358 (%%id-marks230 %%x693) %%marks692)) %%x693 #f) #f))))) ((lambda (%%id694) ((lambda (%%sym695) (if (not (eq? %%id694 %%sym695)) ((lambda (%%marks696) (%%update-import-binding!51 %%sym695 %%token686 (lambda (%%old-binding697) ((lambda (%%x698) (%%cons-id688 (if (%%same-marks?358 %%marks696 (%%wrap-marks234 '((top)))) (%%resolved-id-var-name353 %%id694) %%id694) %%x698)) (%%weed689 %%marks696 %%old-binding697))))) (%%id-marks230 %%id694)) (void))) ((lambda (%%x699) ((lambda (%%e700) (if (annotation? %%e700) (annotation-expression %%e700) %%e700)) (if (%%syntax-object?40 %%x699) (%%syntax-object-expression41 %%x699) %%x699))) %%id694))) (if (null? %%new-marks687) %%id685 (%%make-syntax-object36 ((lambda (%%x701) ((lambda (%%e702) (if (annotation? %%e702) (annotation-expression %%e702) %%e702)) (if (%%syntax-object?40 %%x701) (%%syntax-object-expression41 %%x701) %%x701))) %%id685) (%%make-wrap233 (%%join-marks356 %%new-marks687 (%%id-marks230 %%id685)) (%%id-subst231 %%id685)))))))) (%%make-binding-wrap350 (lambda (%%ids703 %%labels704 %%w705) (if (null? %%ids703) %%w705 (%%make-wrap233 (%%wrap-marks234 %%w705) (cons ((lambda (%%labelvec706) ((lambda (%%n707) ((lambda (%%symnamevec708 %%marksvec709) (begin ((letrec ((%%f710 (lambda (%%ids711 %%i712) (if (not (null? %%ids711)) (call-with-values (lambda () (%%id-sym-name&marks232 (car %%ids711) %%w705)) (lambda (%%symname713 %%marks714) (begin (vector-set! %%symnamevec708 %%i712 %%symname713) (vector-set! %%marksvec709 %%i712 %%marks714) (%%f710 (cdr %%ids711) (fx+ %%i712 1))))) (void))))) %%f710) %%ids703 0) (%%make-ribcage284 %%symnamevec708 %%marksvec709 %%labelvec706))) (make-vector %%n707) (make-vector %%n707))) (vector-length %%labelvec706))) (list->vector %%labels704)) (%%wrap-subst235 %%w705)))))) (%%make-resolved-id351 (lambda (%%fromsym715 %%marks716 %%tosym717) (%%make-syntax-object36 %%fromsym715 (%%make-wrap233 %%marks716 (list (%%make-ribcage284 (vector %%fromsym715) (vector %%marks716) (vector %%tosym717))))))) (%%id->resolved-id352 (lambda (%%id718) (call-with-values (lambda () (%%id-var-name&marks365 %%id718 '(()))) (lambda (%%tosym719 %%marks720) (begin (if (not %%tosym719) (syntax-error %%id718 "identifier not visible for export") (void)) (%%make-resolved-id351 ((lambda (%%x721) ((lambda (%%e722) (if (annotation? %%e722) (annotation-expression %%e722) %%e722)) (if (%%syntax-object?40 %%x721) (%%syntax-object-expression41 %%x721) %%x721))) %%id718) %%marks720 %%tosym719)))))) (%%resolved-id-var-name353 (lambda (%%id723) (vector-ref (%%ribcage-labels297 (car (%%wrap-subst235 (%%syntax-object-wrap42 %%id723)))) 0))) (%%smart-append354 (lambda (%%m1724 %%m2725) (if (null? %%m2725) %%m1724 (append %%m1724 %%m2725)))) (%%join-wraps355 (lambda (%%w1726 %%w2727) ((lambda (%%m1728 %%s1729) (if (null? %%m1728) (if (null? %%s1729) %%w2727 (%%make-wrap233 (%%wrap-marks234 %%w2727) (%%join-subst357 %%s1729 (%%wrap-subst235 %%w2727)))) (%%make-wrap233 (%%join-marks356 %%m1728 (%%wrap-marks234 %%w2727)) (%%join-subst357 %%s1729 (%%wrap-subst235 %%w2727))))) (%%wrap-marks234 %%w1726) (%%wrap-subst235 %%w1726)))) (%%join-marks356 (lambda (%%m1730 %%m2731) (%%smart-append354 %%m1730 %%m2731))) (%%join-subst357 (lambda (%%s1732 %%s2733) (%%smart-append354 %%s1732 %%s2733))) (%%same-marks?358 (lambda (%%x734 %%y735) ((lambda (%%t736) (if %%t736 %%t736 (if (not (null? %%x734)) (if (not (null? %%y735)) (if (eq? (car %%x734) (car %%y735)) (%%same-marks?358 (cdr %%x734) (cdr %%y735)) #f) #f) #f))) (eq? %%x734 %%y735)))) (%%diff-marks359 (lambda (%%m1737 %%m2738) ((lambda (%%n1739 %%n2740) ((letrec ((%%f741 (lambda (%%n1742 %%m1743) (if (> %%n1742 %%n2740) (cons (car %%m1743) (%%f741 (- %%n1742 1) (cdr %%m1743))) (if (equal? %%m1743 %%m2738) '() (error "internal error in diff-marks" %%m1743 %%m2738)))))) %%f741) %%n1739 %%m1737)) (length %%m1737) (length %%m2738)))) (%%leave-implicit?360 (lambda (%%token744) (eq? %%token744 '*top*))) (%%new-binding361 (lambda (%%sym745 %%marks746 %%token747) ((lambda (%%loc748) ((lambda (%%id749) (begin (%%store-import-binding349 %%id749 %%token747 '()) (values %%loc748 %%id749))) (%%make-resolved-id351 %%sym745 %%marks746 %%loc748))) (if (if (%%leave-implicit?360 %%token747) (%%same-marks?358 %%marks746 (%%wrap-marks234 '((top)))) #f) %%sym745 (($generate-id) %%sym745))))) (%%top-id-bound-var-name362 (lambda (%%sym750 %%marks751 %%top-ribcage752) ((lambda (%%token753) ((lambda (%%t754) (if %%t754 ((lambda (%%id755) (if (symbol? %%id755) (if (%%read-only-binding?49 %%id755) (%%new-binding361 %%sym750 %%marks751 %%token753) (values %%id755 (%%make-resolved-id351 %%sym750 %%marks751 %%id755))) (values (%%resolved-id-var-name353 %%id755) %%id755))) %%t754) (%%new-binding361 %%sym750 %%marks751 %%token753))) (%%lookup-import-binding-name348 %%sym750 %%marks751 %%token753 '()))) (%%top-ribcage-key306 %%top-ribcage752)))) (%%top-id-free-var-name363 (lambda (%%sym756 %%marks757 %%top-ribcage758) ((lambda (%%token759) ((lambda (%%t760) (if %%t760 ((lambda (%%id761) (if (symbol? %%id761) %%id761 (%%resolved-id-var-name353 %%id761))) %%t760) (if (if (%%top-ribcage-mutable?308 %%top-ribcage758) (%%same-marks?358 %%marks757 (%%wrap-marks234 '((top)))) #f) (call-with-values (lambda () (%%new-binding361 %%sym756 (%%wrap-marks234 '((top))) %%token759)) (lambda (%%sym762 %%id763) %%sym762)) #f))) (%%lookup-import-binding-name348 %%sym756 %%marks757 %%token759 '()))) (%%top-ribcage-key306 %%top-ribcage758)))) (%%id-var-name-loc&marks364 (lambda (%%id764 %%w765) (letrec ((%%search766 (lambda (%%sym769 %%subst770 %%marks771) (if (null? %%subst770) (values #f %%marks771) ((lambda (%%fst772) (if (eq? %%fst772 'shift) (%%search766 %%sym769 (cdr %%subst770) (cdr %%marks771)) (if (%%ribcage?292 %%fst772) ((lambda (%%symnames773) (if (vector? %%symnames773) (%%search-vector-rib768 %%sym769 %%subst770 %%marks771 %%symnames773 %%fst772) (%%search-list-rib767 %%sym769 %%subst770 %%marks771 %%symnames773 %%fst772))) (%%ribcage-symnames293 %%fst772)) (if (%%top-ribcage?305 %%fst772) ((lambda (%%t774) (if %%t774 ((lambda (%%var-name775) (values %%var-name775 %%marks771)) %%t774) (%%search766 %%sym769 (cdr %%subst770) %%marks771))) (%%top-id-free-var-name363 %%sym769 %%marks771 %%fst772)) (error "internal error in id-var-name-loc&marks: improper subst" %%subst770))))) (car %%subst770))))) (%%search-list-rib767 (lambda (%%sym776 %%subst777 %%marks778 %%symnames779 %%ribcage780) ((letrec ((%%f781 (lambda (%%symnames782 %%i783) (if (null? %%symnames782) (%%search766 %%sym776 (cdr %%subst777) %%marks778) ((lambda (%%x784) (if (if (eq? %%x784 %%sym776) (%%same-marks?358 %%marks778 (list-ref (%%ribcage-marks295 %%ribcage780) %%i783)) #f) (values (list-ref (%%ribcage-labels297 %%ribcage780) %%i783) %%marks778) (if (%%import-interface?312 %%x784) ((lambda (%%iface785 %%new-marks786) ((lambda (%%t787) (if %%t787 ((lambda (%%token788) ((lambda (%%t789) (if %%t789 ((lambda (%%id790) (values (if (symbol? %%id790) %%id790 (%%resolved-id-var-name353 %%id790)) %%marks778)) %%t789) (%%f781 (cdr %%symnames782) %%i783))) (%%lookup-import-binding-name348 %%sym776 %%marks778 %%token788 %%new-marks786))) %%t787) ((lambda (%%ie791) ((lambda (%%n792) ((lambda () ((letrec ((%%g793 (lambda (%%j794) (if (fx= %%j794 %%n792) (%%f781 (cdr %%symnames782) %%i783) ((lambda (%%id795) ((lambda (%%id.sym796 %%id.marks797) (if (%%help-bound-id=?370 %%id.sym796 %%id.marks797 %%sym776 %%marks778) (values (%%lookup-import-label442 %%id795) %%marks778) (%%g793 (fx+ %%j794 1)))) ((lambda (%%x798) ((lambda (%%e799) (if (annotation? %%e799) (annotation-expression %%e799) %%e799)) (if (%%syntax-object?40 %%x798) (%%syntax-object-expression41 %%x798) %%x798))) %%id795) (%%join-marks356 %%new-marks786 (%%id-marks230 %%id795)))) (vector-ref %%ie791 %%j794)))))) %%g793) 0)))) (vector-length %%ie791))) (%%interface-exports389 %%iface785)))) (%%interface-token391 %%iface785))) (%%import-interface-interface313 %%x784) (%%import-interface-new-marks315 %%x784)) (if (if (eq? %%x784 %%barrier-marker338) (%%same-marks?358 %%marks778 (list-ref (%%ribcage-marks295 %%ribcage780) %%i783)) #f) (values #f %%marks778) (%%f781 (cdr %%symnames782) (fx+ %%i783 1)))))) (car %%symnames782)))))) %%f781) %%symnames779 0))) (%%search-vector-rib768 (lambda (%%sym800 %%subst801 %%marks802 %%symnames803 %%ribcage804) ((lambda (%%n805) ((letrec ((%%f806 (lambda (%%i807) (if (fx= %%i807 %%n805) (%%search766 %%sym800 (cdr %%subst801) %%marks802) (if (if (eq? (vector-ref %%symnames803 %%i807) %%sym800) (%%same-marks?358 %%marks802 (vector-ref (%%ribcage-marks295 %%ribcage804) %%i807)) #f) (values (vector-ref (%%ribcage-labels297 %%ribcage804) %%i807) %%marks802) (%%f806 (fx+ %%i807 1))))))) %%f806) 0)) (vector-length %%symnames803))))) (if (symbol? %%id764) (%%search766 %%id764 (%%wrap-subst235 %%w765) (%%wrap-marks234 %%w765)) (if (%%syntax-object?40 %%id764) ((lambda (%%sym808 %%w1809) (call-with-values (lambda () (%%search766 %%sym808 (%%wrap-subst235 %%w765) (%%join-marks356 (%%wrap-marks234 %%w765) (%%wrap-marks234 %%w1809)))) (lambda (%%name810 %%marks811) (if %%name810 (values %%name810 %%marks811) (%%search766 %%sym808 (%%wrap-subst235 %%w1809) %%marks811))))) ((lambda (%%e812) (if (annotation? %%e812) (annotation-expression %%e812) %%e812)) (%%syntax-object-expression41 %%id764)) (%%syntax-object-wrap42 %%id764)) (if (annotation? %%id764) (%%search766 ((lambda (%%e813) (if (annotation? %%e813) (annotation-expression %%e813) %%e813)) %%id764) (%%wrap-subst235 %%w765) (%%wrap-marks234 %%w765)) (error "(in id-var-name) invalid id" %%id764))))))) (%%id-var-name&marks365 (lambda (%%id814 %%w815) (call-with-values (lambda () (%%id-var-name-loc&marks364 %%id814 %%w815)) (lambda (%%label816 %%marks817) (values (if (%%indirect-label?275 %%label816) (%%get-indirect-label279 %%label816) %%label816) %%marks817))))) (%%id-var-name-loc366 (lambda (%%id818 %%w819) (call-with-values (lambda () (%%id-var-name-loc&marks364 %%id818 %%w819)) (lambda (%%label820 %%marks821) %%label820)))) (%%id-var-name367 (lambda (%%id822 %%w823) (call-with-values (lambda () (%%id-var-name-loc&marks364 %%id822 %%w823)) (lambda (%%label824 %%marks825) (if (%%indirect-label?275 %%label824) (%%get-indirect-label279 %%label824) %%label824))))) (%%free-id=?368 (lambda (%%i826 %%j827) (if (eq? ((lambda (%%x828) ((lambda (%%e829) (if (annotation? %%e829) (annotation-expression %%e829) %%e829)) (if (%%syntax-object?40 %%x828) (%%syntax-object-expression41 %%x828) %%x828))) %%i826) ((lambda (%%x830) ((lambda (%%e831) (if (annotation? %%e831) (annotation-expression %%e831) %%e831)) (if (%%syntax-object?40 %%x830) (%%syntax-object-expression41 %%x830) %%x830))) %%j827)) (eq? (%%id-var-name367 %%i826 '(())) (%%id-var-name367 %%j827 '(()))) #f))) (%%literal-id=?369 (lambda (%%id832 %%literal833) (if (eq? ((lambda (%%x834) ((lambda (%%e835) (if (annotation? %%e835) (annotation-expression %%e835) %%e835)) (if (%%syntax-object?40 %%x834) (%%syntax-object-expression41 %%x834) %%x834))) %%id832) ((lambda (%%x836) ((lambda (%%e837) (if (annotation? %%e837) (annotation-expression %%e837) %%e837)) (if (%%syntax-object?40 %%x836) (%%syntax-object-expression41 %%x836) %%x836))) %%literal833)) ((lambda (%%n-id838 %%n-literal839) ((lambda (%%t840) (if %%t840 %%t840 (if ((lambda (%%t841) (if %%t841 %%t841 (symbol? %%n-id838))) (not %%n-id838)) ((lambda (%%t842) (if %%t842 %%t842 (symbol? %%n-literal839))) (not %%n-literal839)) #f))) (eq? %%n-id838 %%n-literal839))) (%%id-var-name367 %%id832 '(())) (%%id-var-name367 %%literal833 '(()))) #f))) (%%help-bound-id=?370 (lambda (%%i.sym843 %%i.marks844 %%j.sym845 %%j.marks846) (if (eq? %%i.sym843 %%j.sym845) (%%same-marks?358 %%i.marks844 %%j.marks846) #f))) (%%bound-id=?371 (lambda (%%i847 %%j848) (%%help-bound-id=?370 ((lambda (%%x849) ((lambda (%%e850) (if (annotation? %%e850) (annotation-expression %%e850) %%e850)) (if (%%syntax-object?40 %%x849) (%%syntax-object-expression41 %%x849) %%x849))) %%i847) (%%id-marks230 %%i847) ((lambda (%%x851) ((lambda (%%e852) (if (annotation? %%e852) (annotation-expression %%e852) %%e852)) (if (%%syntax-object?40 %%x851) (%%syntax-object-expression41 %%x851) %%x851))) %%j848) (%%id-marks230 %%j848)))) (%%valid-bound-ids?372 (lambda (%%ids853) (if ((letrec ((%%all-ids?854 (lambda (%%ids855) ((lambda (%%t856) (if %%t856 %%t856 (if (%%id?224 (car %%ids855)) (%%all-ids?854 (cdr %%ids855)) #f))) (null? %%ids855))))) %%all-ids?854) %%ids853) (%%distinct-bound-ids?373 %%ids853) #f))) (%%distinct-bound-ids?373 (lambda (%%ids857) ((letrec ((%%distinct?858 (lambda (%%ids859) ((lambda (%%t860) (if %%t860 %%t860 (if (not (%%bound-id-member?375 (car %%ids859) (cdr %%ids859))) (%%distinct?858 (cdr %%ids859)) #f))) (null? %%ids859))))) %%distinct?858) %%ids857))) (%%invalid-ids-error374 (lambda (%%ids861 %%exp862 %%class863) ((letrec ((%%find864 (lambda (%%ids865 %%gooduns866) (if (null? %%ids865) (syntax-error %%exp862) (if (%%id?224 (car %%ids865)) (if (%%bound-id-member?375 (car %%ids865) %%gooduns866) (syntax-error (car %%ids865) "duplicate " %%class863) (%%find864 (cdr %%ids865) (cons (car %%ids865) %%gooduns866))) (syntax-error (car %%ids865) "invalid " %%class863)))))) %%find864) %%ids861 '()))) (%%bound-id-member?375 (lambda (%%x867 %%list868) (if (not (null? %%list868)) ((lambda (%%t869) (if %%t869 %%t869 (%%bound-id-member?375 %%x867 (cdr %%list868)))) (%%bound-id=?371 %%x867 (car %%list868))) #f))) (%%wrap376 (lambda (%%x870 %%w871) (if (if (null? (%%wrap-marks234 %%w871)) (null? (%%wrap-subst235 %%w871)) #f) %%x870 (if (%%syntax-object?40 %%x870) (%%make-syntax-object36 (%%syntax-object-expression41 %%x870) (%%join-wraps355 %%w871 (%%syntax-object-wrap42 %%x870))) (if (null? %%x870) %%x870 (%%make-syntax-object36 %%x870 %%w871)))))) (%%source-wrap377 (lambda (%%x872 %%w873 %%ae874) (%%wrap376 (if (annotation? %%ae874) (begin (if (not (eq? (annotation-expression %%ae874) %%x872)) (error "internal error in source-wrap: ae/x mismatch") (void)) %%ae874) %%x872) %%w873))) (%%chi-when-list378 (lambda (%%when-list875 %%w876) (map (lambda (%%x877) (if (%%literal-id=?369 %%x877 '#structure(#4=#structure(#1# ##type-2-2D9C624D-3630-42AF-884C-FD82C537B2D7 syntax-object 24 #f #(expression 2 #f wrap 2 #f)) #(#5=#(source1) compile #6="/Volumes/Data/scratch/scheme/control/system/scsc/psyntax.ss" 2492099) (#7=(top) . #8=(#structure(#9=#structure(#1# ##type-3-0E54356E-1759-409D-AB3F-0E5AD9E68939 ribcage 24 #f #(symnames 0 #f marks 0 #f labels 0 #f)) () () ()) #structure(#9# #(x) #(#7#) #("i")) #structure(#9# () () ()) #structure(#9# #(when-list w) #(#7# #7#) #("i" "i")) #10=#structure(#9# (lambda-var-list gen-var strip strip* strip-annotation ellipsis? chi-void chi-local-syntax chi-lambda-clause debug-when parse-begin parse-alias parse-eval-when parse-meta parse-define-syntax parse-define parse-import parse-module do-import! lookup-import-label import-mark-delta chi-internal chi-body chi-macro chi-set! chi-application chi-expr chi chi-sequence chi-meta-frob chi-frobs ct-eval/residualize3 ct-eval/residualize2 rt-eval/residualize initial-mode-set update-mode-set do-top-import vfor-each vmap chi-external check-defined-ids check-module-exports id-set-diff chi-top-module frob-meta?-set! frob-meta? frob-e-set! frob-e frob? make-frob ##type-2-frob create-module-binding set-module-binding-exported! module-binding-exported module-binding-val-set! module-binding-val module-binding-imps-set! module-binding-imps module-binding-label-set! module-binding-label module-binding-id-set! module-binding-id module-binding-type-set! module-binding-type module-binding? make-module-binding ##type-6-module-binding make-resolved-interface make-unresolved-interface interface-token-set! interface-token interface-exports-set! interface-exports interface-marks-set! interface-marks interface? make-interface ##type-3-interface flatten-exports chi-top chi-top-sequence chi-top* syntax-type chi-when-list source-wrap wrap bound-id-member? invalid-ids-error distinct-bound-ids? valid-bound-ids? bound-id=? help-bound-id=? literal-id=? free-id=? id-var-name id-var-name-loc id-var-name&marks id-var-name-loc&marks top-id-free-var-name top-id-bound-var-name anon diff-marks same-marks? join-subst join-marks join-wraps smart-append resolved-id-var-name id->resolved-id make-resolved-id make-binding-wrap store-import-binding lookup-import-binding-name extend-ribcage-subst! extend-ribcage-barrier-help! extend-ribcage-barrier! import-extend-ribcage! extend-ribcage! make-empty-ribcage barrier-marker new-mark anti-mark the-anti-mark env-wrap-set! env-wrap env-top-ribcage-set! env-top-ribcage env? make-env ##type-2-env import-interface-new-marks-set! import-interface-new-marks import-interface-interface-set! import-interface-interface import-interface? make-import-interface ##type-2-import-interface set-top-ribcage-mutable?! top-ribcage-mutable? set-top-ribcage-key! top-ribcage-key top-ribcage? set-bs-top-ribcage-mutable?! bs-top-ribcage-mutable? set-bs-top-ribcage-key! bs-top-ribcage-key bs-top-ribcage? make-top-ribcage set-ribcage-labels! ribcage-labels set-ribcage-marks! ribcage-marks set-ribcage-symnames! ribcage-symnames ribcage? set-bs-ribcage-labels! bs-ribcage-labels set-bs-ribcage-marks! bs-ribcage-marks set-bs-ribcage-symnames! bs-ribcage-symnames bs-ribcage? make-ribcage gen-labels label? gen-label set-indirect-label! get-indirect-label indirect-label? gen-indirect-label anon only-top-marked? top-marked? tmp-wrap top-wrap empty-wrap wrap-subst wrap-marks make-wrap id-sym-name&marks id-subst id-marks id-sym-name id? nonsymbol-id? global-extend defer-or-eval-transformer make-transformer-binding lookup lookup* displaced-lexical-error displaced-lexical? extend-var-env* extend-env* extend-env null-env binding? set-binding-value! set-binding-type! binding-value binding-type make-binding sanitize-binding arg-check no-source unannotate self-evaluating? lexical-var? build-lexical-var build-top-module build-body build-letrec build-sequence build-data build-primref built-lambda? build-dsssl-lambda build-lambda build-revisit-only build-visit-only build-cte-install build-global-definition build-global-assignment build-global-reference build-lexical-assignment build-lexical-reference build-conditional build-application update-import-binding! get-import-binding read-only-binding? put-global-definition-hook get-global-definition-hook put-cte-hook define-top-level-value-hook local-eval-hook top-level-eval-hook syntax-object-wrap syntax-object-expression syntax-object? bs-syntax-wrap bs-syntax-expression bs-syntax? make-syntax-object noexpand let-values define-structure unless when) (#7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# ("m" . #11=(top)) #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# ("m" . #11#) #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7#) ("i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) . #12=(#structure(#structure(#1# ##type-2-E14B1CA5-AADF-4FF2-9EAA-70CCC11E5A91 top-ribcage 24 #f #(key 0 #f mutable? 0 #f)) *top* #t)))))) 'compile (if (%%literal-id=?369 %%x877 '#structure(#4# #(#5# load #6# 2492100) (#7# . #8#))) 'load (if (%%literal-id=?369 %%x877 '#structure(#4# #(#5# visit #6# 2492101) (#7# . #8#))) 'visit (if (%%literal-id=?369 %%x877 '#structure(#4# #(#5# revisit #6# 2492102) (#7# . #8#))) 'revisit (if (%%literal-id=?369 %%x877 '#structure(#4# #(#5# eval #6# 2492103) (#7# . #8#))) 'eval (syntax-error (%%wrap376 %%x877 %%w876) "invalid eval-when situation"))))))) %%when-list875))) (%%syntax-type379 (lambda (%%e878 %%r879 %%w880 %%ae881 %%rib882) (if (symbol? %%e878) ((lambda (%%n883) ((lambda (%%b884) ((lambda (%%type885) ((lambda () ((lambda (%%t886) (if (memv %%t886 '(macro macro!)) (%%syntax-type379 (%%chi-macro438 (%%binding-value200 %%b884) %%e878 %%r879 %%w880 %%ae881 %%rib882) %%r879 '(()) #f %%rib882) (values %%type885 (%%binding-value200 %%b884) %%e878 %%w880 %%ae881))) %%type885)))) (%%binding-type199 %%b884))) (%%lookup219 %%n883 %%r879))) (%%id-var-name367 %%e878 %%w880)) (if (pair? %%e878) ((lambda (%%first887) (if (%%id?224 %%first887) ((lambda (%%n888) ((lambda (%%b889) ((lambda (%%type890) ((lambda () ((lambda (%%t891) (if (memv %%t891 '(lexical)) (values 'lexical-call (%%binding-value200 %%b889) %%e878 %%w880 %%ae881) (if (memv %%t891 '(macro macro!)) (%%syntax-type379 (%%chi-macro438 (%%binding-value200 %%b889) %%e878 %%r879 %%w880 %%ae881 %%rib882) %%r879 '(()) #f %%rib882) (if (memv %%t891 '(core)) (values %%type890 (%%binding-value200 %%b889) %%e878 %%w880 %%ae881) (if (memv %%t891 '(begin ##begin)) (values 'begin-form #f %%e878 %%w880 %%ae881) (if (memv %%t891 '(alias)) (values 'alias-form #f %%e878 %%w880 %%ae881) (if (memv %%t891 '(define)) (values 'define-form #f %%e878 %%w880 %%ae881) (if (memv %%t891 '(define-syntax)) (values 'define-syntax-form #f %%e878 %%w880 %%ae881) (if (memv %%t891 '(set!)) (%%chi-set!437 %%e878 %%r879 %%w880 %%ae881 %%rib882) (if (memv %%t891 '($module-key)) (values '$module-form #f %%e878 %%w880 %%ae881) (if (memv %%t891 '($import)) (values '$import-form #f %%e878 %%w880 %%ae881) (if (memv %%t891 '(eval-when)) (values 'eval-when-form #f %%e878 %%w880 %%ae881) (if (memv %%t891 '(meta)) (values 'meta-form #f %%e878 %%w880 %%ae881) (if (memv %%t891 '(local-syntax)) (values 'local-syntax-form (%%binding-value200 %%b889) %%e878 %%w880 %%ae881) (values 'call #f %%e878 %%w880 %%ae881))))))))))))))) %%type890)))) (%%binding-type199 %%b889))) (%%lookup219 %%n888 %%r879))) (%%id-var-name367 %%first887 %%w880)) (values 'call #f %%e878 %%w880 %%ae881))) (car %%e878)) (if (%%syntax-object?40 %%e878) (%%syntax-type379 (%%syntax-object-expression41 %%e878) %%r879 (%%join-wraps355 %%w880 (%%syntax-object-wrap42 %%e878)) #f %%rib882) (if (annotation? %%e878) (%%syntax-type379 (annotation-expression %%e878) %%r879 %%w880 %%e878 %%rib882) (if ((lambda (%%x892) (self-eval? %%x892)) %%e878) (values 'constant #f %%e878 %%w880 %%ae881) (values 'other #f %%e878 %%w880 %%ae881)))))))) (%%chi-top*380 (lambda (%%e893 %%r894 %%w895 %%ctem896 %%rtem897 %%meta?898 %%top-ribcage899) ((lambda (%%meta-residuals900) (letrec ((%%meta-residualize!901 (lambda (%%x902) (set! %%meta-residuals900 (cons %%x902 %%meta-residuals900))))) ((lambda (%%e903) (%%build-sequence153 #f (reverse (cons %%e903 %%meta-residuals900)))) (%%chi-top382 %%e893 %%r894 %%w895 %%ctem896 %%rtem897 %%meta?898 %%top-ribcage899 %%meta-residualize!901 #f)))) '()))) (%%chi-top-sequence381 (lambda (%%body904 %%r905 %%w906 %%ae907 %%ctem908 %%rtem909 %%meta?910 %%ribcage911 %%meta-residualize!912) (%%build-sequence153 %%ae907 ((letrec ((%%dobody913 (lambda (%%body914) (if (null? %%body914) '() ((lambda (%%first915) (cons %%first915 (%%dobody913 (cdr %%body914)))) (%%chi-top382 (car %%body914) %%r905 %%w906 %%ctem908 %%rtem909 %%meta?910 %%ribcage911 %%meta-residualize!912 #f)))))) %%dobody913) %%body904)))) (%%chi-top382 (lambda (%%e916 %%r917 %%w918 %%ctem919 %%rtem920 %%meta?921 %%top-ribcage922 %%meta-residualize!923 %%meta-seen?924) (call-with-values (lambda () (%%syntax-type379 %%e916 %%r917 %%w918 #f %%top-ribcage922)) (lambda (%%type925 %%value926 %%e927 %%w928 %%ae929) ((lambda (%%t930) (if (memv %%t930 '(begin-form)) ((lambda (%%forms931) (if (null? %%forms931) (%%chi-void462) (%%chi-top-sequence381 %%forms931 %%r917 %%w928 %%ae929 %%ctem919 %%rtem920 %%meta?921 %%top-ribcage922 %%meta-residualize!923))) (%%parse-begin451 %%e927 %%w928 %%ae929 #t)) (if (memv %%t930 '(local-syntax-form)) (call-with-values (lambda () (%%chi-local-syntax461 %%value926 %%e927 %%r917 %%r917 %%w928 %%ae929)) (lambda (%%forms932 %%r933 %%mr934 %%w935 %%ae936) (%%chi-top-sequence381 %%forms932 %%r933 %%w935 %%ae936 %%ctem919 %%rtem920 %%meta?921 %%top-ribcage922 %%meta-residualize!923))) (if (memv %%t930 '(eval-when-form)) (call-with-values (lambda () (%%parse-eval-when449 %%e927 %%w928 %%ae929)) (lambda (%%when-list937 %%forms938) ((lambda (%%ctem939 %%rtem940) (if (if (null? %%ctem939) (null? %%rtem940) #f) (%%chi-void462) (%%chi-top-sequence381 %%forms938 %%r917 %%w928 %%ae929 %%ctem939 %%rtem940 %%meta?921 %%top-ribcage922 %%meta-residualize!923))) (%%update-mode-set426 %%when-list937 %%ctem919) (%%update-mode-set426 %%when-list937 %%rtem920)))) (if (memv %%t930 '(meta-form)) (%%chi-top382 (%%parse-meta448 %%e927 %%w928 %%ae929) %%r917 %%w928 %%ctem919 %%rtem920 #t %%top-ribcage922 %%meta-residualize!923 #t) (if (memv %%t930 '(define-syntax-form)) (call-with-values (lambda () (%%parse-define-syntax447 %%e927 %%w928 %%ae929)) (lambda (%%id941 %%rhs942 %%w943) ((lambda (%%id944) (begin (if (%%displaced-lexical?216 %%id944 %%r917) (%%displaced-lexical-error217 %%id944) (void)) (if (not (%%top-ribcage-mutable?308 %%top-ribcage922)) (syntax-error (%%source-wrap377 %%e927 %%w943 %%ae929) "invalid definition in read-only environment") (void)) ((lambda (%%sym945) (call-with-values (lambda () (%%top-id-bound-var-name362 %%sym945 (%%wrap-marks234 (%%syntax-object-wrap42 %%id944)) %%top-ribcage922)) (lambda (%%valsym946 %%bound-id947) (begin (if (not (eq? (%%id-var-name367 %%id944 '(())) %%valsym946)) (syntax-error (%%source-wrap377 %%e927 %%w943 %%ae929) "definition not permitted") (void)) (if (%%read-only-binding?49 %%valsym946) (syntax-error (%%source-wrap377 %%e927 %%w943 %%ae929) "invalid definition of read-only identifier") (void)) (%%ct-eval/residualize2429 %%ctem919 (lambda () (build-source #f (list (build-source #f (list (build-source #f '$sc-put-cte))) (build-source #f (list (build-source #f 'quote) %%bound-id947)) (%%chi434 %%rhs942 %%r917 %%r917 %%w943 #t) (build-source #f (list (build-source #f 'quote) (%%top-ribcage-key306 %%top-ribcage922))))))))))) ((lambda (%%x948) ((lambda (%%e949) (if (annotation? %%e949) (annotation-expression %%e949) %%e949)) (if (%%syntax-object?40 %%x948) (%%syntax-object-expression41 %%x948) %%x948))) %%id944)))) (%%wrap376 %%id941 %%w943)))) (if (memv %%t930 '(define-form)) (call-with-values (lambda () (%%parse-define446 %%e927 %%w928 %%ae929)) (lambda (%%id950 %%rhs951 %%w952) ((lambda (%%id953) (begin (if (%%displaced-lexical?216 %%id953 %%r917) (%%displaced-lexical-error217 %%id953) (void)) (if (not (%%top-ribcage-mutable?308 %%top-ribcage922)) (syntax-error (%%source-wrap377 %%e927 %%w952 %%ae929) "invalid definition in read-only environment") (void)) ((lambda (%%sym954) (call-with-values (lambda () (%%top-id-bound-var-name362 %%sym954 (%%wrap-marks234 (%%syntax-object-wrap42 %%id953)) %%top-ribcage922)) (lambda (%%valsym955 %%bound-id956) (begin (if (not (eq? (%%id-var-name367 %%id953 '(())) %%valsym955)) (syntax-error (%%source-wrap377 %%e927 %%w952 %%ae929) "definition not permitted") (void)) (if (%%read-only-binding?49 %%valsym955) (syntax-error (%%source-wrap377 %%e927 %%w952 %%ae929) "invalid definition of read-only identifier") (void)) (if %%meta?921 (%%ct-eval/residualize2429 %%ctem919 (lambda () (%%build-sequence153 #f (list (build-source #f (list (build-source #f (list (build-source #f '$sc-put-cte))) (build-source #f (list (build-source #f 'quote) %%bound-id956)) ((lambda (%%x957) (if (self-eval? (cons 'meta-variable %%valsym955)) %%x957 (build-source #f (list (build-source #f 'quote) %%x957)))) (attach-source #f (cons 'meta-variable %%valsym955))) (build-source #f (list (build-source #f 'quote) (%%top-ribcage-key306 %%top-ribcage922))))) (build-source %%ae929 (list (build-source %%ae929 'define) %%valsym955 (%%chi434 %%rhs951 %%r917 %%r917 %%w952 #t))))))) ((lambda (%%x958) (%%build-sequence153 #f (list %%x958 (%%rt-eval/residualize428 %%rtem920 (lambda () (build-source %%ae929 (list (build-source %%ae929 'define) %%valsym955 (%%chi434 %%rhs951 %%r917 %%r917 %%w952 #f)))))))) (%%ct-eval/residualize2429 %%ctem919 (lambda () (build-source #f (list (build-source #f (list (build-source #f '$sc-put-cte))) (build-source #f (list (build-source #f 'quote) %%bound-id956)) ((lambda (%%x959) (if (self-eval? (cons 'global %%valsym955)) %%x959 (build-source #f (list (build-source #f 'quote) %%x959)))) (attach-source #f (cons 'global %%valsym955))) (build-source #f (list (build-source #f 'quote) (%%top-ribcage-key306 %%top-ribcage922))))))))))))) ((lambda (%%x960) ((lambda (%%e961) (if (annotation? %%e961) (annotation-expression %%e961) %%e961)) (if (%%syntax-object?40 %%x960) (%%syntax-object-expression41 %%x960) %%x960))) %%id953)))) (%%wrap376 %%id950 %%w952)))) (if (memv %%t930 '($module-form)) ((lambda (%%ribcage962) (call-with-values (lambda () (%%parse-module444 %%e927 %%w928 %%ae929 (%%make-wrap233 (%%wrap-marks234 %%w928) (cons %%ribcage962 (%%wrap-subst235 %%w928))))) (lambda (%%orig963 %%id964 %%exports965 %%forms966) (begin (if (%%displaced-lexical?216 %%id964 %%r917) (%%displaced-lexical-error217 (%%wrap376 %%id964 %%w928)) (void)) (if (not (%%top-ribcage-mutable?308 %%top-ribcage922)) (syntax-error %%orig963 "invalid definition in read-only environment") (void)) (%%chi-top-module418 %%orig963 %%r917 %%r917 %%top-ribcage922 %%ribcage962 %%ctem919 %%rtem920 %%meta?921 %%id964 %%exports965 %%forms966 %%meta-residualize!923))))) (%%make-ribcage284 '() '() '())) (if (memv %%t930 '($import-form)) (call-with-values (lambda () (%%parse-import445 %%e927 %%w928 %%ae929)) (lambda (%%orig967 %%only?968 %%mid969) (begin (if (not (%%top-ribcage-mutable?308 %%top-ribcage922)) (syntax-error %%orig967 "invalid definition in read-only environment") (void)) (%%ct-eval/residualize2429 %%ctem919 (lambda () ((letrec ((%%retry970 (lambda (%%binding971) ((lambda (%%t972) (if (memv %%t972 '($module)) (begin ($update-module %%mid969 %%ctem919 %%rtem920) (%%do-top-import425 %%only?968 %%top-ribcage922 %%mid969 (%%interface-token391 (%%binding-value200 %%binding971)))) (if (memv %%t972 '(displaced-lexical)) (%%displaced-lexical-error217 %%mid969) ((lambda (%%t973) (if (memv %%t973 '(success)) (%%retry970 (%%lookup219 (%%id-var-name367 %%mid969 '(())) '())) (if (memv %%t973 '(ignore)) ((lambda (%%x974) (if (self-eval? (void)) %%x974 (build-source #f (list (build-source #f 'quote) %%x974)))) (attach-source #f (void))) (if (memv %%t973 '(not-found)) (syntax-error %%mid969 "unknown module") (void))))) ($load-module %%mid969 %%ctem919 %%rtem920))))) (%%binding-type199 %%binding971))))) %%retry970) (%%lookup219 (%%id-var-name367 %%mid969 '(())) '()))))))) (if (memv %%t930 '(alias-form)) (call-with-values (lambda () (%%parse-alias450 %%e927 %%w928 %%ae929)) (lambda (%%new-id975 %%old-id976) ((lambda (%%new-id977) (begin (if (%%displaced-lexical?216 %%new-id977 %%r917) (%%displaced-lexical-error217 %%new-id977) (void)) (if (not (%%top-ribcage-mutable?308 %%top-ribcage922)) (syntax-error (%%source-wrap377 %%e927 %%w928 %%ae929) "invalid definition in read-only environment") (void)) ((lambda (%%sym978) (call-with-values (lambda () (%%top-id-bound-var-name362 %%sym978 (%%wrap-marks234 (%%syntax-object-wrap42 %%new-id977)) %%top-ribcage922)) (lambda (%%valsym979 %%bound-id980) (begin (if (not (eq? (%%id-var-name367 %%new-id977 '(())) %%valsym979)) (syntax-error (%%source-wrap377 %%e927 %%w928 %%ae929) "definition not permitted") (void)) (if (%%read-only-binding?49 %%valsym979) (syntax-error (%%source-wrap377 %%e927 %%w928 %%ae929) "invalid definition of read-only identifier") (void)) (%%ct-eval/residualize2429 %%ctem919 (lambda () (build-source #f (list (build-source #f (list (build-source #f '$sc-put-cte))) (build-source #f (list (build-source #f 'quote) (%%make-resolved-id351 %%sym978 (%%wrap-marks234 (%%syntax-object-wrap42 %%new-id977)) (%%id-var-name367 %%old-id976 %%w928)))) ((lambda (%%x981) (if (self-eval? '(do-alias . #f)) %%x981 (build-source #f (list (build-source #f 'quote) %%x981)))) (attach-source #f '(do-alias . #f))) (build-source #f (list (build-source #f 'quote) (%%top-ribcage-key306 %%top-ribcage922))))))))))) ((lambda (%%x982) ((lambda (%%e983) (if (annotation? %%e983) (annotation-expression %%e983) %%e983)) (if (%%syntax-object?40 %%x982) (%%syntax-object-expression41 %%x982) %%x982))) %%new-id977)))) (%%wrap376 %%new-id975 %%w928)))) (begin (if %%meta-seen?924 (syntax-error (%%source-wrap377 %%e927 %%w928 %%ae929) "invalid meta definition") (void)) (if %%meta?921 ((lambda (%%x984) (begin (%%top-level-eval-hook43 %%x984) (%%ct-eval/residualize3430 %%ctem919 void (lambda () %%x984)))) (%%chi-expr435 %%type925 %%value926 %%e927 %%r917 %%r917 %%w928 %%ae929 #t)) (%%rt-eval/residualize428 %%rtem920 (lambda () (%%chi-expr435 %%type925 %%value926 %%e927 %%r917 %%r917 %%w928 %%ae929 #f))))))))))))))) %%type925))))) (%%flatten-exports383 (lambda (%%exports985) ((letrec ((%%loop986 (lambda (%%exports987 %%ls988) (if (null? %%exports987) %%ls988 (%%loop986 (cdr %%exports987) (if (pair? (car %%exports987)) (%%loop986 (car %%exports987) %%ls988) (cons (car %%exports987) %%ls988))))))) %%loop986) %%exports985 '()))) (%%##type-3-interface384 (((lambda () (begin (##declare (extended-bindings)) ##structure))) ##type-type (((lambda () (begin (##declare (extended-bindings)) ##make-uninterned-symbol))) "##type-3-interface") 'interface 8 #f '#(marks 0 #f exports 0 #f token 0 #f))) (%%make-interface385 (lambda (%%p1989 %%p2990 %%p3991) (begin (##declare (extended-bindings)) (##structure %%##type-3-interface384 %%p1989 %%p2990 %%p3991)))) (%%interface?386 (lambda (%%obj992) (begin (##declare (extended-bindings)) (##structure-direct-instance-of? %%obj992 ((lambda () (begin (##declare (extended-bindings) (not safe)) (##type-id %%##type-3-interface384)))))))) (%%interface-marks387 (lambda (%%obj993) (((lambda () (begin (##declare (extended-bindings)) ##direct-structure-ref))) %%obj993 1 %%##type-3-interface384 %%interface-marks387))) (%%interface-marks-set!388 (lambda (%%obj994 %%val995) (((lambda () (begin (##declare (extended-bindings)) ##direct-structure-set!))) %%obj994 %%val995 1 %%##type-3-interface384 %%interface-marks-set!388))) (%%interface-exports389 (lambda (%%obj996) (((lambda () (begin (##declare (extended-bindings)) ##direct-structure-ref))) %%obj996 2 %%##type-3-interface384 %%interface-exports389))) (%%interface-exports-set!390 (lambda (%%obj997 %%val998) (((lambda () (begin (##declare (extended-bindings)) ##direct-structure-set!))) %%obj997 %%val998 2 %%##type-3-interface384 %%interface-exports-set!390))) (%%interface-token391 (lambda (%%obj999) (((lambda () (begin (##declare (extended-bindings)) ##direct-structure-ref))) %%obj999 3 %%##type-3-interface384 %%interface-token391))) (%%interface-token-set!392 (lambda (%%obj1000 %%val1001) (((lambda () (begin (##declare (extended-bindings)) ##direct-structure-set!))) %%obj1000 %%val1001 3 %%##type-3-interface384 %%interface-token-set!392))) (%%make-unresolved-interface393 (lambda (%%mid1002 %%exports1003) (%%make-interface385 (%%wrap-marks234 (%%syntax-object-wrap42 %%mid1002)) (list->vector (map (lambda (%%x1004) (if (pair? %%x1004) (car %%x1004) %%x1004)) %%exports1003)) #f))) (%%make-resolved-interface394 (lambda (%%mid1005 %%exports1006 %%token1007) (%%make-interface385 (%%wrap-marks234 (%%syntax-object-wrap42 %%mid1005)) (list->vector (map (lambda (%%x1008) (%%id->resolved-id352 (if (pair? %%x1008) (car %%x1008) %%x1008))) %%exports1006)) %%token1007))) (%%##type-6-module-binding395 (((lambda () (begin (##declare (extended-bindings)) ##structure))) ##type-type (((lambda () (begin (##declare (extended-bindings)) ##make-uninterned-symbol))) "##type-6-module-binding") 'module-binding 8 #f '#(type 0 #f id 0 #f label 0 #f imps 0 #f val 0 #f exported 0 #f))) (%%make-module-binding396 (lambda (%%p11009 %%p21010 %%p31011 %%p41012 %%p51013 %%p61014) (begin (##declare (extended-bindings)) (##structure %%##type-6-module-binding395 %%p11009 %%p21010 %%p31011 %%p41012 %%p51013 %%p61014)))) (%%module-binding?397 (lambda (%%obj1015) (begin (##declare (extended-bindings)) (##structure-direct-instance-of? %%obj1015 ((lambda () (begin (##declare (extended-bindings) (not safe)) (##type-id %%##type-6-module-binding395)))))))) (%%module-binding-type398 (lambda (%%obj1016) (((lambda () (begin (##declare (extended-bindings)) ##direct-structure-ref))) %%obj1016 1 %%##type-6-module-binding395 %%module-binding-type398))) (%%module-binding-type-set!399 (lambda (%%obj1017 %%val1018) (((lambda () (begin (##declare (extended-bindings)) ##direct-structure-set!))) %%obj1017 %%val1018 1 %%##type-6-module-binding395 %%module-binding-type-set!399))) (%%module-binding-id400 (lambda (%%obj1019) (((lambda () (begin (##declare (extended-bindings)) ##direct-structure-ref))) %%obj1019 2 %%##type-6-module-binding395 %%module-binding-id400))) (%%module-binding-id-set!401 (lambda (%%obj1020 %%val1021) (((lambda () (begin (##declare (extended-bindings)) ##direct-structure-set!))) %%obj1020 %%val1021 2 %%##type-6-module-binding395 %%module-binding-id-set!401))) (%%module-binding-label402 (lambda (%%obj1022) (((lambda () (begin (##declare (extended-bindings)) ##direct-structure-ref))) %%obj1022 3 %%##type-6-module-binding395 %%module-binding-label402))) (%%module-binding-label-set!403 (lambda (%%obj1023 %%val1024) (((lambda () (begin (##declare (extended-bindings)) ##direct-structure-set!))) %%obj1023 %%val1024 3 %%##type-6-module-binding395 %%module-binding-label-set!403))) (%%module-binding-imps404 (lambda (%%obj1025) (((lambda () (begin (##declare (extended-bindings)) ##direct-structure-ref))) %%obj1025 4 %%##type-6-module-binding395 %%module-binding-imps404))) (%%module-binding-imps-set!405 (lambda (%%obj1026 %%val1027) (((lambda () (begin (##declare (extended-bindings)) ##direct-structure-set!))) %%obj1026 %%val1027 4 %%##type-6-module-binding395 %%module-binding-imps-set!405))) (%%module-binding-val406 (lambda (%%obj1028) (((lambda () (begin (##declare (extended-bindings)) ##direct-structure-ref))) %%obj1028 5 %%##type-6-module-binding395 %%module-binding-val406))) (%%module-binding-val-set!407 (lambda (%%obj1029 %%val1030) (((lambda () (begin (##declare (extended-bindings)) ##direct-structure-set!))) %%obj1029 %%val1030 5 %%##type-6-module-binding395 %%module-binding-val-set!407))) (%%module-binding-exported408 (lambda (%%obj1031) (((lambda () (begin (##declare (extended-bindings)) ##direct-structure-ref))) %%obj1031 6 %%##type-6-module-binding395 %%module-binding-exported408))) (%%set-module-binding-exported!409 (lambda (%%obj1032 %%val1033) (((lambda () (begin (##declare (extended-bindings)) ##direct-structure-set!))) %%obj1032 %%val1033 6 %%##type-6-module-binding395 %%set-module-binding-exported!409))) (%%create-module-binding410 (lambda (%%type1034 %%id1035 %%label1036 %%imps1037 %%val1038) (%%make-module-binding396 %%type1034 %%id1035 %%label1036 %%imps1037 %%val1038 #f))) (%%##type-2-frob411 (((lambda () (begin (##declare (extended-bindings)) ##structure))) ##type-type (((lambda () (begin (##declare (extended-bindings)) ##make-uninterned-symbol))) "##type-2-frob") 'frob 8 #f '#(e 0 #f meta? 0 #f))) (%%make-frob412 (lambda (%%p11039 %%p21040) (begin (##declare (extended-bindings)) (##structure %%##type-2-frob411 %%p11039 %%p21040)))) (%%frob?413 (lambda (%%obj1041) (begin (##declare (extended-bindings)) (##structure-direct-instance-of? %%obj1041 ((lambda () (begin (##declare (extended-bindings) (not safe)) (##type-id %%##type-2-frob411)))))))) (%%frob-e414 (lambda (%%obj1042) (((lambda () (begin (##declare (extended-bindings)) ##direct-structure-ref))) %%obj1042 1 %%##type-2-frob411 %%frob-e414))) (%%frob-e-set!415 (lambda (%%obj1043 %%val1044) (((lambda () (begin (##declare (extended-bindings)) ##direct-structure-set!))) %%obj1043 %%val1044 1 %%##type-2-frob411 %%frob-e-set!415))) (%%frob-meta?416 (lambda (%%obj1045) (((lambda () (begin (##declare (extended-bindings)) ##direct-structure-ref))) %%obj1045 2 %%##type-2-frob411 %%frob-meta?416))) (%%frob-meta?-set!417 (lambda (%%obj1046 %%val1047) (((lambda () (begin (##declare (extended-bindings)) ##direct-structure-set!))) %%obj1046 %%val1047 2 %%##type-2-frob411 %%frob-meta?-set!417))) (%%chi-top-module418 (lambda (%%orig1048 %%r1049 %%mr1050 %%top-ribcage1051 %%ribcage1052 %%ctem1053 %%rtem1054 %%meta?1055 %%id1056 %%exports1057 %%forms1058 %%meta-residualize!1059) ((lambda (%%fexports1060) (call-with-values (lambda () (%%chi-external422 %%ribcage1052 %%orig1048 (map (lambda (%%d1061) (%%make-frob412 %%d1061 %%meta?1055)) %%forms1058) %%r1049 %%mr1050 %%ctem1053 %%exports1057 %%fexports1060 %%meta-residualize!1059)) (lambda (%%r1062 %%mr1063 %%bindings1064 %%inits1065) ((letrec ((%%process-exports1066 (lambda (%%fexports1067 %%ctdefs1068) (if (null? %%fexports1067) ((letrec ((%%process-locals1069 (lambda (%%bs1070 %%r1071 %%dts1072 %%dvs1073 %%des1074) (if (null? %%bs1070) ((lambda (%%des1075 %%inits1076) (%%build-sequence153 #f (append (%%ctdefs1068) (list (%%ct-eval/residualize2429 %%ctem1053 (lambda () ((lambda (%%sym1077) ((lambda (%%token1078) ((lambda (%%b1079) ((lambda () (call-with-values (lambda () (%%top-id-bound-var-name362 %%sym1077 (%%wrap-marks234 (%%syntax-object-wrap42 %%id1056)) %%top-ribcage1051)) (lambda (%%valsym1080 %%bound-id1081) (begin (if (not (eq? (%%id-var-name367 %%id1056 '(())) %%valsym1080)) (syntax-error %%orig1048 "definition not permitted") (void)) (if (%%read-only-binding?49 %%valsym1080) (syntax-error %%orig1048 "invalid definition of read-only identifier") (void)) (build-source #f (list (build-source #f (list (build-source #f '$sc-put-cte))) (build-source #f (list (build-source #f 'quote) %%bound-id1081)) %%b1079 (build-source #f (list (build-source #f 'quote) (%%top-ribcage-key306 %%top-ribcage1051))))))))))) ((lambda (%%x1082) (if (self-eval? (cons '$module (%%make-resolved-interface394 %%id1056 %%exports1057 %%token1078))) %%x1082 (build-source #f (list (build-source #f 'quote) %%x1082)))) (attach-source #f (cons '$module (%%make-resolved-interface394 %%id1056 %%exports1057 %%token1078)))))) (($generate-id) %%sym1077))) ((lambda (%%x1083) ((lambda (%%e1084) (if (annotation? %%e1084) (annotation-expression %%e1084) %%e1084)) (if (%%syntax-object?40 %%x1083) (%%syntax-object-expression41 %%x1083) %%x1083))) %%id1056)))) (%%rt-eval/residualize428 %%rtem1054 (lambda () (%%build-top-module156 #f %%dts1072 %%dvs1073 %%des1075 (if (null? %%inits1076) (%%chi-void462) (%%build-sequence153 #f (append %%inits1076 (list (%%chi-void462)))))))))))) (%%chi-frobs431 %%des1074 %%r1071 %%mr1063 #f) (%%chi-frobs431 %%inits1065 %%r1071 %%mr1063 #f)) ((lambda (%%b1085 %%bs1086) ((lambda (%%t1087) ((lambda (%%t1088) (if (memv %%t1088 '(define-form)) ((lambda (%%label1089) (if (%%module-binding-exported408 %%b1085) ((lambda (%%var1090) (%%process-locals1069 %%bs1086 %%r1071 (cons 'global %%dts1072) (cons %%label1089 %%dvs1073) (cons (%%module-binding-val406 %%b1085) %%des1074))) (%%module-binding-id400 %%b1085)) ((lambda (%%var1091) (%%process-locals1069 %%bs1086 (%%extend-env213 %%label1089 (cons 'lexical %%var1091) %%r1071) (cons 'local %%dts1072) (cons %%var1091 %%dvs1073) (cons (%%module-binding-val406 %%b1085) %%des1074))) (%%gen-var467 (%%module-binding-id400 %%b1085))))) (%%get-indirect-label279 (%%module-binding-label402 %%b1085))) (if (memv %%t1088 '(ctdefine-form define-syntax-form $module-form alias-form)) (%%process-locals1069 %%bs1086 %%r1071 %%dts1072 %%dvs1073 %%des1074) (error "unexpected module binding type" %%t1087)))) (%%module-binding-type398 %%b1085))) (%%module-binding-type398 %%b1085))) (car %%bs1070) (cdr %%bs1070)))))) %%process-locals1069) %%bindings1064 %%r1062 '() '() '()) ((lambda (%%id1092 %%fexports1093) ((letrec ((%%loop1094 (lambda (%%bs1095) (if (null? %%bs1095) (%%process-exports1066 %%fexports1093 %%ctdefs1068) ((lambda (%%b1096 %%bs1097) (if (%%free-id=?368 (%%module-binding-id400 %%b1096) %%id1092) (if (%%module-binding-exported408 %%b1096) (%%process-exports1066 %%fexports1093 %%ctdefs1068) ((lambda (%%t1098) ((lambda (%%label1099) ((lambda (%%imps1100) ((lambda (%%fexports1101) ((lambda () (begin (%%set-module-binding-exported!409 %%b1096 #t) ((lambda (%%t1102) (if (memv %%t1102 '(define-form)) ((lambda (%%sym1103) (begin (%%set-indirect-label!280 %%label1099 %%sym1103) (%%process-exports1066 %%fexports1101 %%ctdefs1068))) (($generate-id) ((lambda (%%x1104) ((lambda (%%e1105) (if (annotation? %%e1105) (annotation-expression %%e1105) %%e1105)) (if (%%syntax-object?40 %%x1104) (%%syntax-object-expression41 %%x1104) %%x1104))) %%id1092))) (if (memv %%t1102 '(ctdefine-form)) ((lambda (%%b1106) (%%process-exports1066 %%fexports1101 (lambda () ((lambda (%%sym1107) (begin (%%set-indirect-label!280 %%label1099 %%sym1107) (cons (%%ct-eval/residualize3430 %%ctem1053 (lambda () (%%put-cte-hook46 %%sym1107 %%b1106)) (lambda () (build-source #f (list (build-source #f (list (build-source #f '$sc-put-cte))) (build-source #f (list (build-source #f 'quote) %%sym1107)) ((lambda (%%x1108) (if (self-eval? %%b1106) %%x1108 (build-source #f (list (build-source #f 'quote) %%x1108)))) (attach-source #f %%b1106)) (build-source #f (list (build-source #f 'quote) #f)))))) (%%ctdefs1068)))) (%%binding-value200 %%b1106))))) (%%module-binding-val406 %%b1096)) (if (memv %%t1102 '(define-syntax-form)) ((lambda (%%sym1109) (%%process-exports1066 %%fexports1101 (lambda () ((lambda (%%local-label1110) (begin (%%set-indirect-label!280 %%label1099 %%sym1109) (cons (%%ct-eval/residualize3430 %%ctem1053 (lambda () (%%put-cte-hook46 %%sym1109 (car (%%module-binding-val406 %%b1096)))) (lambda () (build-source #f (list (build-source #f (list (build-source #f '$sc-put-cte))) (build-source #f (list (build-source #f 'quote) %%sym1109)) (cdr (%%module-binding-val406 %%b1096)) (build-source #f (list (build-source #f 'quote) #f)))))) (%%ctdefs1068)))) (%%get-indirect-label279 %%label1099))))) (($generate-id) ((lambda (%%x1111) ((lambda (%%e1112) (if (annotation? %%e1112) (annotation-expression %%e1112) %%e1112)) (if (%%syntax-object?40 %%x1111) (%%syntax-object-expression41 %%x1111) %%x1111))) %%id1092))) (if (memv %%t1102 '($module-form)) ((lambda (%%sym1113 %%exports1114) (%%process-exports1066 (append (%%flatten-exports383 %%exports1114) %%fexports1101) (lambda () (begin (%%set-indirect-label!280 %%label1099 %%sym1113) ((lambda (%%rest1115) ((lambda (%%x1116) (cons (%%ct-eval/residualize3430 %%ctem1053 (lambda () (%%put-cte-hook46 %%sym1113 %%x1116)) (lambda () (build-source #f (list (build-source #f (list (build-source #f '$sc-put-cte))) (build-source #f (list (build-source #f 'quote) %%sym1113)) ((lambda (%%x1117) (if (self-eval? %%x1116) %%x1117 (build-source #f (list (build-source #f 'quote) %%x1117)))) (attach-source #f %%x1116)) (build-source #f (list (build-source #f 'quote) #f)))))) %%rest1115)) (cons '$module (%%make-resolved-interface394 %%id1092 %%exports1114 %%sym1113)))) (%%ctdefs1068)))))) (($generate-id) ((lambda (%%x1118) ((lambda (%%e1119) (if (annotation? %%e1119) (annotation-expression %%e1119) %%e1119)) (if (%%syntax-object?40 %%x1118) (%%syntax-object-expression41 %%x1118) %%x1118))) %%id1092)) (%%module-binding-val406 %%b1096)) (if (memv %%t1102 '(alias-form)) (%%process-exports1066 %%fexports1101 (lambda () ((lambda (%%rest1120) (begin (if (%%indirect-label?275 %%label1099) (if (not (symbol? (%%get-indirect-label279 %%label1099))) (syntax-error (%%module-binding-id400 %%b1096) "unexported target of alias") (void)) (void)) %%rest1120)) (%%ctdefs1068)))) (error "unexpected module binding type" %%t1098))))))) %%t1098))))) (append %%imps1100 %%fexports1093))) (%%module-binding-imps404 %%b1096))) (%%module-binding-label402 %%b1096))) (%%module-binding-type398 %%b1096))) (%%loop1094 %%bs1097))) (car %%bs1095) (cdr %%bs1095)))))) %%loop1094) %%bindings1064)) (car %%fexports1067) (cdr %%fexports1067)))))) %%process-exports1066) %%fexports1060 (lambda () '()))))) (%%flatten-exports383 %%exports1057)))) (%%id-set-diff419 (lambda (%%exports1121 %%defs1122) (if (null? %%exports1121) '() (if (%%bound-id-member?375 (car %%exports1121) %%defs1122) (%%id-set-diff419 (cdr %%exports1121) %%defs1122) (cons (car %%exports1121) (%%id-set-diff419 (cdr %%exports1121) %%defs1122)))))) (%%check-module-exports420 (lambda (%%source-exp1123 %%fexports1124 %%ids1125) (letrec ((%%defined?1126 (lambda (%%e1127 %%ids1128) (ormap (lambda (%%x1129) (if (%%import-interface?312 %%x1129) ((lambda (%%x.iface1130 %%x.new-marks1131) ((lambda (%%t1132) (if %%t1132 ((lambda (%%token1133) (%%lookup-import-binding-name348 ((lambda (%%x1134) ((lambda (%%e1135) (if (annotation? %%e1135) (annotation-expression %%e1135) %%e1135)) (if (%%syntax-object?40 %%x1134) (%%syntax-object-expression41 %%x1134) %%x1134))) %%e1127) (%%id-marks230 %%e1127) %%token1133 %%x.new-marks1131)) %%t1132) ((lambda (%%v1136) ((letrec ((%%lp1137 (lambda (%%i1138) (if (fx>= %%i1138 0) ((lambda (%%t1139) (if %%t1139 %%t1139 (%%lp1137 (fx- %%i1138 1)))) ((lambda (%%id1140) (%%help-bound-id=?370 ((lambda (%%x1141) ((lambda (%%e1142) (if (annotation? %%e1142) (annotation-expression %%e1142) %%e1142)) (if (%%syntax-object?40 %%x1141) (%%syntax-object-expression41 %%x1141) %%x1141))) %%id1140) (%%join-marks356 %%x.new-marks1131 (%%id-marks230 %%id1140)) ((lambda (%%x1143) ((lambda (%%e1144) (if (annotation? %%e1144) (annotation-expression %%e1144) %%e1144)) (if (%%syntax-object?40 %%x1143) (%%syntax-object-expression41 %%x1143) %%x1143))) %%e1127) (%%id-marks230 %%e1127))) (vector-ref %%v1136 %%i1138))) #f)))) %%lp1137) (fx- (vector-length %%v1136) 1))) (%%interface-exports389 %%x.iface1130)))) (%%interface-token391 %%x.iface1130))) (%%import-interface-interface313 %%x1129) (%%import-interface-new-marks315 %%x1129)) (%%bound-id=?371 %%e1127 %%x1129))) %%ids1128)))) ((letrec ((%%loop1145 (lambda (%%fexports1146 %%missing1147) (if (null? %%fexports1146) (if (not (null? %%missing1147)) (syntax-error (car %%missing1147) (if (= (length %%missing1147) 1) "missing definition for export" "missing definition for multiple exports, including")) (void)) ((lambda (%%e1148 %%fexports1149) (if (%%defined?1126 %%e1148 %%ids1125) (%%loop1145 %%fexports1149 %%missing1147) (%%loop1145 %%fexports1149 (cons %%e1148 %%missing1147)))) (car %%fexports1146) (cdr %%fexports1146)))))) %%loop1145) %%fexports1124 '())))) (%%check-defined-ids421 (lambda (%%source-exp1150 %%ls1151) (letrec ((%%vfold1152 (lambda (%%v1155 %%p1156 %%cls1157) ((lambda (%%len1158) ((letrec ((%%lp1159 (lambda (%%i1160 %%cls1161) (if (fx= %%i1160 %%len1158) %%cls1161 (%%lp1159 (fx+ %%i1160 1) (%%p1156 (vector-ref %%v1155 %%i1160) %%cls1161)))))) %%lp1159) 0 %%cls1157)) (vector-length %%v1155)))) (%%conflicts1153 (lambda (%%x1162 %%y1163 %%cls1164) (if (%%import-interface?312 %%x1162) ((lambda (%%x.iface1165 %%x.new-marks1166) (if (%%import-interface?312 %%y1163) ((lambda (%%y.iface1167 %%y.new-marks1168) ((lambda (%%xe1169 %%ye1170) (if (fx> (vector-length %%xe1169) (vector-length %%ye1170)) (%%vfold1152 %%ye1170 (lambda (%%id1171 %%cls1172) (%%id-iface-conflicts1154 %%id1171 %%y.new-marks1168 %%x.iface1165 %%x.new-marks1166 %%cls1172)) %%cls1164) (%%vfold1152 %%xe1169 (lambda (%%id1173 %%cls1174) (%%id-iface-conflicts1154 %%id1173 %%x.new-marks1166 %%y.iface1167 %%y.new-marks1168 %%cls1174)) %%cls1164))) (%%interface-exports389 %%x.iface1165) (%%interface-exports389 %%y.iface1167))) (%%import-interface-interface313 %%y1163) (%%import-interface-new-marks315 %%y1163)) (%%id-iface-conflicts1154 %%y1163 '() %%x.iface1165 %%x.new-marks1166 %%cls1164))) (%%import-interface-interface313 %%x1162) (%%import-interface-new-marks315 %%x1162)) (if (%%import-interface?312 %%y1163) ((lambda (%%y.iface1175 %%y.new-marks1176) (%%id-iface-conflicts1154 %%x1162 '() %%y.iface1175 %%y.new-marks1176 %%cls1164)) (%%import-interface-interface313 %%y1163) (%%import-interface-new-marks315 %%y1163)) (if (%%bound-id=?371 %%x1162 %%y1163) (cons %%x1162 %%cls1164) %%cls1164))))) (%%id-iface-conflicts1154 (lambda (%%id1177 %%id.new-marks1178 %%iface1179 %%iface.new-marks1180 %%cls1181) ((lambda (%%id.sym1182 %%id.marks1183) ((lambda (%%t1184) (if %%t1184 ((lambda (%%token1185) (if (%%lookup-import-binding-name348 %%id.sym1182 %%id.marks1183 %%token1185 %%iface.new-marks1180) (cons %%id1177 %%cls1181) %%cls1181)) %%t1184) (%%vfold1152 (%%interface-exports389 %%iface1179) (lambda (%%*id1186 %%cls1187) ((lambda (%%*id.sym1188 %%*id.marks1189) (if (%%help-bound-id=?370 %%*id.sym1188 %%*id.marks1189 %%id.sym1182 %%id.marks1183) (cons %%*id1186 %%cls1187) %%cls1187)) ((lambda (%%x1190) ((lambda (%%e1191) (if (annotation? %%e1191) (annotation-expression %%e1191) %%e1191)) (if (%%syntax-object?40 %%x1190) (%%syntax-object-expression41 %%x1190) %%x1190))) %%*id1186) (%%join-marks356 %%iface.new-marks1180 (%%id-marks230 %%*id1186)))) %%cls1181))) (%%interface-token391 %%iface1179))) ((lambda (%%x1192) ((lambda (%%e1193) (if (annotation? %%e1193) (annotation-expression %%e1193) %%e1193)) (if (%%syntax-object?40 %%x1192) (%%syntax-object-expression41 %%x1192) %%x1192))) %%id1177) (%%join-marks356 %%id.new-marks1178 (%%id-marks230 %%id1177)))))) (if (not (null? %%ls1151)) ((letrec ((%%lp1194 (lambda (%%x1195 %%ls1196 %%cls1197) (if (null? %%ls1196) (if (not (null? %%cls1197)) ((lambda (%%cls1198) (syntax-error %%source-exp1150 "duplicate definition for " (symbol->string (car %%cls1198)) " in")) (syntax->datum %%cls1197)) (void)) ((letrec ((%%lp21199 (lambda (%%ls21200 %%cls1201) (if (null? %%ls21200) (%%lp1194 (car %%ls1196) (cdr %%ls1196) %%cls1201) (%%lp21199 (cdr %%ls21200) (%%conflicts1153 %%x1195 (car %%ls21200) %%cls1201)))))) %%lp21199) %%ls1196 %%cls1197))))) %%lp1194) (car %%ls1151) (cdr %%ls1151) '()) (void))))) (%%chi-external422 (lambda (%%ribcage1202 %%source-exp1203 %%body1204 %%r1205 %%mr1206 %%ctem1207 %%exports1208 %%fexports1209 %%meta-residualize!1210) (letrec ((%%return1211 (lambda (%%r1214 %%mr1215 %%bindings1216 %%ids1217 %%inits1218) (begin (%%check-defined-ids421 %%source-exp1203 %%ids1217) (%%check-module-exports420 %%source-exp1203 %%fexports1209 %%ids1217) (values %%r1214 %%mr1215 %%bindings1216 %%inits1218)))) (%%get-implicit-exports1212 (lambda (%%id1219) ((letrec ((%%f1220 (lambda (%%exports1221) (if (null? %%exports1221) '() (if (if (pair? (car %%exports1221)) (%%bound-id=?371 %%id1219 (caar %%exports1221)) #f) (%%flatten-exports383 (cdar %%exports1221)) (%%f1220 (cdr %%exports1221))))))) %%f1220) %%exports1208))) (%%update-imp-exports1213 (lambda (%%bindings1222 %%exports1223) ((lambda (%%exports1224) (map (lambda (%%b1225) ((lambda (%%id1226) (if (not (%%bound-id-member?375 %%id1226 %%exports1224)) %%b1225 (%%create-module-binding410 (%%module-binding-type398 %%b1225) %%id1226 (%%module-binding-label402 %%b1225) (append (%%get-implicit-exports1212 %%id1226) (%%module-binding-imps404 %%b1225)) (%%module-binding-val406 %%b1225)))) (%%module-binding-id400 %%b1225))) %%bindings1222)) (map (lambda (%%x1227) (if (pair? %%x1227) (car %%x1227) %%x1227)) %%exports1223))))) ((letrec ((%%parse1228 (lambda (%%body1229 %%r1230 %%mr1231 %%ids1232 %%bindings1233 %%inits1234 %%meta-seen?1235) (if (null? %%body1229) (%%return1211 %%r1230 %%mr1231 %%bindings1233 %%ids1232 %%inits1234) ((lambda (%%fr1236) ((lambda (%%e1237) ((lambda (%%meta?1238) ((lambda () (call-with-values (lambda () (%%syntax-type379 %%e1237 %%r1230 '(()) #f %%ribcage1202)) (lambda (%%type1239 %%value1240 %%e1241 %%w1242 %%ae1243) ((lambda (%%t1244) (if (memv %%t1244 '(define-form)) (call-with-values (lambda () (%%parse-define446 %%e1241 %%w1242 %%ae1243)) (lambda (%%id1245 %%rhs1246 %%w1247) ((lambda (%%id1248) ((lambda (%%label1249) ((lambda (%%imps1250) ((lambda () (begin (%%extend-ribcage!343 %%ribcage1202 %%id1248 %%label1249) (if %%meta?1238 ((lambda (%%sym1251) ((lambda (%%b1252) ((lambda () ((lambda (%%mr1253) ((lambda (%%exp1254) (begin (%%define-top-level-value-hook45 %%sym1251 (%%top-level-eval-hook43 %%exp1254)) (%%meta-residualize!1210 (%%ct-eval/residualize3430 %%ctem1207 void (lambda () (build-source #f (list (build-source #f 'define) %%sym1251 %%exp1254))))) (%%parse1228 (cdr %%body1229) %%r1230 %%mr1253 (cons %%id1248 %%ids1232) (cons (%%create-module-binding410 'ctdefine-form %%id1248 %%label1249 %%imps1250 %%b1252) %%bindings1233) %%inits1234 #f))) (%%chi434 %%rhs1246 %%mr1253 %%mr1253 %%w1247 #t))) (%%extend-env213 (%%get-indirect-label279 %%label1249) %%b1252 %%mr1231))))) (cons 'meta-variable %%sym1251))) (($generate-id) ((lambda (%%x1255) ((lambda (%%e1256) (if (annotation? %%e1256) (annotation-expression %%e1256) %%e1256)) (if (%%syntax-object?40 %%x1255) (%%syntax-object-expression41 %%x1255) %%x1255))) %%id1248))) (%%parse1228 (cdr %%body1229) %%r1230 %%mr1231 (cons %%id1248 %%ids1232) (cons (%%create-module-binding410 %%type1239 %%id1248 %%label1249 %%imps1250 (%%make-frob412 (%%wrap376 %%rhs1246 %%w1247) %%meta?1238)) %%bindings1233) %%inits1234 #f)))))) (%%get-implicit-exports1212 %%id1248))) (%%gen-indirect-label278))) (%%wrap376 %%id1245 %%w1247)))) (if (memv %%t1244 '(define-syntax-form)) (call-with-values (lambda () (%%parse-define-syntax447 %%e1241 %%w1242 %%ae1243)) (lambda (%%id1257 %%rhs1258 %%w1259) ((lambda (%%id1260) ((lambda (%%label1261) ((lambda (%%imps1262) ((lambda (%%exp1263) ((lambda () (begin (%%extend-ribcage!343 %%ribcage1202 %%id1260 %%label1261) ((lambda (%%l1264 %%b1265) (%%parse1228 (cdr %%body1229) (%%extend-env213 %%l1264 %%b1265 %%r1230) (%%extend-env213 %%l1264 %%b1265 %%mr1231) (cons %%id1260 %%ids1232) (cons (%%create-module-binding410 %%type1239 %%id1260 %%label1261 %%imps1262 (cons %%b1265 %%exp1263)) %%bindings1233) %%inits1234 #f)) (%%get-indirect-label279 %%label1261) (%%defer-or-eval-transformer221 %%top-level-eval-hook43 %%exp1263)))))) (%%chi434 %%rhs1258 %%mr1231 %%mr1231 %%w1259 #t))) (%%get-implicit-exports1212 %%id1260))) (%%gen-indirect-label278))) (%%wrap376 %%id1257 %%w1259)))) (if (memv %%t1244 '($module-form)) ((lambda (%%*ribcage1266) ((lambda (%%*w1267) ((lambda () (call-with-values (lambda () (%%parse-module444 %%e1241 %%w1242 %%ae1243 %%*w1267)) (lambda (%%orig1268 %%id1269 %%*exports1270 %%forms1271) (call-with-values (lambda () (%%chi-external422 %%*ribcage1266 %%orig1268 (map (lambda (%%d1272) (%%make-frob412 %%d1272 %%meta?1238)) %%forms1271) %%r1230 %%mr1231 %%ctem1207 %%*exports1270 (%%flatten-exports383 %%*exports1270) %%meta-residualize!1210)) (lambda (%%r1273 %%mr1274 %%*bindings1275 %%*inits1276) ((lambda (%%iface1277 %%bindings1278 %%inits1279 %%label1280 %%imps1281) (begin (%%extend-ribcage!343 %%ribcage1202 %%id1269 %%label1280) ((lambda (%%l1282 %%b1283) (%%parse1228 (cdr %%body1229) (%%extend-env213 %%l1282 %%b1283 %%r1273) (%%extend-env213 %%l1282 %%b1283 %%mr1274) (cons %%id1269 %%ids1232) (cons (%%create-module-binding410 %%type1239 %%id1269 %%label1280 %%imps1281 %%*exports1270) %%bindings1278) %%inits1279 #f)) (%%get-indirect-label279 %%label1280) (cons '$module %%iface1277)))) (%%make-unresolved-interface393 %%id1269 %%*exports1270) (append %%*bindings1275 %%bindings1233) (append %%inits1234 %%*inits1276) (%%gen-indirect-label278) (%%get-implicit-exports1212 %%id1269))))))))) (%%make-wrap233 (%%wrap-marks234 %%w1242) (cons %%*ribcage1266 (%%wrap-subst235 %%w1242))))) (%%make-ribcage284 '() '() '())) (if (memv %%t1244 '($import-form)) (call-with-values (lambda () (%%parse-import445 %%e1241 %%w1242 %%ae1243)) (lambda (%%orig1284 %%only?1285 %%mid1286) ((lambda (%%mlabel1287) ((lambda (%%binding1288) ((lambda (%%t1289) (if (memv %%t1289 '($module)) ((lambda (%%iface1290) ((lambda (%%import-iface1291) ((lambda () (begin (if %%only?1285 (%%extend-ribcage-barrier!345 %%ribcage1202 %%mid1286) (void)) (%%do-import!443 %%import-iface1291 %%ribcage1202) (%%parse1228 (cdr %%body1229) %%r1230 %%mr1231 (cons %%import-iface1291 %%ids1232) (%%update-imp-exports1213 %%bindings1233 (vector->list (%%interface-exports389 %%iface1290))) %%inits1234 #f))))) (%%make-import-interface311 %%iface1290 (%%import-mark-delta441 %%mid1286 %%iface1290)))) (%%binding-value200 %%binding1288)) (if (memv %%t1289 '(displaced-lexical)) (%%displaced-lexical-error217 %%mid1286) (syntax-error %%mid1286 "unknown module")))) (%%binding-type199 %%binding1288))) (%%lookup219 %%mlabel1287 %%r1230))) (%%id-var-name367 %%mid1286 '(()))))) (if (memv %%t1244 '(alias-form)) (call-with-values (lambda () (%%parse-alias450 %%e1241 %%w1242 %%ae1243)) (lambda (%%new-id1292 %%old-id1293) ((lambda (%%new-id1294) ((lambda (%%label1295) ((lambda (%%imps1296) ((lambda () (begin (%%extend-ribcage!343 %%ribcage1202 %%new-id1294 %%label1295) (%%parse1228 (cdr %%body1229) %%r1230 %%mr1231 (cons %%new-id1294 %%ids1232) (cons (%%create-module-binding410 %%type1239 %%new-id1294 %%label1295 %%imps1296 #f) %%bindings1233) %%inits1234 #f))))) (%%get-implicit-exports1212 %%new-id1294))) (%%id-var-name-loc366 %%old-id1293 %%w1242))) (%%wrap376 %%new-id1292 %%w1242)))) (if (memv %%t1244 '(begin-form)) (%%parse1228 ((letrec ((%%f1297 (lambda (%%forms1298) (if (null? %%forms1298) (cdr %%body1229) (cons (%%make-frob412 (%%wrap376 (car %%forms1298) %%w1242) %%meta?1238) (%%f1297 (cdr %%forms1298))))))) %%f1297) (%%parse-begin451 %%e1241 %%w1242 %%ae1243 #t)) %%r1230 %%mr1231 %%ids1232 %%bindings1233 %%inits1234 #f) (if (memv %%t1244 '(eval-when-form)) (call-with-values (lambda () (%%parse-eval-when449 %%e1241 %%w1242 %%ae1243)) (lambda (%%when-list1299 %%forms1300) (%%parse1228 (if (memq 'eval %%when-list1299) ((letrec ((%%f1301 (lambda (%%forms1302) (if (null? %%forms1302) (cdr %%body1229) (cons (%%make-frob412 (%%wrap376 (car %%forms1302) %%w1242) %%meta?1238) (%%f1301 (cdr %%forms1302))))))) %%f1301) %%forms1300) (cdr %%body1229)) %%r1230 %%mr1231 %%ids1232 %%bindings1233 %%inits1234 #f))) (if (memv %%t1244 '(meta-form)) (%%parse1228 (cons (%%make-frob412 (%%wrap376 (%%parse-meta448 %%e1241 %%w1242 %%ae1243) %%w1242) #t) (cdr %%body1229)) %%r1230 %%mr1231 %%ids1232 %%bindings1233 %%inits1234 #t) (if (memv %%t1244 '(local-syntax-form)) (call-with-values (lambda () (%%chi-local-syntax461 %%value1240 %%e1241 %%r1230 %%mr1231 %%w1242 %%ae1243)) (lambda (%%forms1303 %%r1304 %%mr1305 %%w1306 %%ae1307) (%%parse1228 ((letrec ((%%f1308 (lambda (%%forms1309) (if (null? %%forms1309) (cdr %%body1229) (cons (%%make-frob412 (%%wrap376 (car %%forms1309) %%w1306) %%meta?1238) (%%f1308 (cdr %%forms1309))))))) %%f1308) %%forms1303) %%r1304 %%mr1305 %%ids1232 %%bindings1233 %%inits1234 #f))) (begin (if %%meta-seen?1235 (syntax-error (%%source-wrap377 %%e1241 %%w1242 %%ae1243) "invalid meta definition") (void)) ((letrec ((%%f1310 (lambda (%%body1311) (if ((lambda (%%t1312) (if %%t1312 %%t1312 (not (%%frob-meta?416 (car %%body1311))))) (null? %%body1311)) (%%return1211 %%r1230 %%mr1231 %%bindings1233 %%ids1232 (append %%inits1234 %%body1311)) (begin ((lambda (%%x1313) (begin (%%top-level-eval-hook43 %%x1313) (%%meta-residualize!1210 (%%ct-eval/residualize3430 %%ctem1207 void (lambda () %%x1313))))) (%%chi-meta-frob432 (car %%body1311) %%mr1231)) (%%f1310 (cdr %%body1311))))))) %%f1310) (cons (%%make-frob412 (%%source-wrap377 %%e1241 %%w1242 %%ae1243) %%meta?1238) (cdr %%body1229)))))))))))))) %%type1239)))))) (%%frob-meta?416 %%fr1236))) (%%frob-e414 %%fr1236))) (car %%body1229)))))) %%parse1228) %%body1204 %%r1205 %%mr1206 '() '() '() #f)))) (%%vmap423 (lambda (%%fn1314 %%v1315) ((letrec ((%%do1316 (lambda (%%i1317 %%ls1318) (if (fx< %%i1317 0) %%ls1318 (%%do1316 (fx- %%i1317 1) (cons (%%fn1314 (vector-ref %%v1315 %%i1317)) %%ls1318)))))) %%do1316) (fx- (vector-length %%v1315) 1) '()))) (%%vfor-each424 (lambda (%%fn1319 %%v1320) ((lambda (%%len1321) ((letrec ((%%do1322 (lambda (%%i1323) (if (not (fx= %%i1323 %%len1321)) (begin (%%fn1319 (vector-ref %%v1320 %%i1323)) (%%do1322 (fx+ %%i1323 1))) (void))))) %%do1322) 0)) (vector-length %%v1320)))) (%%do-top-import425 (lambda (%%import-only?1324 %%top-ribcage1325 %%mid1326 %%token1327) (build-source #f (list (build-source #f (list (build-source #f '$sc-put-cte))) (build-source #f (list (build-source #f 'quote) %%mid1326)) ((lambda (%%x1328) (if (self-eval? (cons 'do-import %%token1327)) %%x1328 (build-source #f (list (build-source #f 'quote) %%x1328)))) (attach-source #f (cons 'do-import %%token1327))) (build-source #f (list (build-source #f 'quote) (%%top-ribcage-key306 %%top-ribcage1325))))))) (%%update-mode-set426 ((lambda (%%table1329) (lambda (%%when-list1330 %%mode-set1331) (letrec ((%%remq1332 (lambda (%%x1333 %%ls1334) (if (null? %%ls1334) '() (if (eq? (car %%ls1334) %%x1333) (%%remq1332 %%x1333 (cdr %%ls1334)) (cons (car %%ls1334) (%%remq1332 %%x1333 (cdr %%ls1334)))))))) (%%remq1332 '- (apply append (map (lambda (%%m1335) ((lambda (%%row1336) (map (lambda (%%s1337) (cdr (assq %%s1337 %%row1336))) %%when-list1330)) (cdr (assq %%m1335 %%table1329)))) %%mode-set1331)))))) '((L (load . L) (compile . C) (visit . V) (revisit . R) (eval . -)) (C (load . -) (compile . -) (visit . -) (revisit . -) (eval . C)) (V (load . V) (compile . C) (visit . V) (revisit . -) (eval . -)) (R (load . R) (compile . C) (visit . -) (revisit . R) (eval . -)) (E (load . -) (compile . -) (visit . -) (revisit . -) (eval . E))))) (%%initial-mode-set427 (lambda (%%when-list1338 %%compiling-a-file1339) (apply append (map (lambda (%%s1340) (if %%compiling-a-file1339 ((lambda (%%t1341) (if (memv %%t1341 '(compile)) '(C) (if (memv %%t1341 '(load)) '(L) (if (memv %%t1341 '(visit)) '(V) (if (memv %%t1341 '(revisit)) '(R) '()))))) %%s1340) ((lambda (%%t1342) (if (memv %%t1342 '(eval)) '(E) '())) %%s1340))) %%when-list1338)))) (%%rt-eval/residualize428 (lambda (%%rtem1343 %%thunk1344) (if (memq 'E %%rtem1343) (%%thunk1344) ((lambda (%%thunk1345) (if (memq 'V %%rtem1343) (if ((lambda (%%t1346) (if %%t1346 %%t1346 (memq 'R %%rtem1343))) (memq 'L %%rtem1343)) (%%thunk1345) (begin (vector-set! (%%thunk1345) 0 visit-marker) (%%thunk1345))) (if ((lambda (%%t1347) (if %%t1347 %%t1347 (memq 'R %%rtem1343))) (memq 'L %%rtem1343)) (%%thunk1345) (%%chi-void462)))) (if (memq 'C %%rtem1343) ((lambda (%%x1348) (begin (%%top-level-eval-hook43 %%x1348) (lambda () %%x1348))) (%%thunk1344)) %%thunk1344))))) (%%ct-eval/residualize2429 (lambda (%%ctem1349 %%thunk1350) ((lambda (%%t1351) (%%ct-eval/residualize3430 %%ctem1349 (lambda () (begin (if (not %%t1351) (set! %%t1351 (%%thunk1350)) (void)) (%%top-level-eval-hook43 %%t1351))) (lambda () ((lambda (%%t1352) (if %%t1352 %%t1352 (%%thunk1350))) %%t1351)))) #f))) (%%ct-eval/residualize3430 (lambda (%%ctem1353 %%eval-thunk1354 %%residualize-thunk1355) (if (memq 'E %%ctem1353) (begin (%%eval-thunk1354) (%%chi-void462)) (begin (if (memq 'C %%ctem1353) (%%eval-thunk1354) (void)) (if (memq 'R %%ctem1353) (if ((lambda (%%t1356) (if %%t1356 %%t1356 (memq 'V %%ctem1353))) (memq 'L %%ctem1353)) (%%residualize-thunk1355) (%%residualize-thunk1355)) (if ((lambda (%%t1357) (if %%t1357 %%t1357 (memq 'V %%ctem1353))) (memq 'L %%ctem1353)) (begin (vector-set! (%%residualize-thunk1355) 0 visit-marker) (%%residualize-thunk1355)) (%%chi-void462))))))) (%%chi-frobs431 (lambda (%%frob*1358 %%r1359 %%mr1360 %%m?1361) (map (lambda (%%x1362) (%%chi434 (%%frob-e414 %%x1362) %%r1359 %%mr1360 '(()) %%m?1361)) %%frob*1358))) (%%chi-meta-frob432 (lambda (%%x1363 %%mr1364) (%%chi434 (%%frob-e414 %%x1363) %%mr1364 %%mr1364 '(()) #t))) (%%chi-sequence433 (lambda (%%body1365 %%r1366 %%mr1367 %%w1368 %%ae1369 %%m?1370) (%%build-sequence153 %%ae1369 ((letrec ((%%dobody1371 (lambda (%%body1372) (if (null? %%body1372) '() ((lambda (%%first1373) (cons %%first1373 (%%dobody1371 (cdr %%body1372)))) (%%chi434 (car %%body1372) %%r1366 %%mr1367 %%w1368 %%m?1370)))))) %%dobody1371) %%body1365)))) (%%chi434 (lambda (%%e1374 %%r1375 %%mr1376 %%w1377 %%m?1378) (call-with-values (lambda () (%%syntax-type379 %%e1374 %%r1375 %%w1377 #f #f)) (lambda (%%type1379 %%value1380 %%e1381 %%w1382 %%ae1383) (%%chi-expr435 %%type1379 %%value1380 %%e1381 %%r1375 %%mr1376 %%w1382 %%ae1383 %%m?1378))))) (%%chi-expr435 (lambda (%%type1384 %%value1385 %%e1386 %%r1387 %%mr1388 %%w1389 %%ae1390 %%m?1391) ((lambda (%%t1392) (if (memv %%t1392 '(lexical)) %%value1385 (if (memv %%t1392 '(core)) (%%value1385 %%e1386 %%r1387 %%mr1388 %%w1389 %%ae1390 %%m?1391) (if (memv %%t1392 '(lexical-call)) (%%chi-application436 %%value1385 %%e1386 %%r1387 %%mr1388 %%w1389 %%ae1390 %%m?1391) (if (memv %%t1392 '(constant)) ((lambda (%%x1393) (if (self-eval? (%%strip466 (%%source-wrap377 %%e1386 %%w1389 %%ae1390) '(()))) %%x1393 (build-source %%ae1390 (list (build-source %%ae1390 'quote) %%x1393)))) (attach-source %%ae1390 (%%strip466 (%%source-wrap377 %%e1386 %%w1389 %%ae1390) '(())))) (if (memv %%t1392 '(global)) (build-source %%ae1390 %%value1385) (if (memv %%t1392 '(meta-variable)) (if %%m?1391 (build-source %%ae1390 %%value1385) (%%displaced-lexical-error217 (%%source-wrap377 %%e1386 %%w1389 %%ae1390))) (if (memv %%t1392 '(call)) (%%chi-application436 (%%chi434 (car %%e1386) %%r1387 %%mr1388 %%w1389 %%m?1391) %%e1386 %%r1387 %%mr1388 %%w1389 %%ae1390 %%m?1391) (if (memv %%t1392 '(begin-form)) (%%chi-sequence433 (%%parse-begin451 %%e1386 %%w1389 %%ae1390 #f) %%r1387 %%mr1388 %%w1389 %%ae1390 %%m?1391) (if (memv %%t1392 '(local-syntax-form)) (call-with-values (lambda () (%%chi-local-syntax461 %%value1385 %%e1386 %%r1387 %%mr1388 %%w1389 %%ae1390)) (lambda (%%forms1394 %%r1395 %%mr1396 %%w1397 %%ae1398) (%%chi-sequence433 %%forms1394 %%r1395 %%mr1396 %%w1397 %%ae1398 %%m?1391))) (if (memv %%t1392 '(eval-when-form)) (call-with-values (lambda () (%%parse-eval-when449 %%e1386 %%w1389 %%ae1390)) (lambda (%%when-list1399 %%forms1400) (if (memq 'eval %%when-list1399) (%%chi-sequence433 %%forms1400 %%r1387 %%mr1388 %%w1389 %%ae1390 %%m?1391) (%%chi-void462)))) (if (memv %%t1392 '(meta-form)) (syntax-error (%%source-wrap377 %%e1386 %%w1389 %%ae1390) "invalid context for meta definition") (if (memv %%t1392 '(define-form)) (begin (%%parse-define446 %%e1386 %%w1389 %%ae1390) (syntax-error (%%source-wrap377 %%e1386 %%w1389 %%ae1390) "invalid context for definition")) (if (memv %%t1392 '(define-syntax-form)) (begin (%%parse-define-syntax447 %%e1386 %%w1389 %%ae1390) (syntax-error (%%source-wrap377 %%e1386 %%w1389 %%ae1390) "invalid context for definition")) (if (memv %%t1392 '($module-form)) (call-with-values (lambda () (%%parse-module444 %%e1386 %%w1389 %%ae1390 %%w1389)) (lambda (%%orig1401 %%id1402 %%exports1403 %%forms1404) (syntax-error %%orig1401 "invalid context for definition"))) (if (memv %%t1392 '($import-form)) (call-with-values (lambda () (%%parse-import445 %%e1386 %%w1389 %%ae1390)) (lambda (%%orig1405 %%only?1406 %%mid1407) (syntax-error %%orig1405 "invalid context for definition"))) (if (memv %%t1392 '(alias-form)) (begin (%%parse-alias450 %%e1386 %%w1389 %%ae1390) (syntax-error (%%source-wrap377 %%e1386 %%w1389 %%ae1390) "invalid context for definition")) (if (memv %%t1392 '(syntax)) (syntax-error (%%source-wrap377 %%e1386 %%w1389 %%ae1390) "reference to pattern variable outside syntax form") (if (memv %%t1392 '(displaced-lexical)) (%%displaced-lexical-error217 (%%source-wrap377 %%e1386 %%w1389 %%ae1390)) (syntax-error (%%source-wrap377 %%e1386 %%w1389 %%ae1390))))))))))))))))))))) %%type1384))) (%%chi-application436 (lambda (%%x1408 %%e1409 %%r1410 %%mr1411 %%w1412 %%ae1413 %%m?1414) ((lambda (%%tmp1415) ((lambda (%%tmp1416) (if %%tmp1416 (apply (lambda (%%e01417 %%e11418) (build-source %%ae1413 (cons %%x1408 (map (lambda (%%e1419) (%%chi434 %%e1419 %%r1410 %%mr1411 %%w1412 %%m?1414)) %%e11418)))) %%tmp1416) ((lambda (%%_1421) (syntax-error (%%source-wrap377 %%e1409 %%w1412 %%ae1413))) %%tmp1415))) ($syntax-dispatch %%tmp1415 '(any . each-any)))) %%e1409))) (%%chi-set!437 (lambda (%%e1422 %%r1423 %%w1424 %%ae1425 %%rib1426) ((lambda (%%tmp1427) ((lambda (%%tmp1428) (if (if %%tmp1428 (apply (lambda (%%_1429 %%id1430 %%val1431) (%%id?224 %%id1430)) %%tmp1428) #f) (apply (lambda (%%_1432 %%id1433 %%val1434) ((lambda (%%n1435) ((lambda (%%b1436) ((lambda (%%t1437) (if (memv %%t1437 '(macro!)) ((lambda (%%id1438 %%val1439) (%%syntax-type379 (%%chi-macro438 (%%binding-value200 %%b1436) (list '#structure(#4# #(#5# set! #6# 2755152) (#7# #structure(#9# () () ()) #structure(#9# #(id val) #(#7# #7#) #("i" "i")) #structure(#9# () () ()) #structure(#9# #(t) #(("m" . #11#)) #("i")) #structure(#9# () () ()) #structure(#9# #(b) #(#7#) #("i")) #structure(#9# () () ()) #structure(#9# #(n) #(#7#) #("i")) #structure(#9# #(_ id val) #(#7# #7# #7#) #("i" "i" "i")) #structure(#9# () () ()) #structure(#9# #(e r w ae rib) #(#7# #7# #7# #7# #7#) #("i" "i" "i" "i" "i")) #10# . #12#)) %%id1438 %%val1439) %%r1423 '(()) #f %%rib1426) %%r1423 '(()) #f %%rib1426)) (%%wrap376 %%id1433 %%w1424) (%%wrap376 %%val1434 %%w1424)) (values 'core (lambda (%%e1440 %%r1441 %%mr1442 %%w1443 %%ae1444 %%m?1445) ((lambda (%%val1446 %%n1447) ((lambda (%%b1448) ((lambda (%%t1449) (if (memv %%t1449 '(lexical)) (build-source %%ae1444 (list (build-source %%ae1444 'set!) (%%binding-value200 %%b1448) %%val1446)) (if (memv %%t1449 '(global)) ((lambda (%%sym1450) (begin (if (%%read-only-binding?49 %%n1447) (syntax-error (%%source-wrap377 %%e1440 %%w1443 %%ae1444) "invalid assignment to read-only variable") (void)) (build-source %%ae1444 (list (build-source %%ae1444 'set!) %%sym1450 %%val1446)))) (%%binding-value200 %%b1448)) (if (memv %%t1449 '(meta-variable)) (if %%m?1445 (build-source %%ae1444 (list (build-source %%ae1444 'set!) (%%binding-value200 %%b1448) %%val1446)) (%%displaced-lexical-error217 (%%wrap376 %%id1433 %%w1443))) (if (memv %%t1449 '(displaced-lexical)) (%%displaced-lexical-error217 (%%wrap376 %%id1433 %%w1443)) (syntax-error (%%source-wrap377 %%e1440 %%w1443 %%ae1444))))))) (%%binding-type199 %%b1448))) (%%lookup219 %%n1447 %%r1441))) (%%chi434 %%val1434 %%r1441 %%mr1442 %%w1443 %%m?1445) (%%id-var-name367 %%id1433 %%w1443))) %%e1422 %%w1424 %%ae1425))) (%%binding-type199 %%b1436))) (%%lookup219 %%n1435 %%r1423))) (%%id-var-name367 %%id1433 %%w1424))) %%tmp1428) ((lambda (%%_1451) (syntax-error (%%source-wrap377 %%e1422 %%w1424 %%ae1425))) %%tmp1427))) ($syntax-dispatch %%tmp1427 '(any any any)))) %%e1422))) (%%chi-macro438 (lambda (%%p1452 %%e1453 %%r1454 %%w1455 %%ae1456 %%rib1457) (letrec ((%%rebuild-macro-output1458 (lambda (%%x1459 %%m1460) (if (pair? %%x1459) (cons (%%rebuild-macro-output1458 (car %%x1459) %%m1460) (%%rebuild-macro-output1458 (cdr %%x1459) %%m1460)) (if (%%syntax-object?40 %%x1459) ((lambda (%%w1461) ((lambda (%%ms1462 %%s1463) (%%make-syntax-object36 (%%syntax-object-expression41 %%x1459) (if (if (pair? %%ms1462) (eq? (car %%ms1462) #f) #f) (%%make-wrap233 (cdr %%ms1462) (cdr %%s1463)) (%%make-wrap233 (cons %%m1460 %%ms1462) (if %%rib1457 (cons %%rib1457 (cons 'shift %%s1463)) (cons 'shift %%s1463)))))) (%%wrap-marks234 %%w1461) (%%wrap-subst235 %%w1461))) (%%syntax-object-wrap42 %%x1459)) (if (vector? %%x1459) ((lambda (%%n1464) ((lambda (%%v1465) ((lambda () ((letrec ((%%do1466 (lambda (%%i1467) (if (fx= %%i1467 %%n1464) %%v1465 (begin (vector-set! %%v1465 %%i1467 (%%rebuild-macro-output1458 (vector-ref %%x1459 %%i1467) %%m1460)) (%%do1466 (fx+ %%i1467 1))))))) %%do1466) 0)))) (make-vector %%n1464))) (vector-length %%x1459)) (if (symbol? %%x1459) (syntax-error (%%source-wrap377 %%e1453 %%w1455 %%ae1456) "encountered raw symbol " (symbol->string %%x1459) " in output of macro") %%x1459))))))) (%%rebuild-macro-output1458 ((lambda (%%out1468) (if (procedure? %%out1468) (%%out1468 (lambda (%%id1469) (begin (if (not (identifier? %%id1469)) (syntax-error %%id1469 "environment argument is not an identifier") (void)) (%%lookup219 (%%id-var-name367 %%id1469 '(())) %%r1454)))) %%out1468)) (%%p1452 (%%source-wrap377 %%e1453 (%%anti-mark333 %%w1455) %%ae1456))) (string #\m))))) (%%chi-body439 (lambda (%%body1470 %%outer-form1471 %%r1472 %%mr1473 %%w1474 %%m?1475) ((lambda (%%ribcage1476) ((lambda (%%w1477) ((lambda (%%body1478) ((lambda () (call-with-values (lambda () (%%chi-internal440 %%ribcage1476 %%outer-form1471 %%body1478 %%r1472 %%mr1473 %%m?1475)) (lambda (%%r1479 %%mr1480 %%exprs1481 %%ids1482 %%vars1483 %%vals1484 %%inits1485) (begin (if (null? %%exprs1481) (syntax-error %%outer-form1471 "no expressions in body") (void)) (%%build-body155 #f (reverse %%vars1483) (%%chi-frobs431 (reverse %%vals1484) %%r1479 %%mr1480 %%m?1475) (%%build-sequence153 #f (%%chi-frobs431 (append %%inits1485 %%exprs1481) %%r1479 %%mr1480 %%m?1475))))))))) (map (lambda (%%x1486) (%%make-frob412 (%%wrap376 %%x1486 %%w1477) #f)) %%body1470))) (%%make-wrap233 (%%wrap-marks234 %%w1474) (cons %%ribcage1476 (%%wrap-subst235 %%w1474))))) (%%make-ribcage284 '() '() '())))) (%%chi-internal440 (lambda (%%ribcage1487 %%source-exp1488 %%body1489 %%r1490 %%mr1491 %%m?1492) (letrec ((%%return1493 (lambda (%%r1494 %%mr1495 %%exprs1496 %%ids1497 %%vars1498 %%vals1499 %%inits1500) (begin (%%check-defined-ids421 %%source-exp1488 %%ids1497) (values %%r1494 %%mr1495 %%exprs1496 %%ids1497 %%vars1498 %%vals1499 %%inits1500))))) ((letrec ((%%parse1501 (lambda (%%body1502 %%r1503 %%mr1504 %%ids1505 %%vars1506 %%vals1507 %%inits1508 %%meta-seen?1509) (if (null? %%body1502) (%%return1493 %%r1503 %%mr1504 %%body1502 %%ids1505 %%vars1506 %%vals1507 %%inits1508) ((lambda (%%fr1510) ((lambda (%%e1511) ((lambda (%%meta?1512) ((lambda () (call-with-values (lambda () (%%syntax-type379 %%e1511 %%r1503 '(()) #f %%ribcage1487)) (lambda (%%type1513 %%value1514 %%e1515 %%w1516 %%ae1517) ((lambda (%%t1518) (if (memv %%t1518 '(define-form)) (call-with-values (lambda () (%%parse-define446 %%e1515 %%w1516 %%ae1517)) (lambda (%%id1519 %%rhs1520 %%w1521) ((lambda (%%id1522 %%label1523) (if %%meta?1512 ((lambda (%%sym1524) (begin (%%extend-ribcage!343 %%ribcage1487 %%id1522 %%label1523) ((lambda (%%mr1525) (begin (%%define-top-level-value-hook45 %%sym1524 (%%top-level-eval-hook43 (%%chi434 %%rhs1520 %%mr1525 %%mr1525 %%w1521 #t))) (%%parse1501 (cdr %%body1502) %%r1503 %%mr1525 (cons %%id1522 %%ids1505) %%vars1506 %%vals1507 %%inits1508 #f))) (%%extend-env213 %%label1523 (cons 'meta-variable %%sym1524) %%mr1504)))) (($generate-id) ((lambda (%%x1526) ((lambda (%%e1527) (if (annotation? %%e1527) (annotation-expression %%e1527) %%e1527)) (if (%%syntax-object?40 %%x1526) (%%syntax-object-expression41 %%x1526) %%x1526))) %%id1522))) ((lambda (%%var1528) (begin (%%extend-ribcage!343 %%ribcage1487 %%id1522 %%label1523) (%%parse1501 (cdr %%body1502) (%%extend-env213 %%label1523 (cons 'lexical %%var1528) %%r1503) %%mr1504 (cons %%id1522 %%ids1505) (cons %%var1528 %%vars1506) (cons (%%make-frob412 (%%wrap376 %%rhs1520 %%w1521) %%meta?1512) %%vals1507) %%inits1508 #f))) (%%gen-var467 %%id1522)))) (%%wrap376 %%id1519 %%w1521) (%%gen-label281)))) (if (memv %%t1518 '(define-syntax-form)) (call-with-values (lambda () (%%parse-define-syntax447 %%e1515 %%w1516 %%ae1517)) (lambda (%%id1529 %%rhs1530 %%w1531) ((lambda (%%id1532 %%label1533 %%exp1534) (begin (%%extend-ribcage!343 %%ribcage1487 %%id1532 %%label1533) ((lambda (%%b1535) (%%parse1501 (cdr %%body1502) (%%extend-env213 %%label1533 %%b1535 %%r1503) (%%extend-env213 %%label1533 %%b1535 %%mr1504) (cons %%id1532 %%ids1505) %%vars1506 %%vals1507 %%inits1508 #f)) (%%defer-or-eval-transformer221 %%local-eval-hook44 %%exp1534)))) (%%wrap376 %%id1529 %%w1531) (%%gen-label281) (%%chi434 %%rhs1530 %%mr1504 %%mr1504 %%w1531 #t)))) (if (memv %%t1518 '($module-form)) ((lambda (%%*ribcage1536) ((lambda (%%*w1537) ((lambda () (call-with-values (lambda () (%%parse-module444 %%e1515 %%w1516 %%ae1517 %%*w1537)) (lambda (%%orig1538 %%id1539 %%exports1540 %%forms1541) (call-with-values (lambda () (%%chi-internal440 %%*ribcage1536 %%orig1538 (map (lambda (%%d1542) (%%make-frob412 %%d1542 %%meta?1512)) %%forms1541) %%r1503 %%mr1504 %%m?1492)) (lambda (%%r1543 %%mr1544 %%*body1545 %%*ids1546 %%*vars1547 %%*vals1548 %%*inits1549) (begin (%%check-module-exports420 %%source-exp1488 (%%flatten-exports383 %%exports1540) %%*ids1546) ((lambda (%%iface1550 %%vars1551 %%vals1552 %%inits1553 %%label1554) (begin (%%extend-ribcage!343 %%ribcage1487 %%id1539 %%label1554) ((lambda (%%b1555) (%%parse1501 (cdr %%body1502) (%%extend-env213 %%label1554 %%b1555 %%r1543) (%%extend-env213 %%label1554 %%b1555 %%mr1544) (cons %%id1539 %%ids1505) %%vars1551 %%vals1552 %%inits1553 #f)) (cons '$module %%iface1550)))) (%%make-resolved-interface394 %%id1539 %%exports1540 #f) (append %%*vars1547 %%vars1506) (append %%*vals1548 %%vals1507) (append %%inits1508 %%*inits1549 %%*body1545) (%%gen-label281)))))))))) (%%make-wrap233 (%%wrap-marks234 %%w1516) (cons %%*ribcage1536 (%%wrap-subst235 %%w1516))))) (%%make-ribcage284 '() '() '())) (if (memv %%t1518 '($import-form)) (call-with-values (lambda () (%%parse-import445 %%e1515 %%w1516 %%ae1517)) (lambda (%%orig1556 %%only?1557 %%mid1558) ((lambda (%%mlabel1559) ((lambda (%%binding1560) ((lambda (%%t1561) (if (memv %%t1561 '($module)) ((lambda (%%iface1562) ((lambda (%%import-iface1563) ((lambda () (begin (if %%only?1557 (%%extend-ribcage-barrier!345 %%ribcage1487 %%mid1558) (void)) (%%do-import!443 %%import-iface1563 %%ribcage1487) (%%parse1501 (cdr %%body1502) %%r1503 %%mr1504 (cons %%import-iface1563 %%ids1505) %%vars1506 %%vals1507 %%inits1508 #f))))) (%%make-import-interface311 %%iface1562 (%%import-mark-delta441 %%mid1558 %%iface1562)))) (%%binding-value200 %%binding1560)) (if (memv %%t1561 '(displaced-lexical)) (%%displaced-lexical-error217 %%mid1558) (syntax-error %%mid1558 "unknown module")))) (%%binding-type199 %%binding1560))) (%%lookup219 %%mlabel1559 %%r1503))) (%%id-var-name367 %%mid1558 '(()))))) (if (memv %%t1518 '(alias-form)) (call-with-values (lambda () (%%parse-alias450 %%e1515 %%w1516 %%ae1517)) (lambda (%%new-id1564 %%old-id1565) ((lambda (%%new-id1566) (begin (%%extend-ribcage!343 %%ribcage1487 %%new-id1566 (%%id-var-name-loc366 %%old-id1565 %%w1516)) (%%parse1501 (cdr %%body1502) %%r1503 %%mr1504 (cons %%new-id1566 %%ids1505) %%vars1506 %%vals1507 %%inits1508 #f))) (%%wrap376 %%new-id1564 %%w1516)))) (if (memv %%t1518 '(begin-form)) (%%parse1501 ((letrec ((%%f1567 (lambda (%%forms1568) (if (null? %%forms1568) (cdr %%body1502) (cons (%%make-frob412 (%%wrap376 (car %%forms1568) %%w1516) %%meta?1512) (%%f1567 (cdr %%forms1568))))))) %%f1567) (%%parse-begin451 %%e1515 %%w1516 %%ae1517 #t)) %%r1503 %%mr1504 %%ids1505 %%vars1506 %%vals1507 %%inits1508 #f) (if (memv %%t1518 '(eval-when-form)) (call-with-values (lambda () (%%parse-eval-when449 %%e1515 %%w1516 %%ae1517)) (lambda (%%when-list1569 %%forms1570) (%%parse1501 (if (memq 'eval %%when-list1569) ((letrec ((%%f1571 (lambda (%%forms1572) (if (null? %%forms1572) (cdr %%body1502) (cons (%%make-frob412 (%%wrap376 (car %%forms1572) %%w1516) %%meta?1512) (%%f1571 (cdr %%forms1572))))))) %%f1571) %%forms1570) (cdr %%body1502)) %%r1503 %%mr1504 %%ids1505 %%vars1506 %%vals1507 %%inits1508 #f))) (if (memv %%t1518 '(meta-form)) (%%parse1501 (cons (%%make-frob412 (%%wrap376 (%%parse-meta448 %%e1515 %%w1516 %%ae1517) %%w1516) #t) (cdr %%body1502)) %%r1503 %%mr1504 %%ids1505 %%vars1506 %%vals1507 %%inits1508 #t) (if (memv %%t1518 '(local-syntax-form)) (call-with-values (lambda () (%%chi-local-syntax461 %%value1514 %%e1515 %%r1503 %%mr1504 %%w1516 %%ae1517)) (lambda (%%forms1573 %%r1574 %%mr1575 %%w1576 %%ae1577) (%%parse1501 ((letrec ((%%f1578 (lambda (%%forms1579) (if (null? %%forms1579) (cdr %%body1502) (cons (%%make-frob412 (%%wrap376 (car %%forms1579) %%w1576) %%meta?1512) (%%f1578 (cdr %%forms1579))))))) %%f1578) %%forms1573) %%r1574 %%mr1575 %%ids1505 %%vars1506 %%vals1507 %%inits1508 #f))) (begin (if %%meta-seen?1509 (syntax-error (%%source-wrap377 %%e1515 %%w1516 %%ae1517) "invalid meta definition") (void)) ((letrec ((%%f1580 (lambda (%%body1581) (if ((lambda (%%t1582) (if %%t1582 %%t1582 (not (%%frob-meta?416 (car %%body1581))))) (null? %%body1581)) (%%return1493 %%r1503 %%mr1504 %%body1581 %%ids1505 %%vars1506 %%vals1507 %%inits1508) (begin (%%top-level-eval-hook43 (%%chi-meta-frob432 (car %%body1581) %%mr1504)) (%%f1580 (cdr %%body1581))))))) %%f1580) (cons (%%make-frob412 (%%source-wrap377 %%e1515 %%w1516 %%ae1517) %%meta?1512) (cdr %%body1502)))))))))))))) %%type1513)))))) (%%frob-meta?416 %%fr1510))) (%%frob-e414 %%fr1510))) (car %%body1502)))))) %%parse1501) %%body1489 %%r1490 %%mr1491 '() '() '() '() #f)))) (%%import-mark-delta441 (lambda (%%mid1583 %%iface1584) (%%diff-marks359 (%%id-marks230 %%mid1583) (%%interface-marks387 %%iface1584)))) (%%lookup-import-label442 (lambda (%%id1585) ((lambda (%%label1586) (begin (if (not %%label1586) (syntax-error %%id1585 "exported identifier not visible") (void)) %%label1586)) (%%id-var-name-loc366 %%id1585 '(()))))) (%%do-import!443 (lambda (%%import-iface1587 %%ribcage1588) ((lambda (%%ie1589) (if (<= (vector-length %%ie1589) 20) ((lambda (%%new-marks1590) (%%vfor-each424 (lambda (%%id1591) (%%import-extend-ribcage!344 %%ribcage1588 %%new-marks1590 %%id1591 (%%lookup-import-label442 %%id1591))) %%ie1589)) (%%import-interface-new-marks315 %%import-iface1587)) (%%extend-ribcage-subst!347 %%ribcage1588 %%import-iface1587))) (%%interface-exports389 (%%import-interface-interface313 %%import-iface1587))))) (%%parse-module444 (lambda (%%e1592 %%w1593 %%ae1594 %%*w1595) (letrec ((%%listify1596 (lambda (%%exports1597) (if (null? %%exports1597) '() (cons ((lambda (%%tmp1598) ((lambda (%%tmp1599) (if %%tmp1599 (apply (lambda (%%ex1600) (%%listify1596 %%ex1600)) %%tmp1599) ((lambda (%%x1602) (if (%%id?224 %%x1602) (%%wrap376 %%x1602 %%*w1595) (syntax-error (%%source-wrap377 %%e1592 %%w1593 %%ae1594) "invalid exports list in"))) %%tmp1598))) ($syntax-dispatch %%tmp1598 'each-any))) (car %%exports1597)) (%%listify1596 (cdr %%exports1597))))))) ((lambda (%%tmp1603) ((lambda (%%tmp1604) (if (if %%tmp1604 (apply (lambda (%%_1605 %%orig1606 %%mid1607 %%ex1608 %%form1609) (%%id?224 %%mid1607)) %%tmp1604) #f) (apply (lambda (%%_1610 %%orig1611 %%mid1612 %%ex1613 %%form1614) (values %%orig1611 (%%wrap376 %%mid1612 %%w1593) (%%listify1596 %%ex1613) (map (lambda (%%x1616) (%%wrap376 %%x1616 %%*w1595)) %%form1614))) %%tmp1604) ((lambda (%%_1618) (syntax-error (%%source-wrap377 %%e1592 %%w1593 %%ae1594))) %%tmp1603))) ($syntax-dispatch %%tmp1603 '(any any any each-any . each-any)))) %%e1592)))) (%%parse-import445 (lambda (%%e1619 %%w1620 %%ae1621) ((lambda (%%tmp1622) ((lambda (%%tmp1623) (if (if %%tmp1623 (apply (lambda (%%_1624 %%orig1625 %%mid1626) (%%id?224 %%mid1626)) %%tmp1623) #f) (apply (lambda (%%_1627 %%orig1628 %%mid1629) (values %%orig1628 #t (%%wrap376 %%mid1629 %%w1620))) %%tmp1623) ((lambda (%%tmp1630) (if (if %%tmp1630 (apply (lambda (%%_1631 %%orig1632 %%mid1633) (%%id?224 %%mid1633)) %%tmp1630) #f) (apply (lambda (%%_1634 %%orig1635 %%mid1636) (values %%orig1635 #f (%%wrap376 %%mid1636 %%w1620))) %%tmp1630) ((lambda (%%_1637) (syntax-error (%%source-wrap377 %%e1619 %%w1620 %%ae1621))) %%tmp1622))) ($syntax-dispatch %%tmp1622 '(any any #(atom #f) any))))) ($syntax-dispatch %%tmp1622 '(any any #(atom #t) any)))) %%e1619))) (%%parse-define446 (lambda (%%e1638 %%w1639 %%ae1640) ((lambda (%%tmp1641) ((lambda (%%tmp1642) (if (if %%tmp1642 (apply (lambda (%%_1643 %%name1644 %%val1645) (%%id?224 %%name1644)) %%tmp1642) #f) (apply (lambda (%%_1646 %%name1647 %%val1648) (values %%name1647 %%val1648 %%w1639)) %%tmp1642) ((lambda (%%tmp1649) (if (if %%tmp1649 (apply (lambda (%%_1650 %%name1651 %%args1652 %%e11653 %%e21654) (%%id?224 %%name1651)) %%tmp1649) #f) (apply (lambda (%%_1655 %%name1656 %%args1657 %%e11658 %%e21659) (values (%%wrap376 %%name1656 %%w1639) (cons '#structure(#4# #(#5# lambda #6# 1903488) (#7# #structure(#9# #(_ name args e1 e2) #(#7# #7# #7# #7# #7#) #("i" "i" "i" "i" "i")) . #13=(#structure(#9# () () ()) #structure(#9# #(e w ae) #(#7# #7# #7#) #("i" "i" "i")) #10# . #12#))) (%%wrap376 (cons %%args1657 (cons %%e11658 %%e21659)) %%w1639)) '(()))) %%tmp1649) ((lambda (%%tmp1661) (if (if %%tmp1661 (apply (lambda (%%_1662 %%name1663) (%%id?224 %%name1663)) %%tmp1661) #f) (apply (lambda (%%_1664 %%name1665) (values (%%wrap376 %%name1665 %%w1639) '#structure(#4# #(#5# (#(#5# void #6# 3083140)) #6# 3017604) (#7# #structure(#9# #(_ name) #(#7# #7#) #("i" "i")) . #13#)) '(()))) %%tmp1661) ((lambda (%%_1666) (syntax-error (%%source-wrap377 %%e1638 %%w1639 %%ae1640))) %%tmp1641))) ($syntax-dispatch %%tmp1641 '(any any))))) ($syntax-dispatch %%tmp1641 '(any (any . any) any . each-any))))) ($syntax-dispatch %%tmp1641 '(any any any)))) %%e1638))) (%%parse-define-syntax447 (lambda (%%e1667 %%w1668 %%ae1669) ((lambda (%%tmp1670) ((lambda (%%tmp1671) (if (if %%tmp1671 (apply (lambda (%%_1672 %%name1673 %%id1674 %%e11675 %%e21676) (if (%%id?224 %%name1673) (%%id?224 %%id1674) #f)) %%tmp1671) #f) (apply (lambda (%%_1677 %%name1678 %%id1679 %%e11680 %%e21681) (values (%%wrap376 %%name1678 %%w1668) (cons '#structure(#4# #(#5# lambda #6# 1706893) (#7# #structure(#9# #(_ name id e1 e2) #(#7# #7# #7# #7# #7#) #("i" "i" "i" "i" "i")) #structure(#9# () () ()) #structure(#9# #(e w ae) #(#7# #7# #7#) #("i" "i" "i")) #10# . #12#)) (cons (%%wrap376 (list %%id1679) %%w1668) (%%wrap376 (cons %%e11680 %%e21681) %%w1668))) '(()))) %%tmp1671) ((lambda (%%tmp1683) (if (if %%tmp1683 (apply (lambda (%%_1684 %%name1685 %%val1686) (%%id?224 %%name1685)) %%tmp1683) #f) (apply (lambda (%%_1687 %%name1688 %%val1689) (values %%name1688 %%val1689 %%w1668)) %%tmp1683) ((lambda (%%_1690) (syntax-error (%%source-wrap377 %%e1667 %%w1668 %%ae1669))) %%tmp1670))) ($syntax-dispatch %%tmp1670 '(any any any))))) ($syntax-dispatch %%tmp1670 '(any (any any) any . each-any)))) %%e1667))) (%%parse-meta448 (lambda (%%e1691 %%w1692 %%ae1693) ((lambda (%%tmp1694) ((lambda (%%tmp1695) (if %%tmp1695 (apply (lambda (%%_1696 %%form1697) %%form1697) %%tmp1695) ((lambda (%%_1698) (syntax-error (%%source-wrap377 %%e1691 %%w1692 %%ae1693))) %%tmp1694))) ($syntax-dispatch %%tmp1694 '(any . any)))) %%e1691))) (%%parse-eval-when449 (lambda (%%e1699 %%w1700 %%ae1701) ((lambda (%%tmp1702) ((lambda (%%tmp1703) (if %%tmp1703 (apply (lambda (%%_1704 %%x1705 %%e11706 %%e21707) (values (%%chi-when-list378 %%x1705 %%w1700) (cons %%e11706 %%e21707))) %%tmp1703) ((lambda (%%_1710) (syntax-error (%%source-wrap377 %%e1699 %%w1700 %%ae1701))) %%tmp1702))) ($syntax-dispatch %%tmp1702 '(any each-any any . each-any)))) %%e1699))) (%%parse-alias450 (lambda (%%e1711 %%w1712 %%ae1713) ((lambda (%%tmp1714) ((lambda (%%tmp1715) (if (if %%tmp1715 (apply (lambda (%%_1716 %%new-id1717 %%old-id1718) (if (%%id?224 %%new-id1717) (%%id?224 %%old-id1718) #f)) %%tmp1715) #f) (apply (lambda (%%_1719 %%new-id1720 %%old-id1721) (values %%new-id1720 %%old-id1721)) %%tmp1715) ((lambda (%%_1722) (syntax-error (%%source-wrap377 %%e1711 %%w1712 %%ae1713))) %%tmp1714))) ($syntax-dispatch %%tmp1714 '(any any any)))) %%e1711))) (%%parse-begin451 (lambda (%%e1723 %%w1724 %%ae1725 %%empty-okay?1726) ((lambda (%%tmp1727) ((lambda (%%tmp1728) (if (if %%tmp1728 (apply (lambda (%%_1729) %%empty-okay?1726) %%tmp1728) #f) (apply (lambda (%%_1730) '()) %%tmp1728) ((lambda (%%tmp1731) (if %%tmp1731 (apply (lambda (%%_1732 %%e11733 %%e21734) (cons %%e11733 %%e21734)) %%tmp1731) ((lambda (%%_1736) (syntax-error (%%source-wrap377 %%e1723 %%w1724 %%ae1725))) %%tmp1727))) ($syntax-dispatch %%tmp1727 '(any any . each-any))))) ($syntax-dispatch %%tmp1727 '(any)))) %%e1723))) (%%chi-lambda-clause460 (lambda (%%e1737 %%c1738 %%r1739 %%mr1740 %%w1741 %%m?1742) (letrec ((%%reverse*1743 (lambda (%%l1746) ((letrec ((%%f1747 (lambda (%%ls11748 %%ls21749) (if (null? %%ls11748) %%ls21749 (%%f1747 (cdr %%ls11748) (cons (car %%ls11748) %%ls21749)))))) %%f1747) (cdr %%l1746) (car %%l1746)))) (%%ids/emitter1744 (lambda (%%formals1750 %%ids1751 %%emitter1752 %%ae1753 %%template1754) (begin (if (if (pair? (syntax-case-debug)) (memq 'dsssl (syntax-case-debug)) #f) (pp (vector 'ids/emitter %%ids1751 'template %%template1754)) (void)) (if (null? %%ids1751) (values (reverse %%formals1750) %%emitter1752) (if (%%syntax-object?40 (car %%ids1751)) (%%ids/emitter1744 %%formals1750 (cons (syntax->datum (car %%ids1751)) (cdr %%ids1751)) %%emitter1752 %%ae1753 (car %%ids1751)) (if (annotation? (car %%ids1751)) (%%ids/emitter1744 %%formals1750 (cons ((lambda (%%e1755) (if (annotation? %%e1755) (annotation-expression %%e1755) %%e1755)) (car %%ids1751)) (cdr %%ids1751)) %%emitter1752 (car %%ids1751) %%template1754) (if (eq? (car %%ids1751) #!key) (%%ids/emitter1744 %%formals1750 (cdr %%ids1751) 'keyword %%ae1753 #f) (if (memq (car %%ids1751) '(#!optional #!rest)) (%%ids/emitter1744 %%formals1750 (cdr %%ids1751) ((lambda (%%t1756) (if %%t1756 %%t1756 %%emitter1752)) (if (eq? %%emitter1752 'rnrs) 'optional/rest #f)) %%ae1753 #f) (if (pair? (car %%ids1751)) (%%ids/emitter1744 %%formals1750 (cons (car (car %%ids1751)) (cdr %%ids1751)) %%emitter1752 %%ae1753 (if %%template1754 (%%make-syntax-object36 (car ((lambda (%%e1757) (if (annotation? %%e1757) (annotation-expression %%e1757) %%e1757)) (%%syntax-object-expression41 %%template1754))) (%%syntax-object-wrap42 %%template1754)) #f)) (%%ids/emitter1744 (cons (if %%template1754 (datum->syntax %%template1754 (car %%ids1751)) (if %%ae1753 (build-source %%ae1753 (car %%ids1751)) (build-source #f (car %%ids1751)))) %%formals1750) (cdr %%ids1751) %%emitter1752 %%ae1753 #f)))))))))) (%%emit-formals1745 (lambda (%%formals*1758 %%formals1759 %%vars1760 %%emitter1761 %%ae1762 %%template1763) (letrec ((%%formal1764 (lambda () ((lambda (%%t1765) (if (memv %%t1765 '(optional/rest)) %%vars1760 (if (memv %%t1765 '(rnrs keyword)) %%formals1759 (void)))) %%emitter1761)))) (if (null? %%formals1759) (reverse %%formals*1758) (if (%%syntax-object?40 %%formals1759) (%%emit-formals1745 %%formals*1758 (syntax->datum %%formals1759) %%vars1760 %%emitter1761 %%ae1762 %%formals1759) (if (%%id?224 %%formals1759) (%%reverse*1743 (cons (%%formal1764) %%formals*1758)) (if (annotation? %%formals1759) (%%emit-formals1745 %%formals*1758 ((lambda (%%e1766) (if (annotation? %%e1766) (annotation-expression %%e1766) %%e1766)) %%formals1759) %%vars1760 %%emitter1761 %%ae1762 %%template1763) (if (annotation? (car %%formals1759)) (%%emit-formals1745 %%formals*1758 (cons ((lambda (%%e1767) (if (annotation? %%e1767) (annotation-expression %%e1767) %%e1767)) (car %%formals1759)) (cdr %%formals1759)) %%vars1760 %%emitter1761 (car %%formals1759) %%template1763) (if (%%syntax-object?40 (car %%formals1759)) (%%emit-formals1745 %%formals*1758 (cons (syntax->datum (car %%formals1759)) (cdr %%formals1759)) %%vars1760 %%emitter1761 %%ae1762 (car %%formals1759)) (if (memq (car %%formals1759) '(#!optional #!rest #!key)) (%%emit-formals1745 (cons (build-source %%ae1762 (car %%formals1759)) %%formals*1758) (cdr %%formals1759) %%vars1760 %%emitter1761 %%ae1762 %%template1763) (if (pair? (car %%formals1759)) (%%emit-formals1745 (cons (cons (car ((lambda (%%t1768) (if (memv %%t1768 '(keyword)) (car (%%formal1764)) (if (memv %%t1768 '(optional/rest)) (%%formal1764) (void)))) %%emitter1761)) ((lambda (%%e1769) (if (annotation? %%e1769) (annotation-expression %%e1769) %%e1769)) (%%chi434 (cdr (car %%formals1759)) %%r1739 %%mr1740 %%w1741 %%m?1742))) %%formals*1758) (cdr %%formals1759) (cdr %%vars1760) %%emitter1761 %%ae1762 %%template1763) (if (%%id?224 (car %%formals1759)) (%%emit-formals1745 (cons (car (%%formal1764)) %%formals*1758) (cdr (syntax->datum %%formals1759)) (cdr %%vars1760) %%emitter1761 %%ae1762 %%template1763) (error (list 'unexpected-formal (car %%formals1759)))))))))))))))) ((lambda (%%tmp1770) ((lambda (%%tmp1771) (if %%tmp1771 (apply (lambda (%%id1772 %%e11773 %%e21774) ((lambda (%%formals1775) (call-with-values (lambda () (%%ids/emitter1744 '() %%formals1775 'rnrs #f #f)) (lambda (%%ids1776 %%emitter1777) (begin (if (if (pair? (syntax-case-debug)) (memq 'dsssl (syntax-case-debug)) #f) (pp (vector 'formals %%formals1775 'ids %%ids1776)) (void)) (if (not (%%valid-bound-ids?372 %%ids1776)) (syntax-error %%e1737 "invalid parameter list in") ((lambda (%%labels1778 %%new-vars1779) (begin (if (if (pair? (syntax-case-debug)) (memq 'dsssl (syntax-case-debug)) #f) (pp (vector 'labels %%labels1778 'new-vars %%new-vars1779 'bw %%w1741 (%%make-binding-wrap350 %%ids1776 %%labels1778 %%w1741))) (void)) (values %%emitter1777 (if (eq? %%emitter1777 'keyword) (%%gen-var467 'dsssl-args) #f) (build-source %%formals1775 %%new-vars1779) (%%emit-formals1745 '() %%formals1775 %%new-vars1779 %%emitter1777 #f #f) (map syntax->datum %%ids1776) (%%chi-body439 (cons %%e11773 %%e21774) %%e1737 (%%extend-var-env*215 %%labels1778 %%new-vars1779 %%r1739) %%mr1740 (%%make-binding-wrap350 %%ids1776 %%labels1778 %%w1741) %%m?1742)))) (%%gen-labels283 %%ids1776) (map (lambda (%%id1781) (build-source %%id1781 (%%gen-var467 %%id1781))) %%ids1776))))))) %%id1772)) %%tmp1771) ((lambda (%%tmp1783) (if %%tmp1783 (apply (lambda (%%ids1784 %%e11785 %%e21786) ((lambda (%%formals1787) (call-with-values (lambda () (%%ids/emitter1744 '() (%%lambda-var-list468 %%formals1787) 'rnrs #f #f)) (lambda (%%old-ids1788 %%emitter1789) (if (not (%%valid-bound-ids?372 %%old-ids1788)) (syntax-error %%e1737 "invalid parameter list in") ((lambda (%%labels1790 %%new-vars1791) (values %%emitter1789 (if (eq? %%emitter1789 'keyword) (%%gen-var467 'dsssl-args) #f) ((lambda (%%vars1792) (if ((lambda (%%t1793) (if %%t1793 %%t1793 (null? %%vars1792))) (pair? %%vars1792)) (build-source %%old-ids1788 %%vars1792) %%vars1792)) (if (eq? %%emitter1789 'rnrs) (%%reverse*1743 %%new-vars1791) (reverse %%new-vars1791))) (%%emit-formals1745 '() %%formals1787 (%%reverse*1743 %%new-vars1791) %%emitter1789 #f #f) (reverse (map syntax->datum %%old-ids1788)) (%%chi-body439 (cons %%e11785 %%e21786) %%e1737 (%%extend-var-env*215 %%labels1790 %%new-vars1791 %%r1739) %%mr1740 (%%make-binding-wrap350 %%old-ids1788 %%labels1790 %%w1741) %%m?1742))) (%%gen-labels283 %%old-ids1788) (map (lambda (%%id1795) (build-source %%id1795 (%%gen-var467 %%id1795))) %%old-ids1788)))))) %%ids1784)) %%tmp1783) ((lambda (%%_1796) (syntax-error %%e1737)) %%tmp1770))) ($syntax-dispatch %%tmp1770 '(any any . each-any))))) ($syntax-dispatch %%tmp1770 '(each-any any . each-any)))) %%c1738)))) (%%chi-local-syntax461 (lambda (%%rec?1797 %%e1798 %%r1799 %%mr1800 %%w1801 %%ae1802) ((lambda (%%tmp1803) ((lambda (%%tmp1804) (if %%tmp1804 (apply (lambda (%%_1805 %%id1806 %%val1807 %%e11808 %%e21809) ((lambda (%%ids1810) (if (not (%%valid-bound-ids?372 %%ids1810)) (%%invalid-ids-error374 (map (lambda (%%x1811) (%%wrap376 %%x1811 %%w1801)) %%ids1810) (%%source-wrap377 %%e1798 %%w1801 %%ae1802) "keyword") ((lambda (%%labels1812) ((lambda (%%new-w1813) ((lambda (%%b*1814) (values (cons %%e11808 %%e21809) (%%extend-env*214 %%labels1812 %%b*1814 %%r1799) (%%extend-env*214 %%labels1812 %%b*1814 %%mr1800) %%new-w1813 %%ae1802)) ((lambda (%%w1816) (map (lambda (%%x1817) (%%defer-or-eval-transformer221 %%local-eval-hook44 (%%chi434 %%x1817 %%mr1800 %%mr1800 %%w1816 #t))) %%val1807)) (if %%rec?1797 %%new-w1813 %%w1801)))) (%%make-binding-wrap350 %%ids1810 %%labels1812 %%w1801))) (%%gen-labels283 %%ids1810)))) %%id1806)) %%tmp1804) ((lambda (%%_1820) (syntax-error (%%source-wrap377 %%e1798 %%w1801 %%ae1802))) %%tmp1803))) ($syntax-dispatch %%tmp1803 '(any #(each (any any)) any . each-any)))) %%e1798))) (%%chi-void462 (lambda () (build-source #f (cons 'void '())))) (%%ellipsis?463 (lambda (%%x1821) (if (%%nonsymbol-id?223 %%x1821) (%%literal-id=?369 %%x1821 '#structure(#4# #(#5# ... #6# 2493525) (#7# #structure(#9# () () ()) #structure(#9# #(x) #(#7#) #("i")) #10# . #12#))) #f))) (%%strip-annotation464 (lambda (%%x1822) (if (pair? %%x1822) (cons (%%strip-annotation464 (car %%x1822)) (%%strip-annotation464 (cdr %%x1822))) (if (annotation? %%x1822) (annotation-stripped %%x1822) %%x1822)))) (%%strip*465 (lambda (%%x1823 %%w1824 %%fn1825) (if (memq 'top (%%wrap-marks234 %%w1824)) (%%fn1825 %%x1823) ((letrec ((%%f1826 (lambda (%%x1827) (if (%%syntax-object?40 %%x1827) (%%strip*465 (%%syntax-object-expression41 %%x1827) (%%syntax-object-wrap42 %%x1827) %%fn1825) (if (pair? %%x1827) ((lambda (%%a1828 %%d1829) (if (if (eq? %%a1828 (car %%x1827)) (eq? %%d1829 (cdr %%x1827)) #f) %%x1827 (cons %%a1828 %%d1829))) (%%f1826 (car %%x1827)) (%%f1826 (cdr %%x1827))) (if (vector? %%x1827) ((lambda (%%old1830) ((lambda (%%new1831) (if (andmap eq? %%old1830 %%new1831) %%x1827 (list->vector %%new1831))) (map %%f1826 %%old1830))) (vector->list %%x1827)) %%x1827)))))) %%f1826) %%x1823)))) (%%strip466 (lambda (%%x1832 %%w1833) (%%strip*465 %%x1832 %%w1833 (lambda (%%x1834) (if ((lambda (%%t1835) (if %%t1835 %%t1835 (if (pair? %%x1834) (annotation? (car %%x1834)) #f))) (annotation? %%x1834)) (%%strip-annotation464 %%x1834) %%x1834))))) (%%gen-var467 (lambda (%%id1836) ((lambda (%%id1837) (if (annotation? %%id1837) (gensym (annotation-expression %%id1837)) (gensym %%id1837))) (if (%%syntax-object?40 %%id1836) (%%syntax-object-expression41 %%id1836) %%id1836)))) (%%lambda-var-list468 (lambda (%%vars1838) ((letrec ((%%lvl1839 (lambda (%%vars1840 %%ls1841 %%w1842) (if (pair? %%vars1840) (%%lvl1839 (cdr %%vars1840) (cons (%%wrap376 (car %%vars1840) %%w1842) %%ls1841) %%w1842) (if (%%id?224 %%vars1840) (cons (%%wrap376 %%vars1840 %%w1842) %%ls1841) (if (null? %%vars1840) %%ls1841 (if (%%syntax-object?40 %%vars1840) (%%lvl1839 (%%syntax-object-expression41 %%vars1840) %%ls1841 (%%join-wraps355 %%w1842 (%%syntax-object-wrap42 %%vars1840))) (if (annotation? %%vars1840) (%%lvl1839 (annotation-expression %%vars1840) %%ls1841 %%w1842) (cons %%vars1840 %%ls1841))))))))) %%lvl1839) %%vars1838 '() '(()))))) (begin (set! $load-module (lambda (%%mid1843 %%ctem1844 %%rtem1845) 'not-found)) (set! $update-module (lambda (%%mid1846 %%ctem1847 %%rtem1848) (void))) (set! $include-file-hook (lambda (%%filename1849) (void))) (set! $sc-put-cte (make-parameter (lambda (%%id1850 %%b1851 %%top-token1852) (letrec ((%%sc-put-module1853 (lambda (%%exports1855 %%token1856 %%new-marks1857) (%%vfor-each424 (lambda (%%id1858) (%%store-import-binding349 %%id1858 %%token1856 %%new-marks1857)) %%exports1855))) (%%put-cte1854 (lambda (%%id1859 %%binding1860 %%token1861) ((lambda (%%sym1862) (begin (%%store-import-binding349 %%id1859 %%token1861 '()) (%%put-global-definition-hook48 %%sym1862 (if (if (eq? (%%binding-type199 %%binding1860) 'global) (eq? (%%binding-value200 %%binding1860) %%sym1862) #f) #f %%binding1860)))) (if (symbol? %%id1859) %%id1859 (%%id-var-name367 %%id1859 '(()))))))) ((lambda (%%binding1863) ((lambda (%%t1864) (if (memv %%t1864 '($module)) (begin ((lambda (%%iface1865) (%%sc-put-module1853 (%%interface-exports389 %%iface1865) (%%interface-token391 %%iface1865) '())) (%%binding-value200 %%binding1863)) (%%put-cte1854 %%id1850 %%binding1863 %%top-token1852)) (if (memv %%t1864 '(do-alias)) (%%store-import-binding349 %%id1850 %%top-token1852 '()) (if (memv %%t1864 '(do-import)) ((lambda (%%token1866) ((lambda (%%b1867) ((lambda (%%t1868) (if (memv %%t1868 '($module)) ((lambda (%%iface1869) ((lambda (%%exports1870) ((lambda () (begin (if (not (eq? (%%interface-token391 %%iface1869) %%token1866)) (syntax-error %%id1850 "import mismatch for module") (void)) (%%sc-put-module1853 (%%interface-exports389 %%iface1869) %%top-token1852 (%%import-mark-delta441 %%id1850 %%iface1869)))))) (%%interface-exports389 %%iface1869))) (%%binding-value200 %%b1867)) (syntax-error %%id1850 "unknown module"))) (%%binding-type199 %%b1867))) (%%lookup219 (%%id-var-name367 %%id1850 '(())) '()))) (%%binding-value200 %%b1851)) (%%put-cte1854 %%id1850 %%binding1863 %%top-token1852))))) (%%binding-type199 %%binding1863))) (%%make-transformer-binding220 %%b1851)))))) (%%global-extend222 'core 'c-define-type (lambda (%%e1871 %%r1872 %%mr1873 %%w1874 %%ae1875 %%m?1876) (attach-source %%ae1875 (%%strip466 %%e1871 %%w1874)))) (%%global-extend222 'core 'c-declare (lambda (%%e1877 %%r1878 %%mr1879 %%w1880 %%ae1881 %%m?1882) (attach-source %%ae1881 (%%strip466 %%e1877 %%w1880)))) (%%global-extend222 'core 'c-initialize (lambda (%%e1883 %%r1884 %%mr1885 %%w1886 %%ae1887 %%m?1888) (attach-source %%ae1887 (%%strip466 %%e1883 %%w1886)))) (%%global-extend222 'core 'c-lambda (lambda (%%e1889 %%r1890 %%mr1891 %%w1892 %%ae1893 %%m?1894) (attach-source %%ae1893 (%%strip466 %%e1889 %%w1892)))) (%%global-extend222 'core 'c-define (lambda (%%e1895 %%r1896 %%mr1897 %%w1898 %%ae1899 %%m?1900) (attach-source %%ae1899 (%%strip466 %%e1895 %%w1898)))) (%%global-extend222 'core 'declare (lambda (%%e1901 %%r1902 %%mr1903 %%w1904 %%ae1905 %%m?1906) (attach-source %%ae1905 (%%strip466 %%e1901 %%w1904)))) (%%global-extend222 'local-syntax 'letrec-syntax #t) (%%global-extend222 'local-syntax 'let-syntax #f) (%%global-extend222 'core 'fluid-let-syntax (lambda (%%e1907 %%r1908 %%mr1909 %%w1910 %%ae1911 %%m?1912) ((lambda (%%tmp1913) ((lambda (%%tmp1914) (if (if %%tmp1914 (apply (lambda (%%_1915 %%var1916 %%val1917 %%e11918 %%e21919) (%%valid-bound-ids?372 %%var1916)) %%tmp1914) #f) (apply (lambda (%%_1921 %%var1922 %%val1923 %%e11924 %%e21925) ((lambda (%%names1926) (begin (for-each (lambda (%%id1927 %%n1928) ((lambda (%%t1929) (if (memv %%t1929 '(displaced-lexical)) (%%displaced-lexical-error217 (%%wrap376 %%id1927 %%w1910)) (void))) (%%binding-type199 (%%lookup219 %%n1928 %%r1908)))) %%var1922 %%names1926) ((lambda (%%b*1931) (%%chi-body439 (cons %%e11924 %%e21925) (%%source-wrap377 %%e1907 %%w1910 %%ae1911) (%%extend-env*214 %%names1926 %%b*1931 %%r1908) (%%extend-env*214 %%names1926 %%b*1931 %%mr1909) %%w1910 %%m?1912)) (map (lambda (%%x1933) (%%defer-or-eval-transformer221 %%local-eval-hook44 (%%chi434 %%x1933 %%mr1909 %%mr1909 %%w1910 #t))) %%val1923)))) (map (lambda (%%x1935) (%%id-var-name367 %%x1935 %%w1910)) %%var1922))) %%tmp1914) ((lambda (%%_1937) (syntax-error (%%source-wrap377 %%e1907 %%w1910 %%ae1911))) %%tmp1913))) ($syntax-dispatch %%tmp1913 '(any #(each (any any)) any . each-any)))) %%e1907))) (%%global-extend222 'core 'quote (lambda (%%e1938 %%r1939 %%mr1940 %%w1941 %%ae1942 %%m?1943) ((lambda (%%tmp1944) ((lambda (%%tmp1945) (if %%tmp1945 (apply (lambda (%%_1946 %%e1947) ((lambda (%%x1948) (if (self-eval? (%%strip466 %%e1947 %%w1941)) %%x1948 (build-source %%ae1942 (list (build-source %%ae1942 'quote) %%x1948)))) (attach-source %%ae1942 (%%strip466 %%e1947 %%w1941)))) %%tmp1945) ((lambda (%%_1949) (syntax-error (%%source-wrap377 %%e1938 %%w1941 %%ae1942))) %%tmp1944))) ($syntax-dispatch %%tmp1944 '(any any)))) %%e1938))) (%%global-extend222 'core 'syntax ((lambda () (letrec ((%%gen-syntax1950 (lambda (%%src1958 %%e1959 %%r1960 %%maps1961 %%ellipsis?1962 %%vec?1963) (if (%%id?224 %%e1959) ((lambda (%%label1964) ((lambda (%%b1965) (if (eq? (%%binding-type199 %%b1965) 'syntax) (call-with-values (lambda () ((lambda (%%var.lev1966) (%%gen-ref1951 %%src1958 (car %%var.lev1966) (cdr %%var.lev1966) %%maps1961)) (%%binding-value200 %%b1965))) (lambda (%%var1967 %%maps1968) (values (list 'ref %%var1967) %%maps1968))) (if (%%ellipsis?1962 %%e1959) (syntax-error %%src1958 "misplaced ellipsis in syntax form") (values (list 'quote %%e1959) %%maps1961)))) (%%lookup219 %%label1964 %%r1960))) (%%id-var-name367 %%e1959 '(()))) ((lambda (%%tmp1969) ((lambda (%%tmp1970) (if (if %%tmp1970 (apply (lambda (%%dots1971 %%e1972) (%%ellipsis?1962 %%dots1971)) %%tmp1970) #f) (apply (lambda (%%dots1973 %%e1974) (if %%vec?1963 (syntax-error %%src1958 "misplaced ellipsis in syntax template") (%%gen-syntax1950 %%src1958 %%e1974 %%r1960 %%maps1961 (lambda (%%x1975) #f) #f))) %%tmp1970) ((lambda (%%tmp1976) (if (if %%tmp1976 (apply (lambda (%%x1977 %%dots1978 %%y1979) (%%ellipsis?1962 %%dots1978)) %%tmp1976) #f) (apply (lambda (%%x1980 %%dots1981 %%y1982) ((letrec ((%%f1983 (lambda (%%y1984 %%k1985) ((lambda (%%tmp1986) ((lambda (%%tmp1987) (if (if %%tmp1987 (apply (lambda (%%dots1988 %%y1989) (%%ellipsis?1962 %%dots1988)) %%tmp1987) #f) (apply (lambda (%%dots1990 %%y1991) (%%f1983 %%y1991 (lambda (%%maps1992) (call-with-values (lambda () (%%k1985 (cons '() %%maps1992))) (lambda (%%x1993 %%maps1994) (if (null? (car %%maps1994)) (syntax-error %%src1958 "extra ellipsis in syntax form") (values (%%gen-mappend1953 %%x1993 (car %%maps1994)) (cdr %%maps1994)))))))) %%tmp1987) ((lambda (%%_1995) (call-with-values (lambda () (%%gen-syntax1950 %%src1958 %%y1984 %%r1960 %%maps1961 %%ellipsis?1962 %%vec?1963)) (lambda (%%y1996 %%maps1997) (call-with-values (lambda () (%%k1985 %%maps1997)) (lambda (%%x1998 %%maps1999) (values (%%gen-append1952 %%x1998 %%y1996) %%maps1999)))))) %%tmp1986))) ($syntax-dispatch %%tmp1986 '(any . any)))) %%y1984)))) %%f1983) %%y1982 (lambda (%%maps2000) (call-with-values (lambda () (%%gen-syntax1950 %%src1958 %%x1980 %%r1960 (cons '() %%maps2000) %%ellipsis?1962 #f)) (lambda (%%x2001 %%maps2002) (if (null? (car %%maps2002)) (syntax-error %%src1958 "extra ellipsis in syntax form") (values (%%gen-map1954 %%x2001 (car %%maps2002)) (cdr %%maps2002)))))))) %%tmp1976) ((lambda (%%tmp2003) (if %%tmp2003 (apply (lambda (%%x2004 %%y2005) (call-with-values (lambda () (%%gen-syntax1950 %%src1958 %%x2004 %%r1960 %%maps1961 %%ellipsis?1962 #f)) (lambda (%%xnew2006 %%maps2007) (call-with-values (lambda () (%%gen-syntax1950 %%src1958 %%y2005 %%r1960 %%maps2007 %%ellipsis?1962 %%vec?1963)) (lambda (%%ynew2008 %%maps2009) (values (%%gen-cons1955 %%e1959 %%x2004 %%y2005 %%xnew2006 %%ynew2008) %%maps2009)))))) %%tmp2003) ((lambda (%%tmp2010) (if %%tmp2010 (apply (lambda (%%x12011 %%x22012) ((lambda (%%ls2013) (call-with-values (lambda () (%%gen-syntax1950 %%src1958 %%ls2013 %%r1960 %%maps1961 %%ellipsis?1962 #t)) (lambda (%%lsnew2014 %%maps2015) (values (%%gen-vector1956 %%e1959 %%ls2013 %%lsnew2014) %%maps2015)))) (cons %%x12011 %%x22012))) %%tmp2010) ((lambda (%%_2017) (values (list 'quote %%e1959) %%maps1961)) %%tmp1969))) ($syntax-dispatch %%tmp1969 '#(vector (any . each-any)))))) ($syntax-dispatch %%tmp1969 '(any . any))))) ($syntax-dispatch %%tmp1969 '(any any . any))))) ($syntax-dispatch %%tmp1969 '(any any)))) %%e1959)))) (%%gen-ref1951 (lambda (%%src2018 %%var2019 %%level2020 %%maps2021) (if (fx= %%level2020 0) (values %%var2019 %%maps2021) (if (null? %%maps2021) (syntax-error %%src2018 "missing ellipsis in syntax form") (call-with-values (lambda () (%%gen-ref1951 %%src2018 %%var2019 (fx- %%level2020 1) (cdr %%maps2021))) (lambda (%%outer-var2022 %%outer-maps2023) ((lambda (%%b2024) (if %%b2024 (values (cdr %%b2024) %%maps2021) ((lambda (%%inner-var2025) (values %%inner-var2025 (cons (cons (cons %%outer-var2022 %%inner-var2025) (car %%maps2021)) %%outer-maps2023))) (%%gen-var467 'tmp)))) (assq %%outer-var2022 (car %%maps2021))))))))) (%%gen-append1952 (lambda (%%x2026 %%y2027) (if (equal? %%y2027 ''()) %%x2026 (list 'append %%x2026 %%y2027)))) (%%gen-mappend1953 (lambda (%%e2028 %%map-env2029) (list 'apply '(primitive append) (%%gen-map1954 %%e2028 %%map-env2029)))) (%%gen-map1954 (lambda (%%e2030 %%map-env2031) ((lambda (%%formals2032 %%actuals2033) (if (eq? (car %%e2030) 'ref) (car %%actuals2033) (if (andmap (lambda (%%x2034) (if (eq? (car %%x2034) 'ref) (memq (cadr %%x2034) %%formals2032) #f)) (cdr %%e2030)) (cons 'map (cons (list 'primitive (car %%e2030)) (map ((lambda (%%r2035) (lambda (%%x2036) (cdr (assq (cadr %%x2036) %%r2035)))) (map cons %%formals2032 %%actuals2033)) (cdr %%e2030)))) (cons 'map (cons (list 'lambda %%formals2032 %%e2030) %%actuals2033))))) (map cdr %%map-env2031) (map (lambda (%%x2037) (list 'ref (car %%x2037))) %%map-env2031)))) (%%gen-cons1955 (lambda (%%e2038 %%x2039 %%y2040 %%xnew2041 %%ynew2042) ((lambda (%%t2043) (if (memv %%t2043 '(quote)) (if (eq? (car %%xnew2041) 'quote) ((lambda (%%xnew2044 %%ynew2045) (if (if (eq? %%xnew2044 %%x2039) (eq? %%ynew2045 %%y2040) #f) (list 'quote %%e2038) (list 'quote (cons %%xnew2044 %%ynew2045)))) (cadr %%xnew2041) (cadr %%ynew2042)) (if (eq? (cadr %%ynew2042) '()) (list 'list %%xnew2041) (list 'cons %%xnew2041 %%ynew2042))) (if (memv %%t2043 '(list)) (cons 'list (cons %%xnew2041 (cdr %%ynew2042))) (list 'cons %%xnew2041 %%ynew2042)))) (car %%ynew2042)))) (%%gen-vector1956 (lambda (%%e2046 %%ls2047 %%lsnew2048) (if (eq? (car %%lsnew2048) 'quote) (if (eq? (cadr %%lsnew2048) %%ls2047) (list 'quote %%e2046) (list 'quote (list->vector (cadr %%lsnew2048)))) (if (eq? (car %%lsnew2048) 'list) (cons 'vector (cdr %%lsnew2048)) (list 'list->vector %%lsnew2048))))) (%%regen1957 (lambda (%%x2049) ((lambda (%%t2050) (if (memv %%t2050 '(ref)) (cadr %%x2049) (if (memv %%t2050 '(primitive)) (cadr %%x2049) (if (memv %%t2050 '(quote)) ((lambda (%%x2051) (if (self-eval? (cadr %%x2049)) %%x2051 (build-source #f (list (build-source #f 'quote) %%x2051)))) (attach-source #f (cadr %%x2049))) (if (memv %%t2050 '(lambda)) (build-source #f (list (build-source #f 'lambda) (cadr %%x2049) (%%regen1957 (caddr %%x2049)))) (if (memv %%t2050 '(map)) ((lambda (%%ls2052) (build-source #f (cons (if (fx= (length %%ls2052) 2) 'map 'map) %%ls2052))) (map %%regen1957 (cdr %%x2049))) (build-source #f (cons (car %%x2049) (map %%regen1957 (cdr %%x2049)))))))))) (car %%x2049))))) (lambda (%%e2053 %%r2054 %%mr2055 %%w2056 %%ae2057 %%m?2058) ((lambda (%%e2059) ((lambda (%%tmp2060) ((lambda (%%tmp2061) (if %%tmp2061 (apply (lambda (%%_2062 %%x2063) (call-with-values (lambda () (%%gen-syntax1950 %%e2059 %%x2063 %%r2054 '() %%ellipsis?463 #f)) (lambda (%%e2064 %%maps2065) (%%regen1957 %%e2064)))) %%tmp2061) ((lambda (%%_2066) (syntax-error %%e2059)) %%tmp2060))) ($syntax-dispatch %%tmp2060 '(any any)))) %%e2059)) (%%source-wrap377 %%e2053 %%w2056 %%ae2057))))))) (%%global-extend222 'core 'lambda (lambda (%%e2067 %%r2068 %%mr2069 %%w2070 %%ae2071 %%m?2072) ((lambda (%%tmp2073) ((lambda (%%tmp2074) (if %%tmp2074 (apply (lambda (%%_2075 %%c2076) (call-with-values (lambda () (%%chi-lambda-clause460 (%%source-wrap377 %%e2067 %%w2070 %%ae2071) %%c2076 %%r2068 %%mr2069 %%w2070 %%m?2072)) (lambda (%%emitter2077 %%dsssl-args2078 %%vars2079 %%dsssl-formals2080 %%orig-vars2081 %%body2082) ((lambda (%%t2083) (if (memv %%t2083 '(keyword)) (build-source %%ae2071 (list (build-source %%ae2071 'lambda) %%dsssl-args2078 (build-source %%ae2071 (list (build-source %%ae2071 'receive) %%vars2079 (build-source %%ae2071 (list (build-source %%ae2071 'apply) (build-source %%ae2071 (list (build-source %%ae2071 'lambda) %%dsssl-formals2080 (build-source %%ae2071 (cons (build-source %%ae2071 'values) %%orig-vars2081)))) %%dsssl-args2078)) %%body2082)))) (if (memv %%t2083 '(optional/rest)) (build-source %%ae2071 (list (build-source %%ae2071 'lambda) %%dsssl-formals2080 %%body2082)) (if (memv %%t2083 '(rnrs)) (build-source %%ae2071 (list (build-source %%ae2071 'lambda) %%vars2079 %%body2082)) (void))))) %%emitter2077)))) %%tmp2074) (syntax-error %%tmp2073))) ($syntax-dispatch %%tmp2073 '(any . any)))) %%e2067))) (%%global-extend222 'core 'letrec (lambda (%%e2084 %%r2085 %%mr2086 %%w2087 %%ae2088 %%m?2089) ((lambda (%%tmp2090) ((lambda (%%tmp2091) (if %%tmp2091 (apply (lambda (%%_2092 %%id2093 %%val2094 %%e12095 %%e22096) ((lambda (%%ids2097) (if (not (%%valid-bound-ids?372 %%ids2097)) (%%invalid-ids-error374 (map (lambda (%%x2098) (%%wrap376 %%x2098 %%w2087)) %%ids2097) (%%source-wrap377 %%e2084 %%w2087 %%ae2088) "bound variable") ((lambda (%%labels2099 %%new-vars2100) ((lambda (%%w2101 %%r2102) (%%build-letrec154 %%ae2088 %%new-vars2100 (map (lambda (%%x2103) (%%chi434 %%x2103 %%r2102 %%mr2086 %%w2101 %%m?2089)) %%val2094) (%%chi-body439 (cons %%e12095 %%e22096) (%%source-wrap377 %%e2084 %%w2101 %%ae2088) %%r2102 %%mr2086 %%w2101 %%m?2089))) (%%make-binding-wrap350 %%ids2097 %%labels2099 %%w2087) (%%extend-var-env*215 %%labels2099 %%new-vars2100 %%r2085))) (%%gen-labels283 %%ids2097) (map %%gen-var467 %%ids2097)))) %%id2093)) %%tmp2091) ((lambda (%%_2107) (syntax-error (%%source-wrap377 %%e2084 %%w2087 %%ae2088))) %%tmp2090))) ($syntax-dispatch %%tmp2090 '(any #(each (any any)) any . each-any)))) %%e2084))) (%%global-extend222 'core 'if (lambda (%%e2108 %%r2109 %%mr2110 %%w2111 %%ae2112 %%m?2113) ((lambda (%%tmp2114) ((lambda (%%tmp2115) (if %%tmp2115 (apply (lambda (%%_2116 %%test2117 %%then2118) (build-source %%ae2112 (list (build-source %%ae2112 'if) (%%chi434 %%test2117 %%r2109 %%mr2110 %%w2111 %%m?2113) (%%chi434 %%then2118 %%r2109 %%mr2110 %%w2111 %%m?2113) (%%chi-void462)))) %%tmp2115) ((lambda (%%tmp2119) (if %%tmp2119 (apply (lambda (%%_2120 %%test2121 %%then2122 %%else2123) (build-source %%ae2112 (list (build-source %%ae2112 'if) (%%chi434 %%test2121 %%r2109 %%mr2110 %%w2111 %%m?2113) (%%chi434 %%then2122 %%r2109 %%mr2110 %%w2111 %%m?2113) (%%chi434 %%else2123 %%r2109 %%mr2110 %%w2111 %%m?2113)))) %%tmp2119) ((lambda (%%_2124) (syntax-error (%%source-wrap377 %%e2108 %%w2111 %%ae2112))) %%tmp2114))) ($syntax-dispatch %%tmp2114 '(any any any any))))) ($syntax-dispatch %%tmp2114 '(any any any)))) %%e2108))) (%%global-extend222 'set! 'set! '()) (%%global-extend222 'alias 'alias '()) (%%global-extend222 'begin 'begin '()) (%%global-extend222 'begin '##begin '()) (%%global-extend222 '$module-key '$module '()) (%%global-extend222 '$import '$import '()) (%%global-extend222 'define 'define '()) (%%global-extend222 'define-syntax 'define-syntax '()) (%%global-extend222 'eval-when 'eval-when '()) (%%global-extend222 'meta 'meta '()) (%%global-extend222 'core 'syntax-case ((lambda () (letrec ((%%convert-pattern2125 (lambda (%%pattern2129 %%keys2130) (letrec ((%%cvt*2131 (lambda (%%p*2133 %%n2134 %%ids2135) (if (null? %%p*2133) (values '() %%ids2135) (call-with-values (lambda () (%%cvt*2131 (cdr %%p*2133) %%n2134 %%ids2135)) (lambda (%%y2136 %%ids2137) (call-with-values (lambda () (%%cvt2132 (car %%p*2133) %%n2134 %%ids2137)) (lambda (%%x2138 %%ids2139) (values (cons %%x2138 %%y2136) %%ids2139)))))))) (%%cvt2132 (lambda (%%p2140 %%n2141 %%ids2142) (if (%%id?224 %%p2140) (if (%%bound-id-member?375 %%p2140 %%keys2130) (values (vector 'free-id %%p2140) %%ids2142) (values 'any (cons (cons %%p2140 %%n2141) %%ids2142))) ((lambda (%%tmp2143) ((lambda (%%tmp2144) (if (if %%tmp2144 (apply (lambda (%%x2145 %%dots2146) (%%ellipsis?463 %%dots2146)) %%tmp2144) #f) (apply (lambda (%%x2147 %%dots2148) (call-with-values (lambda () (%%cvt2132 %%x2147 (fx+ %%n2141 1) %%ids2142)) (lambda (%%p2149 %%ids2150) (values (if (eq? %%p2149 'any) 'each-any (vector 'each %%p2149)) %%ids2150)))) %%tmp2144) ((lambda (%%tmp2151) (if (if %%tmp2151 (apply (lambda (%%x2152 %%dots2153 %%y2154 %%z2155) (%%ellipsis?463 %%dots2153)) %%tmp2151) #f) (apply (lambda (%%x2156 %%dots2157 %%y2158 %%z2159) (call-with-values (lambda () (%%cvt2132 %%z2159 %%n2141 %%ids2142)) (lambda (%%z2160 %%ids2161) (call-with-values (lambda () (%%cvt*2131 %%y2158 %%n2141 %%ids2161)) (lambda (%%y2163 %%ids2164) (call-with-values (lambda () (%%cvt2132 %%x2156 (fx+ %%n2141 1) %%ids2164)) (lambda (%%x2165 %%ids2166) (values (vector 'each+ %%x2165 (reverse %%y2163) %%z2160) %%ids2166)))))))) %%tmp2151) ((lambda (%%tmp2167) (if %%tmp2167 (apply (lambda (%%x2168 %%y2169) (call-with-values (lambda () (%%cvt2132 %%y2169 %%n2141 %%ids2142)) (lambda (%%y2170 %%ids2171) (call-with-values (lambda () (%%cvt2132 %%x2168 %%n2141 %%ids2171)) (lambda (%%x2172 %%ids2173) (values (cons %%x2172 %%y2170) %%ids2173)))))) %%tmp2167) ((lambda (%%tmp2174) (if %%tmp2174 (apply (lambda () (values '() %%ids2142)) %%tmp2174) ((lambda (%%tmp2175) (if %%tmp2175 (apply (lambda (%%x2176) (call-with-values (lambda () (%%cvt2132 %%x2176 %%n2141 %%ids2142)) (lambda (%%p2178 %%ids2179) (values (vector 'vector %%p2178) %%ids2179)))) %%tmp2175) ((lambda (%%x2180) (values (vector 'atom (%%strip466 %%p2140 '(()))) %%ids2142)) %%tmp2143))) ($syntax-dispatch %%tmp2143 '#(vector each-any))))) ($syntax-dispatch %%tmp2143 '())))) ($syntax-dispatch %%tmp2143 '(any . any))))) ($syntax-dispatch %%tmp2143 '(any any . #(each+ any () any)))))) ($syntax-dispatch %%tmp2143 '(any any)))) %%p2140))))) (%%cvt2132 %%pattern2129 0 '())))) (%%build-dispatch-call2126 (lambda (%%pvars2181 %%exp2182 %%y2183 %%r2184 %%mr2185 %%m?2186) ((lambda (%%ids2187 %%levels2188) ((lambda (%%labels2189 %%new-vars2190) (build-source #f (cons 'apply (list (build-source #f (list (build-source #f 'lambda) %%new-vars2190 (%%chi434 %%exp2182 (%%extend-env*214 %%labels2189 (map (lambda (%%var2191 %%level2192) (cons 'syntax (cons %%var2191 %%level2192))) %%new-vars2190 (map cdr %%pvars2181)) %%r2184) %%mr2185 (%%make-binding-wrap350 %%ids2187 %%labels2189 '(())) %%m?2186))) %%y2183)))) (%%gen-labels283 %%ids2187) (map %%gen-var467 %%ids2187))) (map car %%pvars2181) (map cdr %%pvars2181)))) (%%gen-clause2127 (lambda (%%x2193 %%keys2194 %%clauses2195 %%r2196 %%mr2197 %%m?2198 %%pat2199 %%fender2200 %%exp2201) (call-with-values (lambda () (%%convert-pattern2125 %%pat2199 %%keys2194)) (lambda (%%p2202 %%pvars2203) (if (not (%%distinct-bound-ids?373 (map car %%pvars2203))) (%%invalid-ids-error374 (map car %%pvars2203) %%pat2199 "pattern variable") (if (not (andmap (lambda (%%x2204) (not (%%ellipsis?463 (car %%x2204)))) %%pvars2203)) (syntax-error %%pat2199 "misplaced ellipsis in syntax-case pattern") ((lambda (%%y2205) (build-source #f (cons (build-source #f (list (build-source #f 'lambda) (list %%y2205) (build-source #f (list (build-source #f 'if) ((lambda (%%tmp2215) ((lambda (%%tmp2216) (if %%tmp2216 (apply (lambda () %%y2205) %%tmp2216) ((lambda (%%_2217) (build-source #f (list (build-source #f 'if) %%y2205 (%%build-dispatch-call2126 %%pvars2203 %%fender2200 %%y2205 %%r2196 %%mr2197 %%m?2198) ((lambda (%%x2218) (if (self-eval? #f) %%x2218 (build-source #f (list (build-source #f 'quote) %%x2218)))) (attach-source #f #f))))) %%tmp2215))) ($syntax-dispatch %%tmp2215 '#(atom #t)))) %%fender2200) (%%build-dispatch-call2126 %%pvars2203 %%exp2201 %%y2205 %%r2196 %%mr2197 %%m?2198) (%%gen-syntax-case2128 %%x2193 %%keys2194 %%clauses2195 %%r2196 %%mr2197 %%m?2198))))) (list (if (eq? %%p2202 'any) (build-source #f (cons 'list (list %%x2193))) (build-source #f (cons '$syntax-dispatch (list %%x2193 ((lambda (%%x2219) (if (self-eval? %%p2202) %%x2219 (build-source #f (list (build-source #f 'quote) %%x2219)))) (attach-source #f %%p2202)))))))))) (%%gen-var467 'tmp)))))))) (%%gen-syntax-case2128 (lambda (%%x2220 %%keys2221 %%clauses2222 %%r2223 %%mr2224 %%m?2225) (if (null? %%clauses2222) (build-source #f (cons 'syntax-error (list %%x2220))) ((lambda (%%tmp2226) ((lambda (%%tmp2227) (if %%tmp2227 (apply (lambda (%%pat2228 %%exp2229) (if (if (%%id?224 %%pat2228) (if (not (%%bound-id-member?375 %%pat2228 %%keys2221)) (not (%%ellipsis?463 %%pat2228)) #f) #f) ((lambda (%%label2230 %%var2231) (build-source #f (cons (build-source #f (list (build-source #f 'lambda) (list %%var2231) (%%chi434 %%exp2229 (%%extend-env213 %%label2230 (cons 'syntax (cons %%var2231 0)) %%r2223) %%mr2224 (%%make-binding-wrap350 (list %%pat2228) (list %%label2230) '(())) %%m?2225))) (list %%x2220)))) (%%gen-label281) (%%gen-var467 %%pat2228)) (%%gen-clause2127 %%x2220 %%keys2221 (cdr %%clauses2222) %%r2223 %%mr2224 %%m?2225 %%pat2228 #t %%exp2229))) %%tmp2227) ((lambda (%%tmp2232) (if %%tmp2232 (apply (lambda (%%pat2233 %%fender2234 %%exp2235) (%%gen-clause2127 %%x2220 %%keys2221 (cdr %%clauses2222) %%r2223 %%mr2224 %%m?2225 %%pat2233 %%fender2234 %%exp2235)) %%tmp2232) ((lambda (%%_2236) (syntax-error (car %%clauses2222) "invalid syntax-case clause")) %%tmp2226))) ($syntax-dispatch %%tmp2226 '(any any any))))) ($syntax-dispatch %%tmp2226 '(any any)))) (car %%clauses2222)))))) (lambda (%%e2237 %%r2238 %%mr2239 %%w2240 %%ae2241 %%m?2242) ((lambda (%%e2243) ((lambda (%%tmp2244) ((lambda (%%tmp2245) (if %%tmp2245 (apply (lambda (%%_2246 %%val2247 %%key2248 %%m2249) (if (andmap (lambda (%%x2250) (if (%%id?224 %%x2250) (not (%%ellipsis?463 %%x2250)) #f)) %%key2248) ((lambda (%%x2252) (build-source %%ae2241 (cons (build-source #f (list (build-source #f 'lambda) (list %%x2252) (%%gen-syntax-case2128 %%x2252 %%key2248 %%m2249 %%r2238 %%mr2239 %%m?2242))) (list (%%chi434 %%val2247 %%r2238 %%mr2239 '(()) %%m?2242))))) (%%gen-var467 'tmp)) (syntax-error %%e2243 "invalid literals list in"))) %%tmp2245) (syntax-error %%tmp2244))) ($syntax-dispatch %%tmp2244 '(any any each-any . each-any)))) %%e2243)) (%%source-wrap377 %%e2237 %%w2240 %%ae2241))))))) (%%put-cte-hook46 'module (lambda (%%x2255) (letrec ((%%proper-export?2256 (lambda (%%e2257) ((lambda (%%tmp2258) ((lambda (%%tmp2259) (if %%tmp2259 (apply (lambda (%%id2260 %%e2261) (if (identifier? %%id2260) (andmap %%proper-export?2256 %%e2261) #f)) %%tmp2259) ((lambda (%%id2263) (identifier? %%id2263)) %%tmp2258))) ($syntax-dispatch %%tmp2258 '(any . each-any)))) %%e2257)))) ((lambda (%%tmp2264) ((lambda (%%orig2265) ((lambda (%%tmp2266) ((lambda (%%tmp2267) (if %%tmp2267 (apply (lambda (%%_2268 %%e2269 %%d2270) (if (andmap %%proper-export?2256 %%e2269) (list '#structure(#4# #(#5# begin #6# 3083940) #14=(#7# #structure(#9# #(_ e d) #(#7# #7# #7#) #("i" "i" "i")) . #15=(#structure(#9# #(orig) #(#7#) #("i")) #structure(#9# (proper-export?) (#7#) ("i")) #structure(#9# #(x) #(#7#) #("i")) #10# . #12#))) (cons '#structure(#4# #(#5# $module #6# 3542692) #14#) (cons %%orig2265 (cons '#structure(#4# #(#5# anon #6# 4394660) #14#) (cons %%e2269 %%d2270)))) (cons '#structure(#4# #(#5# $import #6# 5770916) #14#) (cons %%orig2265 '#structure(#4# (#(#5# #f #6# 6622884) #(#5# anon #6# 6819492)) #14#)))) (syntax-error %%x2255 "invalid exports list in"))) %%tmp2267) ((lambda (%%tmp2274) (if (if %%tmp2274 (apply (lambda (%%_2275 %%m2276 %%e2277 %%d2278) (identifier? %%m2276)) %%tmp2274) #f) (apply (lambda (%%_2279 %%m2280 %%e2281 %%d2282) (if (andmap %%proper-export?2256 %%e2281) (cons '#structure(#4# #(#5# $module #6# 3083945) (#7# #structure(#9# #(_ m e d) #(#7# #7# #7# #7#) #("i" "i" "i" "i")) . #15#)) (cons %%orig2265 (cons %%m2280 (cons %%e2281 %%d2282)))) (syntax-error %%x2255 "invalid exports list in"))) %%tmp2274) (syntax-error %%tmp2266))) ($syntax-dispatch %%tmp2266 '(any any each-any . each-any))))) ($syntax-dispatch %%tmp2266 '(any each-any . each-any)))) %%x2255)) %%tmp2264)) %%x2255)))) ((lambda () (letrec ((%%$module-exports2286 (lambda (%%m2288 %%r2289) ((lambda (%%b2290) ((lambda (%%t2291) (if (memv %%t2291 '($module)) ((lambda (%%interface2292) ((lambda (%%new-marks2293) ((lambda () (%%vmap423 (lambda (%%x2294) ((lambda (%%id2295) (%%make-syntax-object36 (syntax->datum %%id2295) ((lambda (%%marks2296) (%%make-wrap233 %%marks2296 (if (eq? (car %%marks2296) #f) (cons 'shift (%%wrap-subst235 '((top)))) (%%wrap-subst235 '((top)))))) (%%join-marks356 %%new-marks2293 (%%wrap-marks234 (%%syntax-object-wrap42 %%id2295)))))) (if (pair? %%x2294) (car %%x2294) %%x2294))) (%%interface-exports389 %%interface2292))))) (%%import-mark-delta441 %%m2288 %%interface2292))) (%%binding-value200 %%b2290)) (if (memv %%t2291 '(displaced-lexical)) (%%displaced-lexical-error217 %%m2288) (syntax-error %%m2288 "unknown module")))) (%%binding-type199 %%b2290))) (%%r2289 %%m2288)))) (%%$import-help2287 (lambda (%%orig2297 %%import-only?2298) (lambda (%%r2299) (letrec ((%%difference2300 (lambda (%%ls12306 %%ls22307) (if (null? %%ls12306) %%ls12306 (if (%%bound-id-member?375 (car %%ls12306) %%ls22307) (%%difference2300 (cdr %%ls12306) %%ls22307) (cons (car %%ls12306) (%%difference2300 (cdr %%ls12306) %%ls22307)))))) (%%prefix-add2301 (lambda (%%prefix-id2308) ((lambda (%%prefix2309) (lambda (%%id2310) (datum->syntax %%id2310 (string->symbol (string-append %%prefix2309 (symbol->string (syntax->datum %%id2310))))))) (symbol->string (syntax->datum %%prefix-id2308))))) (%%prefix-drop2302 (lambda (%%prefix-id2311) ((lambda (%%prefix2312) (lambda (%%id2313) ((lambda (%%s2314) ((lambda (%%np2315 %%ns2316) (begin (if (not (if (>= %%ns2316 %%np2315) (string=? (substring %%s2314 0 %%np2315) %%prefix2312) #f)) (syntax-error %%id2313 (string-append "missing expected prefix " %%prefix2312)) (void)) (datum->syntax %%id2313 (string->symbol (substring %%s2314 %%np2315 %%ns2316))))) (string-length %%prefix2312) (string-length %%s2314))) (symbol->string (syntax->datum %%id2313))))) (symbol->string (syntax->datum %%prefix-id2311))))) (%%gen-mid2303 (lambda (%%mid2317) (datum->syntax %%mid2317 (($generate-id) ((lambda (%%x2318) ((lambda (%%e2319) (if (annotation? %%e2319) (annotation-expression %%e2319) %%e2319)) (if (%%syntax-object?40 %%x2318) (%%syntax-object-expression41 %%x2318) %%x2318))) %%mid2317))))) (%%modspec2304 (lambda (%%m2320 %%exports?2321) ((lambda (%%tmp2322) ((lambda (%%tmp2323) (if %%tmp2323 (apply (lambda (%%orig2324 %%import-only?2325) ((lambda (%%tmp2326) ((lambda (%%tmp2327) (if (if %%tmp2327 (apply (lambda (%%m2328 %%id2329) (andmap identifier? %%id2329)) %%tmp2327) #f) (apply (lambda (%%m2331 %%id2332) (call-with-values (lambda () (%%modspec2304 %%m2331 #f)) (lambda (%%mid2333 %%d2334 %%exports2335) ((lambda (%%tmp2336) ((lambda (%%tmp2337) (if %%tmp2337 (apply (lambda (%%d2338 %%tmid2339) (values %%mid2333 (list '#structure(#4# #(#5# begin #6# 3935983) #16=(#7# #structure(#9# #(d tmid) #(#7# #7#) #("i" "i")) #structure(#9# () () ()) #structure(#9# #(mid d exports) #(#7# #7# #7#) #("i" "i" "i")) #structure(#9# #(m id) #(#7# #7#) #("i" "i")) . #17=(#structure(#9# #(orig import-only?) #(#7# #7#) #("i" "i")) #structure(#9# () () ()) #structure(#9# #(m exports?) #(#7# #7#) #("i" "i")) . #18=(#structure(#9# (modspec* modspec gen-mid prefix-drop prefix-add difference) (#7# #7# #7# #7# #7# #7#) ("i" "i" "i" "i" "i" "i")) #structure(#9# #(r) #(#7#) #("i")) #structure(#9# () () ()) #structure(#9# #(orig import-only?) #(#7# #7#) #("i" "i")) #structure(#9# ($import-help $module-exports) (#7# #7#) ("i" "i")) #10# . #12#)))) (list '#structure(#4# #(#5# $module #6# 4394735) #16#) %%orig2324 %%tmid2339 %%id2332 %%d2338) (list '#structure(#4# #(#5# $import #6# 6426351) #16#) %%orig2324 %%import-only?2325 %%tmid2339)) (if %%exports?2321 %%id2332 #f))) %%tmp2337) (syntax-error %%tmp2336))) ($syntax-dispatch %%tmp2336 '(any any)))) (list %%d2334 (%%gen-mid2303 %%mid2333)))))) %%tmp2327) ((lambda (%%tmp2342) (if (if %%tmp2342 (apply (lambda (%%m2343 %%id2344) (andmap identifier? %%id2344)) %%tmp2342) #f) (apply (lambda (%%m2346 %%id2347) (call-with-values (lambda () (%%modspec2304 %%m2346 #t)) (lambda (%%mid2348 %%d2349 %%exports2350) ((lambda (%%tmp2351) ((lambda (%%tmp2352) (if %%tmp2352 (apply (lambda (%%d2353 %%tmid2354 %%id2355) (values %%mid2348 (list '#structure(#4# #(#5# begin #6# 3935992) #19=(#7# #structure(#9# #(d tmid id) #(#7# #7# #7#) #("i" "i" "i")) #structure(#9# () () ()) #structure(#9# #(mid d exports) #(#7# #7# #7#) #("i" "i" "i")) #structure(#9# #(m id) #(#7# #7#) #("i" "i")) . #17#)) (list '#structure(#4# #(#5# $module #6# 4394744) #19#) %%orig2324 %%tmid2354 %%id2355 %%d2353) (list '#structure(#4# #(#5# $import #6# 6426360) #19#) %%orig2324 %%import-only?2325 %%tmid2354)) (if %%exports?2321 %%id2355 #f))) %%tmp2352) (syntax-error %%tmp2351))) ($syntax-dispatch %%tmp2351 '(any any each-any)))) (list %%d2349 (%%gen-mid2303 %%mid2348) (%%difference2300 %%exports2350 %%id2347)))))) %%tmp2342) ((lambda (%%tmp2359) (if (if %%tmp2359 (apply (lambda (%%m2360 %%prefix-id2361) (identifier? %%prefix-id2361)) %%tmp2359) #f) (apply (lambda (%%m2362 %%prefix-id2363) (call-with-values (lambda () (%%modspec2304 %%m2362 #t)) (lambda (%%mid2364 %%d2365 %%exports2366) ((lambda (%%tmp2367) ((lambda (%%tmp2368) (if %%tmp2368 (apply (lambda (%%d2369 %%tmid2370 %%old-id2371 %%tmp2372 %%id2373) (values %%mid2364 (list '#structure(#4# #(#5# begin #6# 3936003) #20=(#7# #structure(#9# #(d tmid old-id tmp id) #(#7# #7# #7# #7# #7#) #("i" "i" "i" "i" "i")) #structure(#9# () () ()) #structure(#9# #(mid d exports) #(#7# #7# #7#) #("i" "i" "i")) #structure(#9# #(m prefix-id) #(#7# #7#) #("i" "i")) . #17#)) (cons '#structure(#4# #(#5# $module #6# 4394755) #20#) (cons %%orig2324 (cons %%tmid2370 (cons (map list %%id2373 %%tmp2372) (cons (cons '#structure(#4# #(#5# $module #6# 4984580) #20#) (cons %%orig2324 (cons %%tmid2370 (cons (map list %%tmp2372 %%old-id2371) (cons %%d2369 (map (lambda (%%tmp2379 %%tmp2378) (list '#structure(#4# #(#5# alias #6# 7606020) #20#) %%tmp2378 %%tmp2379)) %%old-id2371 %%tmp2372)))))) (cons (list '#structure(#4# #(#5# $import #6# 4984581) #20#) %%orig2324 %%import-only?2325 %%tmid2370) (map (lambda (%%tmp2381 %%tmp2380) (list '#structure(#4# #(#5# alias #6# 4984582) #20#) %%tmp2380 %%tmp2381)) %%tmp2372 %%id2373))))))) (list '#structure(#4# #(#5# $import #6# 4394759) #20#) %%orig2324 %%import-only?2325 %%tmid2370)) (if %%exports?2321 %%id2373 #f))) %%tmp2368) (syntax-error %%tmp2367))) ($syntax-dispatch %%tmp2367 '(any any each-any each-any each-any)))) (list %%d2365 (%%gen-mid2303 %%mid2364) %%exports2366 (generate-temporaries %%exports2366) (map (%%prefix-add2301 %%prefix-id2363) %%exports2366)))))) %%tmp2359) ((lambda (%%tmp2383) (if (if %%tmp2383 (apply (lambda (%%m2384 %%prefix-id2385) (identifier? %%prefix-id2385)) %%tmp2383) #f) (apply (lambda (%%m2386 %%prefix-id2387) (call-with-values (lambda () (%%modspec2304 %%m2386 #t)) (lambda (%%mid2388 %%d2389 %%exports2390) ((lambda (%%tmp2391) ((lambda (%%tmp2392) (if %%tmp2392 (apply (lambda (%%d2393 %%tmid2394 %%old-id2395 %%tmp2396 %%id2397) (values %%mid2388 (list '#structure(#4# #(#5# begin #6# 3936018) #21=(#7# #structure(#9# #(d tmid old-id tmp id) #(#7# #7# #7# #7# #7#) #("i" "i" "i" "i" "i")) #structure(#9# () () ()) #structure(#9# #(mid d exports) #(#7# #7# #7#) #("i" "i" "i")) #structure(#9# #(m prefix-id) #(#7# #7#) #("i" "i")) . #17#)) (cons '#structure(#4# #(#5# $module #6# 4394770) #21#) (cons %%orig2324 (cons %%tmid2394 (cons (map list %%id2397 %%tmp2396) (cons (cons '#structure(#4# #(#5# $module #6# 4984595) #21#) (cons %%orig2324 (cons %%tmid2394 (cons (map list %%tmp2396 %%old-id2395) (cons %%d2393 (map (lambda (%%tmp2403 %%tmp2402) (list '#structure(#4# #(#5# alias #6# 7606035) #21#) %%tmp2402 %%tmp2403)) %%old-id2395 %%tmp2396)))))) (cons (list '#structure(#4# #(#5# $import #6# 4984596) #21#) %%orig2324 %%import-only?2325 %%tmid2394) (map (lambda (%%tmp2405 %%tmp2404) (list '#structure(#4# #(#5# alias #6# 4984597) #21#) %%tmp2404 %%tmp2405)) %%tmp2396 %%id2397))))))) (list '#structure(#4# #(#5# $import #6# 4394774) #21#) %%orig2324 %%import-only?2325 %%tmid2394)) (if %%exports?2321 %%id2397 #f))) %%tmp2392) (syntax-error %%tmp2391))) ($syntax-dispatch %%tmp2391 '(any any each-any each-any each-any)))) (list %%d2389 (%%gen-mid2303 %%mid2388) %%exports2390 (generate-temporaries %%exports2390) (map (%%prefix-drop2302 %%prefix-id2387) %%exports2390)))))) %%tmp2383) ((lambda (%%tmp2407) (if (if %%tmp2407 (apply (lambda (%%m2408 %%new-id2409 %%old-id2410) (if (andmap identifier? %%new-id2409) (andmap identifier? %%old-id2410) #f)) %%tmp2407) #f) (apply (lambda (%%m2413 %%new-id2414 %%old-id2415) (call-with-values (lambda () (%%modspec2304 %%m2413 #t)) (lambda (%%mid2416 %%d2417 %%exports2418) ((lambda (%%tmp2419) ((lambda (%%tmp2420) (if %%tmp2420 (apply (lambda (%%d2421 %%tmid2422 %%tmp2423 %%other-id2424) (values %%mid2416 (list '#structure(#4# #(#5# begin #6# 3936033) #22=(#7# #structure(#9# #(d tmid tmp other-id) #(#7# #7# #7# #7#) #("i" "i" "i" "i")) #structure(#9# () () ()) #structure(#9# #(mid d exports) #(#7# #7# #7#) #("i" "i" "i")) #structure(#9# #(m new-id old-id) #(#7# #7# #7#) #("i" "i" "i")) . #17#)) (cons '#structure(#4# #(#5# $module #6# 4394785) #22#) (cons %%orig2324 (cons %%tmid2422 (cons (append (map list %%new-id2414 %%tmp2423) %%other-id2424) (cons (cons '#structure(#4# #(#5# $module #6# 4984610) #22#) (cons %%orig2324 (cons %%tmid2422 (cons (append %%other-id2424 (map list %%tmp2423 %%old-id2415)) (cons %%d2421 (map (lambda (%%tmp2432 %%tmp2431) (list '#structure(#4# #(#5# alias #6# 8458018) #22#) %%tmp2431 %%tmp2432)) %%old-id2415 %%tmp2423)))))) (cons (list '#structure(#4# #(#5# $import #6# 4984611) #22#) %%orig2324 %%import-only?2325 %%tmid2422) (map (lambda (%%tmp2434 %%tmp2433) (list '#structure(#4# #(#5# alias #6# 4984612) #22#) %%tmp2433 %%tmp2434)) %%tmp2423 %%new-id2414))))))) (list '#structure(#4# #(#5# $import #6# 4394789) #22#) %%orig2324 %%import-only?2325 %%tmid2422)) (if %%exports?2321 (append %%new-id2414 %%other-id2424) #f))) %%tmp2420) (syntax-error %%tmp2419))) ($syntax-dispatch %%tmp2419 '(any any each-any each-any)))) (list %%d2417 (%%gen-mid2303 %%mid2416) (generate-temporaries %%old-id2415) (%%difference2300 %%exports2418 %%old-id2415)))))) %%tmp2407) ((lambda (%%tmp2439) (if (if %%tmp2439 (apply (lambda (%%m2440 %%new-id2441 %%old-id2442) (if (andmap identifier? %%new-id2441) (andmap identifier? %%old-id2442) #f)) %%tmp2439) #f) (apply (lambda (%%m2445 %%new-id2446 %%old-id2447) (call-with-values (lambda () (%%modspec2304 %%m2445 #t)) (lambda (%%mid2448 %%d2449 %%exports2450) ((lambda (%%tmp2451) ((lambda (%%tmp2452) (if %%tmp2452 (apply (lambda (%%d2453 %%tmid2454 %%other-id2455) (values %%mid2448 (list '#structure(#4# #(#5# begin #6# 3936047) #23=(#7# #structure(#9# #(d tmid other-id) #(#7# #7# #7#) #("i" "i" "i")) #structure(#9# () () ()) #structure(#9# #(mid d exports) #(#7# #7# #7#) #("i" "i" "i")) #structure(#9# #(m new-id old-id) #(#7# #7# #7#) #("i" "i" "i")) . #17#)) (cons '#structure(#4# #(#5# $module #6# 4394799) #23#) (cons %%orig2324 (cons %%tmid2454 (cons (append (map list %%new-id2446 %%old-id2447) %%other-id2455) (cons %%d2453 (map (lambda (%%tmp2460 %%tmp2459) (list '#structure(#4# #(#5# alias #6# 8064815) #23#) %%tmp2459 %%tmp2460)) %%old-id2447 %%new-id2446)))))) (list '#structure(#4# #(#5# $import #6# 4394800) #23#) %%orig2324 %%import-only?2325 %%tmid2454)) (if %%exports?2321 (append %%new-id2446 %%other-id2455) #f))) %%tmp2452) (syntax-error %%tmp2451))) ($syntax-dispatch %%tmp2451 '(any any each-any)))) (list %%d2449 (%%gen-mid2303 %%mid2448) %%exports2450))))) %%tmp2439) ((lambda (%%tmp2463) (if (if %%tmp2463 (apply (lambda (%%mid2464) (identifier? %%mid2464)) %%tmp2463) #f) (apply (lambda (%%mid2465) (values %%mid2465 (list '#structure(#4# #(#5# $import #6# 2953014) (#7# #structure(#9# #(mid) #(#7#) #("i")) . #17#)) %%orig2324 %%import-only?2325 %%mid2465) (if %%exports?2321 (%%$module-exports2286 %%mid2465 %%r2299) #f))) %%tmp2463) ((lambda (%%tmp2466) (if (if %%tmp2466 (apply (lambda (%%mid2467) (identifier? %%mid2467)) %%tmp2466) #f) (apply (lambda (%%mid2468) (values %%mid2468 (list '#structure(#4# #(#5# $import #6# 2953019) (#7# #structure(#9# #(mid) #(#7#) #("i")) . #17#)) %%orig2324 %%import-only?2325 %%mid2468) (if %%exports?2321 (%%$module-exports2286 %%mid2468 %%r2299) #f))) %%tmp2466) ((lambda (%%_2469) (syntax-error %%m2320 "invalid module specifier")) %%tmp2326))) ($syntax-dispatch %%tmp2326 '(any))))) (list %%tmp2326)))) ($syntax-dispatch %%tmp2326 '(#(free-id #structure(#4# #(#5# alias #6# 1904423) #24=(#7# . #17#))) any . #(each (any any))))))) ($syntax-dispatch %%tmp2326 '(#(free-id #structure(#4# #(#5# rename #6# 1904408) #24#)) any . #(each (any any))))))) ($syntax-dispatch %%tmp2326 '(#(free-id #structure(#4# #(#5# drop-prefix #6# 1904393) #24#)) any any))))) ($syntax-dispatch %%tmp2326 '(#(free-id #structure(#4# #(#5# add-prefix #6# 1904378) #24#)) any any))))) ($syntax-dispatch %%tmp2326 '(#(free-id #structure(#4# #(#5# except #6# 1904369) #24#)) any . each-any))))) ($syntax-dispatch %%tmp2326 '(#(free-id #structure(#4# #(#5# only #6# 1904362) #24#)) any . each-any)))) %%m2320)) %%tmp2323) (syntax-error %%tmp2322))) ($syntax-dispatch %%tmp2322 '(any any)))) (list %%orig2297 %%import-only?2298)))) (%%modspec*2305 (lambda (%%m2470) (call-with-values (lambda () (%%modspec2304 %%m2470 #f)) (lambda (%%mid2471 %%d2472 %%exports2473) %%d2472))))) ((lambda (%%tmp2474) ((lambda (%%tmp2475) (if %%tmp2475 (apply (lambda (%%_2476 %%m2477) ((lambda (%%tmp2478) ((lambda (%%tmp2479) (if %%tmp2479 (apply (lambda (%%d2480) (cons '#structure(#4# #(#5# begin #6# 2297668) (#7# #structure(#9# #(d) #(#7#) #("i")) #structure(#9# #(_ m) #(#7# #7#) #("i" "i")) . #18#)) %%d2480)) %%tmp2479) (syntax-error %%tmp2478))) ($syntax-dispatch %%tmp2478 'each-any))) (map %%modspec*2305 %%m2477))) %%tmp2475) (syntax-error %%tmp2474))) ($syntax-dispatch %%tmp2474 '(any . each-any)))) %%orig2297)))))) (begin (%%put-cte-hook46 'import (lambda (%%orig2483) (%%$import-help2287 %%orig2483 #f))) (%%put-cte-hook46 'import-only (lambda (%%orig2484) (%%$import-help2287 %%orig2484 #t))))))) (set! make-expander (lambda (%%ctem2485 %%rtem2486) (lambda (%%x2487) ((lambda (%%env2488) (if (if (pair? %%x2487) (equal? (car %%x2487) %%noexpand35) #f) (cadr %%x2487) (%%chi-top*380 %%x2487 '() (%%env-wrap322 %%env2488) %%ctem2485 %%rtem2486 #f (%%env-top-ribcage320 %%env2488)))) (interaction-environment))))) (set! sc-expand (make-expander '(E) '(E))) (set! $make-environment (lambda (%%token2489 %%mutable?2490) ((lambda (%%top-ribcage2491) (%%make-env318 %%top-ribcage2491 (%%make-wrap233 (%%wrap-marks234 '((top))) (cons %%top-ribcage2491 (%%wrap-subst235 '((top))))))) (%%make-top-ribcage299 %%token2489 %%mutable?2490)))) (set! environment? (lambda (%%x2492) (%%env?319 %%x2492))) (set! interaction-environment ((lambda (%%e2493) (lambda () %%e2493)) ($make-environment '*top* #t))) (set! identifier? (lambda (%%x2494) (%%nonsymbol-id?223 %%x2494))) (set! datum->syntax (lambda (%%id2495 %%datum2496) (begin ((lambda (%%x2497) (if (not (%%nonsymbol-id?223 %%x2497)) (error (string-append #25="(in " (symbol->string 'datum->syntax) #26=") invalid argument") %%x2497) (void))) %%id2495) (%%make-syntax-object36 %%datum2496 (%%syntax-object-wrap42 %%id2495))))) (set! syntax->list (lambda (%%orig-ls2498) ((letrec ((%%f2499 (lambda (%%ls2500) ((lambda (%%tmp2501) ((lambda (%%tmp2502) (if %%tmp2502 (apply (lambda () '()) %%tmp2502) ((lambda (%%tmp2503) (if %%tmp2503 (apply (lambda (%%x2504 %%r2505) (cons %%x2504 (%%f2499 %%r2505))) %%tmp2503) ((lambda (%%_2506) (error "(in syntax->list) invalid argument" %%orig-ls2498)) %%tmp2501))) ($syntax-dispatch %%tmp2501 '(any . any))))) ($syntax-dispatch %%tmp2501 '()))) %%ls2500)))) %%f2499) %%orig-ls2498))) (set! syntax->vector (lambda (%%v2507) ((lambda (%%tmp2508) ((lambda (%%tmp2509) (if %%tmp2509 (apply (lambda (%%x2510) (list->vector (syntax->list %%x2510))) %%tmp2509) ((lambda (%%_2512) (error "(in syntax->vector) invalid argument" %%v2507)) %%tmp2508))) ($syntax-dispatch %%tmp2508 '#(vector each-any)))) %%v2507))) (set! syntax->datum (lambda (%%x2513) (%%strip466 %%x2513 '(())))) (set! generate-temporaries ((lambda (%%n2514) (lambda (%%ls2515) (begin ((lambda (%%x2516) (if (not (list? %%x2516)) (error (string-append #25# (symbol->string 'generate-temporaries) #26#) %%x2516) (void))) %%ls2515) (map (lambda (%%x2517) (begin (set! %%n2514 (+ %%n2514 1)) (%%wrap376 (string->symbol (string-append "t" (number->string %%n2514))) '((tmp))))) %%ls2515)))) 0)) (set! free-identifier=? (lambda (%%x2518 %%y2519) (begin ((lambda (%%x2520) (if (not (%%nonsymbol-id?223 %%x2520)) (error (string-append #25# (symbol->string 'free-identifier=?) #26#) %%x2520) (void))) %%x2518) ((lambda (%%x2521) (if (not (%%nonsymbol-id?223 %%x2521)) (error (string-append #25# (symbol->string 'free-identifier=?) #26#) %%x2521) (void))) %%y2519) (%%free-id=?368 %%x2518 %%y2519)))) (set! bound-identifier=? (lambda (%%x2522 %%y2523) (begin ((lambda (%%x2524) (if (not (%%nonsymbol-id?223 %%x2524)) (error (string-append #25# (symbol->string 'bound-identifier=?) #26#) %%x2524) (void))) %%x2522) ((lambda (%%x2525) (if (not (%%nonsymbol-id?223 %%x2525)) (error (string-append #25# (symbol->string 'bound-identifier=?) #26#) %%x2525) (void))) %%y2523) (%%bound-id=?371 %%x2522 %%y2523)))) (set! literal-identifier=? (lambda (%%x2526 %%y2527) (begin ((lambda (%%x2528) (if (not (%%nonsymbol-id?223 %%x2528)) (error (string-append #25# (symbol->string 'literal-identifier=?) #26#) %%x2528) (void))) %%x2526) ((lambda (%%x2529) (if (not (%%nonsymbol-id?223 %%x2529)) (error (string-append #25# (symbol->string 'literal-identifier=?) #26#) %%x2529) (void))) %%y2527) (%%literal-id=?369 %%x2526 %%y2527)))) (set! syntax-error (lambda (%%object2531 . %%messages2530) (begin (for-each (lambda (%%x2532) ((lambda (%%x2533) (if (not (string? %%x2533)) (error (string-append #25# (symbol->string 'syntax-error) #26#) %%x2533) (void))) %%x2532)) %%messages2530) ((lambda (%%messages2534 %%locat2535) (apply ##raise-expression-parsing-exception (cons 'psyntax-error (cons %%locat2535 (append %%messages2534 (list (list 'quote (%%strip466 %%object2531 '(()))))))))) (if (null? %%messages2530) '(invalid syntax) %%messages2530) ((lambda (%%t2536) (if %%t2536 %%t2536 (if (if (%%syntax-object?40 %%object2531) (annotation? (%%syntax-object-expression41 %%object2531)) #f) (%%syntax-object-expression41 %%object2531) #f))) (annotation? %%object2531)))))) ((lambda () (letrec ((%%match-each2537 (lambda (%%e2544 %%p2545 %%w2546) (if (annotation? %%e2544) (%%match-each2537 (annotation-expression %%e2544) %%p2545 %%w2546) (if (pair? %%e2544) ((lambda (%%first2547) (if %%first2547 ((lambda (%%rest2548) (if %%rest2548 (cons %%first2547 %%rest2548) #f)) (%%match-each2537 (cdr %%e2544) %%p2545 %%w2546)) #f)) (%%match2543 (car %%e2544) %%p2545 %%w2546 '())) (if (null? %%e2544) '() (if (%%syntax-object?40 %%e2544) (%%match-each2537 (%%syntax-object-expression41 %%e2544) %%p2545 (%%join-wraps355 %%w2546 (%%syntax-object-wrap42 %%e2544))) #f)))))) (%%match-each+2538 (lambda (%%e2549 %%x-pat2550 %%y-pat2551 %%z-pat2552 %%w2553 %%r2554) ((letrec ((%%f2555 (lambda (%%e2556 %%w2557) (if (pair? %%e2556) (call-with-values (lambda () (%%f2555 (cdr %%e2556) %%w2557)) (lambda (%%xr*2558 %%y-pat2559 %%r2560) (if %%r2560 (if (null? %%y-pat2559) ((lambda (%%xr2561) (if %%xr2561 (values (cons %%xr2561 %%xr*2558) %%y-pat2559 %%r2560) (values #f #f #f))) (%%match2543 (car %%e2556) %%x-pat2550 %%w2557 '())) (values '() (cdr %%y-pat2559) (%%match2543 (car %%e2556) (car %%y-pat2559) %%w2557 %%r2560))) (values #f #f #f)))) (if (annotation? %%e2556) (%%f2555 (annotation-expression %%e2556) %%w2557) (if (%%syntax-object?40 %%e2556) (%%f2555 (%%syntax-object-expression41 %%e2556) (%%join-wraps355 %%w2557 (%%syntax-object-wrap42 %%e2556))) (values '() %%y-pat2551 (%%match2543 %%e2556 %%z-pat2552 %%w2557 %%r2554)))))))) %%f2555) %%e2549 %%w2553))) (%%match-each-any2539 (lambda (%%e2562 %%w2563) (if (annotation? %%e2562) (%%match-each-any2539 (annotation-expression %%e2562) %%w2563) (if (pair? %%e2562) ((lambda (%%l2564) (if %%l2564 (cons (%%wrap376 (car %%e2562) %%w2563) %%l2564) #f)) (%%match-each-any2539 (cdr %%e2562) %%w2563)) (if (null? %%e2562) '() (if (%%syntax-object?40 %%e2562) (%%match-each-any2539 (%%syntax-object-expression41 %%e2562) (%%join-wraps355 %%w2563 (%%syntax-object-wrap42 %%e2562))) #f)))))) (%%match-empty2540 (lambda (%%p2565 %%r2566) (if (null? %%p2565) %%r2566 (if (eq? %%p2565 'any) (cons '() %%r2566) (if (pair? %%p2565) (%%match-empty2540 (car %%p2565) (%%match-empty2540 (cdr %%p2565) %%r2566)) (if (eq? %%p2565 'each-any) (cons '() %%r2566) ((lambda (%%t2567) (if (memv %%t2567 '(each)) (%%match-empty2540 (vector-ref %%p2565 1) %%r2566) (if (memv %%t2567 '(each+)) (%%match-empty2540 (vector-ref %%p2565 1) (%%match-empty2540 (reverse (vector-ref %%p2565 2)) (%%match-empty2540 (vector-ref %%p2565 3) %%r2566))) (if (memv %%t2567 '(free-id atom)) %%r2566 (if (memv %%t2567 '(vector)) (%%match-empty2540 (vector-ref %%p2565 1) %%r2566) (void)))))) (vector-ref %%p2565 0)))))))) (%%combine2541 (lambda (%%r*2568 %%r2569) (if (null? (car %%r*2568)) %%r2569 (cons (map car %%r*2568) (%%combine2541 (map cdr %%r*2568) %%r2569))))) (%%match*2542 (lambda (%%e2570 %%p2571 %%w2572 %%r2573) (if (null? %%p2571) (if (null? %%e2570) %%r2573 #f) (if (pair? %%p2571) (if (pair? %%e2570) (%%match2543 (car %%e2570) (car %%p2571) %%w2572 (%%match2543 (cdr %%e2570) (cdr %%p2571) %%w2572 %%r2573)) #f) (if (eq? %%p2571 'each-any) ((lambda (%%l2574) (if %%l2574 (cons %%l2574 %%r2573) #f)) (%%match-each-any2539 %%e2570 %%w2572)) ((lambda (%%t2575) (if (memv %%t2575 '(each)) (if (null? %%e2570) (%%match-empty2540 (vector-ref %%p2571 1) %%r2573) ((lambda (%%r*2576) (if %%r*2576 (%%combine2541 %%r*2576 %%r2573) #f)) (%%match-each2537 %%e2570 (vector-ref %%p2571 1) %%w2572))) (if (memv %%t2575 '(free-id)) (if (%%id?224 %%e2570) (if (%%literal-id=?369 (%%wrap376 %%e2570 %%w2572) (vector-ref %%p2571 1)) %%r2573 #f) #f) (if (memv %%t2575 '(each+)) (call-with-values (lambda () (%%match-each+2538 %%e2570 (vector-ref %%p2571 1) (vector-ref %%p2571 2) (vector-ref %%p2571 3) %%w2572 %%r2573)) (lambda (%%xr*2577 %%y-pat2578 %%r2579) (if %%r2579 (if (null? %%y-pat2578) (if (null? %%xr*2577) (%%match-empty2540 (vector-ref %%p2571 1) %%r2579) (%%combine2541 %%xr*2577 %%r2579)) #f) #f))) (if (memv %%t2575 '(atom)) (if (equal? (vector-ref %%p2571 1) (%%strip466 %%e2570 %%w2572)) %%r2573 #f) (if (memv %%t2575 '(vector)) (if (vector? %%e2570) (%%match2543 (vector->list %%e2570) (vector-ref %%p2571 1) %%w2572 %%r2573) #f) (void))))))) (vector-ref %%p2571 0))))))) (%%match2543 (lambda (%%e2580 %%p2581 %%w2582 %%r2583) (if (not %%r2583) #f (if (eq? %%p2581 'any) (cons (%%wrap376 %%e2580 %%w2582) %%r2583) (if (%%syntax-object?40 %%e2580) (%%match*2542 ((lambda (%%e2584) (if (annotation? %%e2584) (annotation-expression %%e2584) %%e2584)) (%%syntax-object-expression41 %%e2580)) %%p2581 (%%join-wraps355 %%w2582 (%%syntax-object-wrap42 %%e2580)) %%r2583) (%%match*2542 ((lambda (%%e2585) (if (annotation? %%e2585) (annotation-expression %%e2585) %%e2585)) %%e2580) %%p2581 %%w2582 %%r2583))))))) (set! $syntax-dispatch (lambda (%%e2586 %%p2587) (if (eq? %%p2587 'any) (list %%e2586) (if (%%syntax-object?40 %%e2586) (%%match*2542 ((lambda (%%e2588) (if (annotation? %%e2588) (annotation-expression %%e2588) %%e2588)) (%%syntax-object-expression41 %%e2586)) %%p2587 (%%syntax-object-wrap42 %%e2586) '()) (%%match*2542 ((lambda (%%e2589) (if (annotation? %%e2589) (annotation-expression %%e2589) %%e2589)) %%e2586) %%p2587 '(()) '())))))))) (%%global-extend222 'macro 'with-syntax (lambda (%%x2590) ((lambda (%%tmp2591) ((lambda (%%tmp2592) (if %%tmp2592 (apply (lambda (%%_2593 %%e12594 %%e22595) (cons '#structure(#4# #(#5# begin #6# 1118364) (#7# #structure(#9# #(_ e1 e2) #(#7# #7# #7#) #("i" "i" "i")) . #27=(#structure(#9# () () ()) #structure(#9# #(x) #(#7#) #("i")) #10# . #12#))) (cons %%e12594 %%e22595))) %%tmp2592) ((lambda (%%tmp2597) (if %%tmp2597 (apply (lambda (%%_2598 %%out2599 %%in2600 %%e12601 %%e22602) (list '#structure(#4# #(#5# syntax-case #6# 1118366) #28=(#7# #structure(#9# #(_ out in e1 e2) #(#7# #7# #7# #7# #7#) #("i" "i" "i" "i" "i")) . #27#)) %%in2600 '#structure(#4# #(#5# () #6# 2101406) #28#) (list %%out2599 (cons '#structure(#4# #(#5# begin #6# 2691230) #28#) (cons %%e12601 %%e22602))))) %%tmp2597) ((lambda (%%tmp2604) (if %%tmp2604 (apply (lambda (%%_2605 %%out2606 %%in2607 %%e12608 %%e22609) (list '#structure(#4# #(#5# syntax-case #6# 1118368) #29=(#7# #structure(#9# #(_ out in e1 e2) #(#7# #7# #7# #7# #7#) #("i" "i" "i" "i" "i")) . #27#)) (cons '#structure(#4# #(#5# list #6# 1970336) #29#) %%in2607) '#structure(#4# #(#5# () #6# 2822304) #29#) (list %%out2606 (cons '#structure(#4# #(#5# begin #6# 1970337) #29#) (cons %%e12608 %%e22609))))) %%tmp2604) (syntax-error %%tmp2591))) ($syntax-dispatch %%tmp2591 '(any #(each (any any)) any . each-any))))) ($syntax-dispatch %%tmp2591 '(any ((any any)) any . each-any))))) ($syntax-dispatch %%tmp2591 '(any () any . each-any)))) %%x2590))) (%%global-extend222 'macro 'with-implicit (lambda (%%x2613) ((lambda (%%tmp2614) ((lambda (%%tmp2615) (if (if %%tmp2615 (apply (lambda (%%dummy2616 %%tid2617 %%id2618 %%e12619 %%e22620) (andmap identifier? (cons %%tid2617 %%id2618))) %%tmp2615) #f) (apply (lambda (%%dummy2622 %%tid2623 %%id2624 %%e12625 %%e22626) (list '#structure(#4# #(#5# begin #6# 463016) #30=(#7# #structure(#9# #(dummy tid id e1 e2) #((#31="m" . #11#) #7# #7# #7# #7#) #("i" "i" "i" "i" "i")) #structure(#9# () () ()) #structure(#9# #(x) #((#31# . #11#)) #("i")) #10# . #12#)) (list '#structure(#4# #(#5# unless #6# 594089) #30#) (list '#structure(#4# #(#5# identifier? #6# 1118377) #30#) (list '#structure(#4# #(#5# syntax #6# 1970345) #30#) %%tid2623)) (cons '#structure(#4# #(#5# syntax-error #6# 1118378) #30#) (cons (list '#structure(#4# #(#5# syntax #6# 2035882) #30#) %%tid2623) '#structure(#4# (#(#5# "non-identifier with-implicit template" #6# 2822314)) #30#)))) (cons '#structure(#4# #(#5# with-syntax #6# 594091) #30#) (cons (map (lambda (%%tmp2627) (list %%tmp2627 (list '#structure(#4# #(#5# datum->syntax #6# 1773739) #30#) (list '#structure(#4# #(#5# syntax #6# 3215531) #30#) %%tid2623) (list '#structure(#4# #(#5# quote #6# 4001963) #30#) %%tmp2627)))) %%id2624) (cons %%e12625 %%e22626))))) %%tmp2615) (syntax-error %%tmp2614))) ($syntax-dispatch %%tmp2614 '(any (any . each-any) any . each-any)))) %%x2613))) (%%global-extend222 'macro 'datum (lambda (%%x2629) ((lambda (%%tmp2630) ((lambda (%%tmp2631) (if %%tmp2631 (apply (lambda (%%dummy2632 %%x2633) (list '#structure(#4# #(#5# syntax->datum #6# 856241) #32=(#7# #structure(#9# #(dummy x) #((#33="m" . #11#) #7#) #("i" "i")) #structure(#9# () () ()) #structure(#9# #(x) #((#33# . #11#)) #("i")) #10# . #12#)) (list '#structure(#4# #(#5# syntax #6# 2298033) #32#) %%x2633))) %%tmp2631) (syntax-error %%tmp2630))) ($syntax-dispatch %%tmp2630 '(any any)))) %%x2629))) (%%global-extend222 'macro 'syntax-rules (lambda (%%x2634) (letrec ((%%clause2635 (lambda (%%y2636) ((lambda (%%tmp2637) ((lambda (%%tmp2638) (if %%tmp2638 (apply (lambda (%%keyword2639 %%pattern2640 %%template2641) (list (cons '#structure(#4# #(#5# dummy #6# 1446074) #34=(#7# #structure(#9# #(keyword pattern template) #(#7# #7# #7#) #("i" "i" "i")) . #35=(#structure(#9# () () ()) #structure(#9# #(y) #(#7#) #("i")) . #36=(#structure(#9# (clause) (#7#) ("i")) #structure(#9# #(x) #(#7#) #("i")) #10# . #12#)))) %%pattern2640) (list '#structure(#4# #(#5# syntax #6# 2625722) #34#) %%template2641))) %%tmp2638) ((lambda (%%tmp2642) (if %%tmp2642 (apply (lambda (%%keyword2643 %%pattern2644 %%fender2645 %%template2646) (list (cons '#structure(#4# #(#5# dummy #6# 1446076) #37=(#7# #structure(#9# #(keyword pattern fender template) #(#7# #7# #7# #7#) #("i" "i" "i" "i")) . #35#)) %%pattern2644) %%fender2645 (list '#structure(#4# #(#5# syntax #6# 3084476) #37#) %%template2646))) %%tmp2642) ((lambda (%%_2647) (syntax-error %%x2634)) %%tmp2637))) ($syntax-dispatch %%tmp2637 '((any . any) any any))))) ($syntax-dispatch %%tmp2637 '((any . any) any)))) %%y2636)))) ((lambda (%%tmp2648) ((lambda (%%tmp2649) (if (if %%tmp2649 (apply (lambda (%%_2650 %%k2651 %%cl2652) (andmap identifier? %%k2651)) %%tmp2649) #f) (apply (lambda (%%_2654 %%k2655 %%cl2656) ((lambda (%%tmp2657) ((lambda (%%tmp2658) (if %%tmp2658 (apply (lambda (%%cl2659) (list '#structure(#4# #(#5# lambda #6# 1970370) #38=(#7# #structure(#9# #(cl) #(#7#) #("i")) #structure(#9# #(_ k cl) #(#7# #7# #7#) #("i" "i" "i")) . #36#)) '#structure(#4# #(#5# (#(#5# x #6# 2494658)) #6# 2429122) #38#) (cons '#structure(#4# #(#5# syntax-case #6# 2756802) #38#) (cons '#structure(#4# #(#5# x #6# 3543234) #38#) (cons %%k2655 %%cl2659))))) %%tmp2658) (syntax-error %%tmp2657))) ($syntax-dispatch %%tmp2657 'each-any))) (map %%clause2635 %%cl2656))) %%tmp2649) (syntax-error %%tmp2648))) ($syntax-dispatch %%tmp2648 '(any each-any . each-any)))) %%x2634)))) (%%global-extend222 'macro 'or (lambda (%%x2663) ((lambda (%%tmp2664) ((lambda (%%tmp2665) (if %%tmp2665 (apply (lambda (%%_2666) '#structure(#4# #(#5# #f #6# 1315016) (#7# #structure(#9# #(_) #(#7#) #("i")) . #39=(#structure(#9# () () ()) #structure(#9# #(x) #(#7#) #("i")) #10# . #12#)))) %%tmp2665) ((lambda (%%tmp2667) (if %%tmp2667 (apply (lambda (%%_2668 %%e2669) %%e2669) %%tmp2667) ((lambda (%%tmp2670) (if %%tmp2670 (apply (lambda (%%_2671 %%e12672 %%e22673 %%e32674) (list '#structure(#4# #(#5# let #6# 1118411) #40=(#7# #structure(#9# #(_ e1 e2 e3) #(#7# #7# #7# #7#) #("i" "i" "i" "i")) . #39#)) (list (list '#structure(#4# #(#5# t #6# 1511627) #40#) %%e12672)) (list '#structure(#4# #(#5# if #6# 2035915) #40#) '#structure(#4# #(#5# t #6# 2232523) #40#) '#structure(#4# #(#5# t #6# 2363595) #40#) (cons '#structure(#4# #(#5# or #6# 2560203) #40#) (cons %%e22673 %%e32674))))) %%tmp2670) (syntax-error %%tmp2664))) ($syntax-dispatch %%tmp2664 '(any any any . each-any))))) ($syntax-dispatch %%tmp2664 '(any any))))) ($syntax-dispatch %%tmp2664 '(any)))) %%x2663))) (%%global-extend222 'macro 'and (lambda (%%x2676) ((lambda (%%tmp2677) ((lambda (%%tmp2678) (if %%tmp2678 (apply (lambda (%%_2679 %%e12680 %%e22681 %%e32682) (cons '#structure(#4# #(#5# if #6# 2232529) #41=(#7# #structure(#9# #(_ e1 e2 e3) #(#7# #7# #7# #7#) #("i" "i" "i" "i")) . #42=(#structure(#9# () () ()) #structure(#9# #(x) #(#7#) #("i")) #10# . #12#))) (cons %%e12680 (cons (cons '#structure(#4# #(#5# and #6# 2691281) #41#) (cons %%e22681 %%e32682)) '#structure(#4# (#(#5# #f #6# 3674321)) #41#))))) %%tmp2678) ((lambda (%%tmp2684) (if %%tmp2684 (apply (lambda (%%_2685 %%e2686) %%e2686) %%tmp2684) ((lambda (%%tmp2687) (if %%tmp2687 (apply (lambda (%%_2688) '#structure(#4# #(#5# #t #6# 1315027) (#7# #structure(#9# #(_) #(#7#) #("i")) . #42#))) %%tmp2687) (syntax-error %%tmp2677))) ($syntax-dispatch %%tmp2677 '(any))))) ($syntax-dispatch %%tmp2677 '(any any))))) ($syntax-dispatch %%tmp2677 '(any any any . each-any)))) %%x2676))) (%%global-extend222 'macro 'let (lambda (%%x2689) ((lambda (%%tmp2690) ((lambda (%%tmp2691) (if (if %%tmp2691 (apply (lambda (%%_2692 %%x2693 %%v2694 %%e12695 %%e22696) (andmap identifier? %%x2693)) %%tmp2691) #f) (apply (lambda (%%_2698 %%x2699 %%v2700 %%e12701 %%e22702) (cons (cons '#structure(#4# #(#5# lambda #6# 1183963) (#7# #structure(#9# #(_ x v e1 e2) #(#7# #7# #7# #7# #7#) #("i" "i" "i" "i" "i")) . #43=(#structure(#9# () () ()) #structure(#9# #(x) #(#7#) #("i")) #10# . #12#))) (cons %%x2699 (cons %%e12701 %%e22702))) %%v2700)) %%tmp2691) ((lambda (%%tmp2706) (if (if %%tmp2706 (apply (lambda (%%_2707 %%f2708 %%x2709 %%v2710 %%e12711 %%e22712) (andmap identifier? (cons %%f2708 %%x2709))) %%tmp2706) #f) (apply (lambda (%%_2714 %%f2715 %%x2716 %%v2717 %%e12718 %%e22719) (cons (list '#structure(#4# #(#5# letrec #6# 1183966) #44=(#7# #structure(#9# #(_ f x v e1 e2) #(#7# #7# #7# #7# #7# #7#) #("i" "i" "i" "i" "i" "i")) . #43#)) (list (list %%f2715 (cons '#structure(#4# #(#5# lambda #6# 1970398) #44#) (cons %%x2716 (cons %%e12718 %%e22719))))) %%f2715) %%v2717)) %%tmp2706) (syntax-error %%tmp2690))) ($syntax-dispatch %%tmp2690 '(any any #(each (any any)) any . each-any))))) ($syntax-dispatch %%tmp2690 '(any #(each (any any)) any . each-any)))) %%x2689))) (%%global-extend222 'macro 'let* (lambda (%%x2723) ((lambda (%%tmp2724) ((lambda (%%tmp2725) (if (if %%tmp2725 (apply (lambda (%%let*2726 %%x2727 %%v2728 %%e12729 %%e22730) (andmap identifier? %%x2727)) %%tmp2725) #f) (apply (lambda (%%let*2732 %%x2733 %%v2734 %%e12735 %%e22736) ((letrec ((%%f2737 (lambda (%%bindings2738) (if (null? %%bindings2738) (cons '#structure(#4# #(#5# let #6# 1511657) #45=(#7# . #46=(#structure(#9# () () ()) #structure(#9# #(bindings) #(#7#) #("i")) #structure(#9# #(f) #(#7#) #("i")) #structure(#9# #(let* x v e1 e2) #(#7# #7# #7# #7# #7#) #("i" "i" "i" "i" "i")) #structure(#9# () () ()) #structure(#9# #(x) #(#7#) #("i")) #10# . #12#))) (cons '#structure(#4# #(#5# () #6# 1773801) #45#) (cons %%e12735 %%e22736))) ((lambda (%%tmp2740) ((lambda (%%tmp2741) (if %%tmp2741 (apply (lambda (%%body2742 %%binding2743) (list '#structure(#4# #(#5# let #6# 2363628) (#7# #structure(#9# #(body binding) #(#7# #7#) #("i" "i")) . #46#)) (list %%binding2743) %%body2742)) %%tmp2741) (syntax-error %%tmp2740))) ($syntax-dispatch %%tmp2740 '(any any)))) (list (%%f2737 (cdr %%bindings2738)) (car %%bindings2738))))))) %%f2737) (map list %%x2733 %%v2734))) %%tmp2725) (syntax-error %%tmp2724))) ($syntax-dispatch %%tmp2724 '(any #(each (any any)) any . each-any)))) %%x2723))) (%%global-extend222 'macro 'cond (lambda (%%x2746) ((lambda (%%tmp2747) ((lambda (%%tmp2748) (if %%tmp2748 (apply (lambda (%%_2749 %%m12750 %%m22751) ((letrec ((%%f2752 (lambda (%%clause2753 %%clauses2754) (if (null? %%clauses2754) ((lambda (%%tmp2755) ((lambda (%%tmp2756) (if %%tmp2756 (apply (lambda (%%e12757 %%e22758) (cons '#structure(#4# #(#5# begin #6# 2822390) (#7# #structure(#9# #(e1 e2) #(#7# #7#) #("i" "i")) . #47=(#structure(#9# () () ()) #structure(#9# #(clause clauses) #(#7# #7#) #("i" "i")) #structure(#9# #(f) #(#7#) #("i")) #structure(#9# #(_ m1 m2) #(#7# #7# #7#) #("i" "i" "i")) #structure(#9# () () ()) #structure(#9# #(x) #(#7#) #("i")) #10# . #12#))) (cons %%e12757 %%e22758))) %%tmp2756) ((lambda (%%tmp2760) (if %%tmp2760 (apply (lambda (%%e02761) (cons '#structure(#4# #(#5# let #6# 2035959) #48=(#7# #structure(#9# #(e0) #(#7#) #("i")) . #47#)) (cons (list (list '#structure(#4# #(#5# t #6# 2429175) #48#) %%e02761)) '#structure(#4# (#(#5# (#(#5# if #6# 2953463) #(#5# t #6# 3150071) #(#5# t #6# 3281143)) #6# 2887927)) #48#)))) %%tmp2760) ((lambda (%%tmp2762) (if %%tmp2762 (apply (lambda (%%e02763 %%e12764) (list '#structure(#4# #(#5# let #6# 2429176) #49=(#7# #structure(#9# #(e0 e1) #(#7# #7#) #("i" "i")) . #47#)) (list (list '#structure(#4# #(#5# t #6# 2822392) #49#) %%e02763)) (list '#structure(#4# #(#5# if #6# 3346680) #49#) '#structure(#4# #(#5# t #6# 3543288) #49#) (cons %%e12764 '#structure(#4# (#(#5# t #6# 3936504)) #49#))))) %%tmp2762) ((lambda (%%tmp2765) (if %%tmp2765 (apply (lambda (%%e02766 %%e12767 %%e22768) (list '#structure(#4# #(#5# if #6# 2691321) #50=(#7# #structure(#9# #(e0 e1 e2) #(#7# #7# #7#) #("i" "i" "i")) . #47#)) %%e02766 (cons '#structure(#4# #(#5# begin #6# 3150073) #50#) (cons %%e12767 %%e22768)))) %%tmp2765) ((lambda (%%_2770) (syntax-error %%x2746)) %%tmp2755))) ($syntax-dispatch %%tmp2755 '(any any . each-any))))) ($syntax-dispatch %%tmp2755 '(any #(free-id #structure(#4# #(#5# => #6# 1380600) #51=(#7# . #47#))) any))))) ($syntax-dispatch %%tmp2755 '(any))))) ($syntax-dispatch %%tmp2755 '(#(free-id #structure(#4# #(#5# else #6# 1183990) #51#)) any . each-any)))) %%clause2753) ((lambda (%%tmp2771) ((lambda (%%rest2772) ((lambda (%%tmp2773) ((lambda (%%tmp2774) (if %%tmp2774 (apply (lambda (%%e02775) (list '#structure(#4# #(#5# let #6# 2887933) #52=(#7# #structure(#9# #(e0) #(#7#) #("i")) . #53=(#structure(#9# #(rest) #(#7#) #("i")) . #47#))) (list (list '#structure(#4# #(#5# t #6# 3281149) #52#) %%e02775)) (list '#structure(#4# #(#5# if #6# 3805437) #52#) '#structure(#4# #(#5# t #6# 4002045) #52#) '#structure(#4# #(#5# t #6# 4133117) #52#) %%rest2772))) %%tmp2774) ((lambda (%%tmp2776) (if %%tmp2776 (apply (lambda (%%e02777 %%e12778) (list '#structure(#4# #(#5# let #6# 3281150) #54=(#7# #structure(#9# #(e0 e1) #(#7# #7#) #("i" "i")) . #53#)) (list (list '#structure(#4# #(#5# t #6# 3674366) #54#) %%e02777)) (list '#structure(#4# #(#5# if #6# 4198654) #54#) '#structure(#4# #(#5# t #6# 4395262) #54#) (cons %%e12778 '#structure(#4# (#(#5# t #6# 4788478)) #54#)) %%rest2772))) %%tmp2776) ((lambda (%%tmp2779) (if %%tmp2779 (apply (lambda (%%e02780 %%e12781 %%e22782) (list '#structure(#4# #(#5# if #6# 3543295) #55=(#7# #structure(#9# #(e0 e1 e2) #(#7# #7# #7#) #("i" "i" "i")) . #53#)) %%e02780 (cons '#structure(#4# #(#5# begin #6# 4002047) #55#) (cons %%e12781 %%e22782)) %%rest2772)) %%tmp2779) ((lambda (%%_2784) (syntax-error %%x2746)) %%tmp2773))) ($syntax-dispatch %%tmp2773 '(any any . each-any))))) ($syntax-dispatch %%tmp2773 '(any #(free-id #structure(#4# #(#5# => #6# 2232574) (#7# . #53#))) any))))) ($syntax-dispatch %%tmp2773 '(any)))) %%clause2753)) %%tmp2771)) (%%f2752 (car %%clauses2754) (cdr %%clauses2754))))))) %%f2752) %%m12750 %%m22751)) %%tmp2748) (syntax-error %%tmp2747))) ($syntax-dispatch %%tmp2747 '(any any . each-any)))) %%x2746))) (%%global-extend222 'macro 'do (lambda (%%orig-x2786) ((lambda (%%tmp2787) ((lambda (%%tmp2788) (if %%tmp2788 (apply (lambda (%%_2789 %%var2790 %%init2791 %%step2792 %%e02793 %%e12794 %%c2795) ((lambda (%%tmp2796) ((lambda (%%tmp2797) (if %%tmp2797 (apply (lambda (%%step2798) ((lambda (%%tmp2799) ((lambda (%%tmp2800) (if %%tmp2800 (apply (lambda () (list '#structure(#4# #(#5# let #6# 2363664) #56=(#7# . #57=(#structure(#9# #(step) #(#7#) #("i")) #structure(#9# #(_ var init step e0 e1 c) #(#7# #7# #7# #7# #7# #7# #7#) #("i" "i" "i" "i" "i" "i" "i")) #structure(#9# () () ()) #structure(#9# #(orig-x) #(#7#) #("i")) #10# . #12#))) '#structure(#4# #(#5# do #6# 2625808) #56#) (map list %%var2790 %%init2791) (list '#structure(#4# #(#5# if #6# 2494737) #56#) (list '#structure(#4# #(#5# not #6# 2756881) #56#) %%e02793) (cons '#structure(#4# #(#5# begin #6# 2756882) #56#) (append %%c2795 (list (cons '#structure(#4# #(#5# do #6# 3608850) #56#) %%step2798))))))) %%tmp2800) ((lambda (%%tmp2805) (if %%tmp2805 (apply (lambda (%%e12806 %%e22807) (list '#structure(#4# #(#5# let #6# 2167060) #58=(#7# #structure(#9# #(e1 e2) #(#7# #7#) #("i" "i")) . #57#)) '#structure(#4# #(#5# do #6# 2429204) #58#) (map list %%var2790 %%init2791) (list '#structure(#4# #(#5# if #6# 2298133) #58#) %%e02793 (cons '#structure(#4# #(#5# begin #6# 2560278) #58#) (cons %%e12806 %%e22807)) (cons '#structure(#4# #(#5# begin #6# 2560279) #58#) (append %%c2795 (list (cons '#structure(#4# #(#5# do #6# 3412247) #58#) %%step2798))))))) %%tmp2805) (syntax-error %%tmp2799))) ($syntax-dispatch %%tmp2799 '(any . each-any))))) ($syntax-dispatch %%tmp2799 '()))) %%e12794)) %%tmp2797) (syntax-error %%tmp2796))) ($syntax-dispatch %%tmp2796 'each-any))) (map (lambda (%%v2814 %%s2815) ((lambda (%%tmp2816) ((lambda (%%tmp2817) (if %%tmp2817 (apply (lambda () %%v2814) %%tmp2817) ((lambda (%%tmp2818) (if %%tmp2818 (apply (lambda (%%e2819) %%e2819) %%tmp2818) ((lambda (%%_2820) (syntax-error %%orig-x2786)) %%tmp2816))) ($syntax-dispatch %%tmp2816 '(any))))) ($syntax-dispatch %%tmp2816 '()))) %%s2815)) %%var2790 %%step2792))) %%tmp2788) (syntax-error %%tmp2787))) ($syntax-dispatch %%tmp2787 '(any #(each (any any . any)) (any . each-any) . each-any)))) %%orig-x2786))) (%%global-extend222 'macro 'quasiquote ((lambda () (letrec ((%%quasi2823 (lambda (%%p2830 %%lev2831) ((lambda (%%tmp2832) ((lambda (%%tmp2833) (if %%tmp2833 (apply (lambda (%%p2834) (if (= %%lev2831 0) (list '#structure(#4# #(#5# "value" #6# 1118496) #59=(#7# #structure(#9# #(p) #(#7#) #("i")) . #60=(#structure(#9# () () ()) #structure(#9# #(p lev) #(#7# #7#) #("i" "i")) #61=#structure(#9# (emit quasivector quasilist* quasiappend quasicons vquasi quasi) (#7# #7# #7# #7# #7# #7# #7#) ("i" "i" "i" "i" "i" "i" "i")) . #62=(#10# . #12#)))) %%p2834) (%%quasicons2825 '#structure(#4# #(#5# (#(#5# "quote" #6# 1839393) #(#5# unquote #6# 2363681)) #6# 1773857) #59#) (%%quasi2823 (list %%p2834) (- %%lev2831 1))))) %%tmp2833) ((lambda (%%tmp2835) (if %%tmp2835 (apply (lambda (%%p2836) (%%quasicons2825 '#structure(#4# #(#5# (#(#5# "quote" #6# 2560290) #(#5# quasiquote #6# 3084578)) #6# 2494754) (#7# #structure(#9# #(p) #(#7#) #("i")) . #60#)) (%%quasi2823 (list %%p2836) (+ %%lev2831 1)))) %%tmp2835) ((lambda (%%tmp2837) (if %%tmp2837 (apply (lambda (%%p2838 %%q2839) ((lambda (%%tmp2840) ((lambda (%%tmp2841) (if %%tmp2841 (apply (lambda (%%p2842) (if (= %%lev2831 0) (%%quasilist*2827 (map (lambda (%%tmp2843) (list '#structure(#4# #(#5# "value" #6# 2167079) #63=(#7# #structure(#9# #(p) #(#7#) #("i")) . #64=(#structure(#9# #(p q) #(#7# #7#) #("i" "i")) . #60#))) %%tmp2843)) %%p2842) (%%quasi2823 %%q2839 %%lev2831)) (%%quasicons2825 (%%quasicons2825 '#structure(#4# #(#5# (#(#5# "quote" #6# 2101545) #(#5# unquote #6# 2625833)) #6# 2036009) #63#) (%%quasi2823 %%p2842 (- %%lev2831 1))) (%%quasi2823 %%q2839 %%lev2831)))) %%tmp2841) ((lambda (%%tmp2845) (if %%tmp2845 (apply (lambda (%%p2846) (if (= %%lev2831 0) (%%quasiappend2826 (map (lambda (%%tmp2847) (list '#structure(#4# #(#5# "value" #6# 2232621) #65=(#7# #structure(#9# #(p) #(#7#) #("i")) . #64#)) %%tmp2847)) %%p2846) (%%quasi2823 %%q2839 %%lev2831)) (%%quasicons2825 (%%quasicons2825 '#structure(#4# #(#5# (#(#5# "quote" #6# 2101551) #(#5# unquote-splicing #6# 2625839)) #6# 2036015) #65#) (%%quasi2823 %%p2846 (- %%lev2831 1))) (%%quasi2823 %%q2839 %%lev2831)))) %%tmp2845) ((lambda (%%_2849) (%%quasicons2825 (%%quasi2823 %%p2838 %%lev2831) (%%quasi2823 %%q2839 %%lev2831))) %%tmp2840))) ($syntax-dispatch %%tmp2840 '(#(free-id #structure(#4# #(#5# unquote-splicing #6# 921899) #66=(#7# . #64#))) . each-any))))) ($syntax-dispatch %%tmp2840 '(#(free-id #structure(#4# #(#5# unquote #6# 921893) #66#)) . each-any)))) %%p2838)) %%tmp2837) ((lambda (%%tmp2850) (if %%tmp2850 (apply (lambda (%%x2851) (%%quasivector2828 (%%vquasi2824 %%x2851 %%lev2831))) %%tmp2850) ((lambda (%%p2853) (list '#structure(#4# #(#5# "quote" #6# 987443) (#7# #structure(#9# #(p) #(#7#) #("i")) . #60#)) %%p2853)) %%tmp2832))) ($syntax-dispatch %%tmp2832 '#(vector each-any))))) ($syntax-dispatch %%tmp2832 '(any . any))))) ($syntax-dispatch %%tmp2832 '(#(free-id #structure(#4# #(#5# quasiquote #6# 725282) #67=(#7# . #60#))) any))))) ($syntax-dispatch %%tmp2832 '(#(free-id #structure(#4# #(#5# unquote #6# 725278) #67#)) any)))) %%p2830))) (%%vquasi2824 (lambda (%%p2854 %%lev2855) ((lambda (%%tmp2856) ((lambda (%%tmp2857) (if %%tmp2857 (apply (lambda (%%p2858 %%q2859) ((lambda (%%tmp2860) ((lambda (%%tmp2861) (if %%tmp2861 (apply (lambda (%%p2862) (if (= %%lev2855 0) (%%quasilist*2827 (map (lambda (%%tmp2863) (list '#structure(#4# #(#5# "value" #6# 2167098) #68=(#7# #structure(#9# #(p) #(#7#) #("i")) . #69=(#structure(#9# #(p q) #(#7# #7#) #("i" "i")) . #70=(#structure(#9# () () ()) #structure(#9# #(p lev) #(#7# #7#) #("i" "i")) #61# . #62#)))) %%tmp2863)) %%p2862) (%%vquasi2824 %%q2859 %%lev2855)) (%%quasicons2825 (%%quasicons2825 '#structure(#4# #(#5# (#(#5# "quote" #6# 2101564) #(#5# unquote #6# 2625852)) #6# 2036028) #68#) (%%quasi2823 %%p2862 (- %%lev2855 1))) (%%vquasi2824 %%q2859 %%lev2855)))) %%tmp2861) ((lambda (%%tmp2865) (if %%tmp2865 (apply (lambda (%%p2866) (if (= %%lev2855 0) (%%quasiappend2826 (map (lambda (%%tmp2867) (list '#structure(#4# #(#5# "value" #6# 2232640) #71=(#7# #structure(#9# #(p) #(#7#) #("i")) . #69#)) %%tmp2867)) %%p2866) (%%vquasi2824 %%q2859 %%lev2855)) (%%quasicons2825 (%%quasicons2825 '#structure(#4# #(#5# (#(#5# "quote" #6# 1446211) #(#5# unquote-splicing #6# 1970499)) #6# 1380675) #71#) (%%quasi2823 %%p2866 (- %%lev2855 1))) (%%vquasi2824 %%q2859 %%lev2855)))) %%tmp2865) ((lambda (%%_2869) (%%quasicons2825 (%%quasi2823 %%p2858 %%lev2855) (%%vquasi2824 %%q2859 %%lev2855))) %%tmp2860))) ($syntax-dispatch %%tmp2860 '(#(free-id #structure(#4# #(#5# unquote-splicing #6# 921918) #72=(#7# . #69#))) . each-any))))) ($syntax-dispatch %%tmp2860 '(#(free-id #structure(#4# #(#5# unquote #6# 921912) #72#)) . each-any)))) %%p2858)) %%tmp2857) ((lambda (%%tmp2870) (if %%tmp2870 (apply (lambda () '#structure(#4# #(#5# (#(#5# "quote" #6# 1052999) #(#5# () #6# 1577287)) #6# 987463) (#7# . #70#))) %%tmp2870) (syntax-error %%tmp2856))) ($syntax-dispatch %%tmp2856 '())))) ($syntax-dispatch %%tmp2856 '(any . any)))) %%p2854))) (%%quasicons2825 (lambda (%%x2871 %%y2872) ((lambda (%%tmp2873) ((lambda (%%tmp2874) (if %%tmp2874 (apply (lambda (%%x2875 %%y2876) ((lambda (%%tmp2877) ((lambda (%%tmp2878) (if %%tmp2878 (apply (lambda (%%dy2879) ((lambda (%%tmp2880) ((lambda (%%tmp2881) (if %%tmp2881 (apply (lambda (%%dx2882) (list '#structure(#4# #(#5# "quote" #6# 2756941) (#7# #structure(#9# #(dx) #(#7#) #("i")) . #73=(#structure(#9# #(dy) #(#7#) #("i")) . #74=(#structure(#9# #(x y) #(#7# #7#) #("i" "i")) #structure(#9# () () ()) #structure(#9# #(x y) #(#7# #7#) #("i" "i")) #61# . #62#)))) (cons %%dx2882 %%dy2879))) %%tmp2881) ((lambda (%%_2883) (if (null? %%dy2879) (list '#structure(#4# #(#5# "list" #6# 3150158) #75=(#7# #structure(#9# #(_) #(#7#) #("i")) . #73#)) %%x2875) (list '#structure(#4# #(#5# "list*" #6# 4002126) #75#) %%x2875 %%y2876))) %%tmp2880))) ($syntax-dispatch %%tmp2880 '(#(atom "quote") any)))) %%x2875)) %%tmp2878) ((lambda (%%tmp2884) (if %%tmp2884 (apply (lambda (%%stuff2885) (cons '#structure(#4# #(#5# "list" #6# 2822479) (#7# #structure(#9# #(stuff) #(#7#) #("i")) . #74#)) (cons %%x2875 %%stuff2885))) %%tmp2884) ((lambda (%%tmp2886) (if %%tmp2886 (apply (lambda (%%stuff2887) (cons '#structure(#4# #(#5# "list*" #6# 2888016) (#7# #structure(#9# #(stuff) #(#7#) #("i")) . #74#)) (cons %%x2875 %%stuff2887))) %%tmp2886) ((lambda (%%_2888) (list '#structure(#4# #(#5# "list*" #6# 1839441) (#7# #structure(#9# #(_) #(#7#) #("i")) . #74#)) %%x2875 %%y2876)) %%tmp2877))) ($syntax-dispatch %%tmp2877 '(#(atom "list*") . any))))) ($syntax-dispatch %%tmp2877 '(#(atom "list") . any))))) ($syntax-dispatch %%tmp2877 '(#(atom "quote") any)))) %%y2876)) %%tmp2874) (syntax-error %%tmp2873))) ($syntax-dispatch %%tmp2873 '(any any)))) (list %%x2871 %%y2872)))) (%%quasiappend2826 (lambda (%%x2889 %%y2890) ((lambda (%%tmp2891) ((lambda (%%tmp2892) (if %%tmp2892 (apply (lambda () (if (null? %%x2889) '#structure(#4# #(#5# (#(#5# "quote" #6# 1642838) #(#5# () #6# 2167126)) #6# 1577302) (#7# . #76=(#structure(#9# () () ()) #structure(#9# #(x y) #(#7# #7#) #("i" "i")) #61# . #62#))) (if (null? (cdr %%x2889)) (car %%x2889) ((lambda (%%tmp2893) ((lambda (%%tmp2894) (if %%tmp2894 (apply (lambda (%%p2895) (cons '#structure(#4# #(#5# "append" #6# 3084632) (#7# #structure(#9# #(p) #(#7#) #("i")) . #76#)) %%p2895)) %%tmp2894) (syntax-error %%tmp2893))) ($syntax-dispatch %%tmp2893 'each-any))) %%x2889)))) %%tmp2892) ((lambda (%%_2897) (if (null? %%x2889) %%y2890 ((lambda (%%tmp2898) ((lambda (%%tmp2899) (if %%tmp2899 (apply (lambda (%%p2900 %%y2901) (cons '#structure(#4# #(#5# "append" #6# 3477852) (#7# #structure(#9# #(p y) #(#7# #7#) #("i" "i")) #structure(#9# #(_) #(#7#) #("i")) . #76#)) (append %%p2900 (list %%y2901)))) %%tmp2899) (syntax-error %%tmp2898))) ($syntax-dispatch %%tmp2898 '(each-any any)))) (list %%x2889 %%y2890)))) %%tmp2891))) ($syntax-dispatch %%tmp2891 '(#(atom "quote") ())))) %%y2890))) (%%quasilist*2827 (lambda (%%x2903 %%y2904) ((letrec ((%%f2905 (lambda (%%x2906) (if (null? %%x2906) %%y2904 (%%quasicons2825 (car %%x2906) (%%f2905 (cdr %%x2906))))))) %%f2905) %%x2903))) (%%quasivector2828 (lambda (%%x2907) ((lambda (%%tmp2908) ((lambda (%%tmp2909) (if %%tmp2909 (apply (lambda (%%x2910) (list '#structure(#4# #(#5# "quote" #6# 2036068) (#7# #structure(#9# #(x) #(#7#) #("i")) . #77=(#structure(#9# () () ()) #structure(#9# #(x) #(#7#) #("i")) #61# . #62#))) (list->vector %%x2910))) %%tmp2909) ((lambda (%%_2912) ((letrec ((%%f2913 (lambda (%%y2914 %%k2915) ((lambda (%%tmp2916) ((lambda (%%tmp2917) (if %%tmp2917 (apply (lambda (%%y2918) (%%k2915 (map (lambda (%%tmp2919) (list '#structure(#4# #(#5# "quote" #6# 2625896) (#7# #structure(#9# #(y) #(#7#) #("i")) . #78=(#structure(#9# () () ()) #structure(#9# #(y k) #(#7# #7#) #("i" "i")) #structure(#9# #(f) #(#7#) #("i")) . #79=(#structure(#9# #(_) #(#7#) #("i")) . #77#)))) %%tmp2919)) %%y2918))) %%tmp2917) ((lambda (%%tmp2920) (if %%tmp2920 (apply (lambda (%%y2921) (%%k2915 %%y2921)) %%tmp2920) ((lambda (%%tmp2923) (if %%tmp2923 (apply (lambda (%%y2924 %%z2925) (%%f2913 %%z2925 (lambda (%%ls2926) (%%k2915 (append %%y2924 %%ls2926))))) %%tmp2923) ((lambda (%%else2928) ((lambda (%%tmp2929) ((lambda (%%t12930) (list '#structure(#4# #(#5# "list->vector" #6# 1511787) (#7# #structure(#9# #(t1) #(("m" . #80=(tmp))) #("i")) #structure(#9# #(else) #(#7#) #("i")) . #78#)) %%t12930)) %%tmp2929)) %%x2907)) %%tmp2916))) ($syntax-dispatch %%tmp2916 '(#(atom "list*") . #(each+ any (any) ())))))) ($syntax-dispatch %%tmp2916 '(#(atom "list") . each-any))))) ($syntax-dispatch %%tmp2916 '(#(atom "quote") each-any)))) %%y2914)))) %%f2913) %%x2907 (lambda (%%ls2931) ((lambda (%%tmp2932) ((lambda (%%tmp2933) (if %%tmp2933 (apply (lambda (%%t22934) (cons '#structure(#4# #(#5# "vector" #6# 2822502) (#7# #structure(#9# #(t2) #(("m" . #80#)) #("i")) #structure(#9# () () ()) #structure(#9# #(ls) #(#7#) #("i")) . #79#)) %%t22934)) %%tmp2933) (syntax-error %%tmp2932))) ($syntax-dispatch %%tmp2932 'each-any))) %%ls2931)))) %%tmp2908))) ($syntax-dispatch %%tmp2908 '(#(atom "quote") each-any)))) %%x2907))) (%%emit2829 (lambda (%%x2936) ((lambda (%%tmp2937) ((lambda (%%tmp2938) (if %%tmp2938 (apply (lambda (%%x2939) (list '#structure(#4# #(#5# quote #6# 1577326) (#7# #structure(#9# #(x) #(#7#) #("i")) . #81=(#structure(#9# () () ()) #structure(#9# #(x) #(#7#) #("i")) #61# . #62#))) %%x2939)) %%tmp2938) ((lambda (%%tmp2940) (if %%tmp2940 (apply (lambda (%%x2941) ((lambda (%%tmp2942) ((lambda (%%tmp2943) (if %%tmp2943 (apply (lambda (%%t32944) (cons '#structure(#4# #(#5# list #6# 1839471) (#7# #structure(#9# #(t3) #(("m" . #80#)) #("i")) #structure(#9# #(x) #(#7#) #("i")) . #81#)) %%t32944)) %%tmp2943) (syntax-error %%tmp2942))) ($syntax-dispatch %%tmp2942 'each-any))) (map %%emit2829 %%x2941))) %%tmp2940) ((lambda (%%tmp2947) (if %%tmp2947 (apply (lambda (%%x2948 %%y2949) ((letrec ((%%f2950 (lambda (%%x*2951) (if (null? %%x*2951) (%%emit2829 %%y2949) ((lambda (%%tmp2952) ((lambda (%%tmp2953) (if %%tmp2953 (apply (lambda (%%t52954 %%t42955) (list '#structure(#4# #(#5# cons #6# 1249653) (#7# #structure(#9# #(t5 t4) #((#82="m" . #80#) (#82# . #80#)) #("i" "i")) #structure(#9# () () ()) #structure(#9# #(x*) #(#7#) #("i")) #structure(#9# #(f) #(#7#) #("i")) #structure(#9# #(x y) #(#7# #7#) #("i" "i")) . #81#)) %%t52954 %%t42955)) %%tmp2953) (syntax-error %%tmp2952))) ($syntax-dispatch %%tmp2952 '(any any)))) (list (%%emit2829 (car %%x*2951)) (%%f2950 (cdr %%x*2951)))))))) %%f2950) %%x2948)) %%tmp2947) ((lambda (%%tmp2957) (if %%tmp2957 (apply (lambda (%%x2958) ((lambda (%%tmp2959) ((lambda (%%tmp2960) (if %%tmp2960 (apply (lambda (%%t62961) (cons '#structure(#4# #(#5# append #6# 1970550) (#7# #structure(#9# #(t6) #(("m" . #80#)) #("i")) #structure(#9# #(x) #(#7#) #("i")) . #81#)) %%t62961)) %%tmp2960) (syntax-error %%tmp2959))) ($syntax-dispatch %%tmp2959 'each-any))) (map %%emit2829 %%x2958))) %%tmp2957) ((lambda (%%tmp2964) (if %%tmp2964 (apply (lambda (%%x2965) ((lambda (%%tmp2966) ((lambda (%%tmp2967) (if %%tmp2967 (apply (lambda (%%t72968) (cons '#structure(#4# #(#5# vector #6# 1970551) (#7# #structure(#9# #(t7) #(("m" . #80#)) #("i")) #structure(#9# #(x) #(#7#) #("i")) . #81#)) %%t72968)) %%tmp2967) (syntax-error %%tmp2966))) ($syntax-dispatch %%tmp2966 'each-any))) (map %%emit2829 %%x2965))) %%tmp2964) ((lambda (%%tmp2971) (if %%tmp2971 (apply (lambda (%%x2972) ((lambda (%%tmp2973) ((lambda (%%t82974) (list '#structure(#4# #(#5# list->vector #6# 2101624) (#7# #structure(#9# #(t8) #(("m" . #80#)) #("i")) #structure(#9# #(x) #(#7#) #("i")) . #81#)) %%t82974)) %%tmp2973)) (%%emit2829 %%x2972))) %%tmp2971) ((lambda (%%tmp2975) (if %%tmp2975 (apply (lambda (%%x2976) %%x2976) %%tmp2975) (syntax-error %%tmp2937))) ($syntax-dispatch %%tmp2937 '(#(atom "value") any))))) ($syntax-dispatch %%tmp2937 '(#(atom "list->vector") any))))) ($syntax-dispatch %%tmp2937 '(#(atom "vector") . each-any))))) ($syntax-dispatch %%tmp2937 '(#(atom "append") . each-any))))) ($syntax-dispatch %%tmp2937 '(#(atom "list*") . #(each+ any (any) ())))))) ($syntax-dispatch %%tmp2937 '(#(atom "list") . each-any))))) ($syntax-dispatch %%tmp2937 '(#(atom "quote") any)))) %%x2936)))) (lambda (%%x2977) ((lambda (%%tmp2978) ((lambda (%%tmp2979) (if %%tmp2979 (apply (lambda (%%_2980 %%e2981) (%%emit2829 (%%quasi2823 %%e2981 0))) %%tmp2979) (syntax-error %%tmp2978))) ($syntax-dispatch %%tmp2978 '(any any)))) %%x2977)))))) (%%global-extend222 'macro 'quasisyntax (lambda (%%x2982) (letrec ((%%qs2983 (lambda (%%q2985 %%n2986 %%b*2987 %%k2988) ((lambda (%%tmp2989) ((lambda (%%tmp2990) (if %%tmp2990 (apply (lambda (%%d2991) (%%qs2983 %%d2991 (+ %%n2986 1) %%b*2987 (lambda (%%b*2992 %%dnew2993) (%%k2988 %%b*2992 (if (eq? %%dnew2993 %%d2991) %%q2985 ((lambda (%%tmp2994) ((lambda (%%d2995) (cons '#structure(#4# #(#5# quasisyntax #6# 3281305) (#7# #structure(#9# #(d) #(#7#) #("i")) #structure(#9# () () ()) #structure(#9# #(b* dnew) #(#7# #7#) #("i" "i")) #structure(#9# #(d) #(#7#) #("i")) . #83=(#structure(#9# () () ()) #structure(#9# #(q n b* k) #(#7# #7# #7# #7#) #("i" "i" "i" "i")) . #84=(#structure(#9# (vqs qs) (#7# #7#) ("i" "i")) #structure(#9# #(x) #(#7#) #("i")) #10# . #12#)))) %%d2995)) %%tmp2994)) %%dnew2993)))))) %%tmp2990) ((lambda (%%tmp2996) (if (if %%tmp2996 (apply (lambda (%%d2997) (not (= %%n2986 0))) %%tmp2996) #f) (apply (lambda (%%d2998) (%%qs2983 %%d2998 (- %%n2986 1) %%b*2987 (lambda (%%b*2999 %%dnew3000) (%%k2988 %%b*2999 (if (eq? %%dnew3000 %%d2998) %%q2985 ((lambda (%%tmp3001) ((lambda (%%d3002) (cons '#structure(#4# #(#5# unsyntax #6# 3281313) (#7# #structure(#9# #(d) #(#7#) #("i")) #structure(#9# () () ()) #structure(#9# #(b* dnew) #(#7# #7#) #("i" "i")) #structure(#9# #(d) #(#7#) #("i")) . #83#)) %%d3002)) %%tmp3001)) %%dnew3000)))))) %%tmp2996) ((lambda (%%tmp3003) (if (if %%tmp3003 (apply (lambda (%%d3004) (not (= %%n2986 0))) %%tmp3003) #f) (apply (lambda (%%d3005) (%%qs2983 %%d3005 (- %%n2986 1) %%b*2987 (lambda (%%b*3006 %%dnew3007) (%%k2988 %%b*3006 (if (eq? %%dnew3007 %%d3005) %%q2985 ((lambda (%%tmp3008) ((lambda (%%d3009) (cons '#structure(#4# #(#5# unsyntax-splicing #6# 3281321) (#7# #structure(#9# #(d) #(#7#) #("i")) #structure(#9# () () ()) #structure(#9# #(b* dnew) #(#7# #7#) #("i" "i")) #structure(#9# #(d) #(#7#) #("i")) . #83#)) %%d3009)) %%tmp3008)) %%dnew3007)))))) %%tmp3003) ((lambda (%%tmp3010) (if (if %%tmp3010 (apply (lambda (%%q3011) (= %%n2986 0)) %%tmp3010) #f) (apply (lambda (%%q3012) ((lambda (%%tmp3013) ((lambda (%%tmp3014) (if %%tmp3014 (apply (lambda (%%t3015) (%%k2988 (cons (list %%t3015 %%q3012) %%b*2987) %%t3015)) %%tmp3014) (syntax-error %%tmp3013))) ($syntax-dispatch %%tmp3013 '(any)))) (generate-temporaries (list %%q3012)))) %%tmp3010) ((lambda (%%tmp3016) (if (if %%tmp3016 (apply (lambda (%%q3017 %%d3018) (= %%n2986 0)) %%tmp3016) #f) (apply (lambda (%%q3019 %%d3020) (%%qs2983 %%d3020 %%n2986 %%b*2987 (lambda (%%b*3021 %%dnew3022) ((lambda (%%tmp3023) ((lambda (%%tmp3024) (if %%tmp3024 (apply (lambda (%%t3025) (%%k2988 (append (map list %%t3025 %%q3019) %%b*3021) ((lambda (%%tmp3028) ((lambda (%%d3029) (append %%t3025 %%d3029)) %%tmp3028)) %%dnew3022))) %%tmp3024) (syntax-error %%tmp3023))) ($syntax-dispatch %%tmp3023 'each-any))) (generate-temporaries %%q3019))))) %%tmp3016) ((lambda (%%tmp3032) (if (if %%tmp3032 (apply (lambda (%%q3033 %%d3034) (= %%n2986 0)) %%tmp3032) #f) (apply (lambda (%%q3035 %%d3036) (%%qs2983 %%d3036 %%n2986 %%b*2987 (lambda (%%b*3037 %%dnew3038) ((lambda (%%tmp3039) ((lambda (%%tmp3040) (if %%tmp3040 (apply (lambda (%%t3041) (%%k2988 (append (map (lambda (%%tmp3043 %%tmp3042) (list (cons %%tmp3042 '(#structure(#4# #(#5# ... #6# 3412410) (#7# . #85=(#structure(#9# #(t) #(#7#) #("i")) #structure(#9# () () ()) #structure(#9# #(b* dnew) #(#7# #7#) #("i" "i")) #structure(#9# #(q d) #(#7# #7#) #("i" "i")) . #83#))))) %%tmp3043)) %%q3035 %%t3041) %%b*3037) ((lambda (%%tmp3044) ((lambda (%%tmp3045) (if %%tmp3045 (apply (lambda (%%m3046) ((lambda (%%tmp3047) ((lambda (%%d3048) (append (apply append %%m3046) %%d3048)) %%tmp3047)) %%dnew3038)) %%tmp3045) (syntax-error %%tmp3044))) ($syntax-dispatch %%tmp3044 '#(each each-any)))) (map (lambda (%%tmp3051) (cons %%tmp3051 '(#structure(#4# #(#5# ... #6# 4723131) (#7# . #85#))))) %%t3041)))) %%tmp3040) (syntax-error %%tmp3039))) ($syntax-dispatch %%tmp3039 'each-any))) (generate-temporaries %%q3035))))) %%tmp3032) ((lambda (%%tmp3053) (if %%tmp3053 (apply (lambda (%%a3054 %%d3055) (%%qs2983 %%a3054 %%n2986 %%b*2987 (lambda (%%b*3056 %%anew3057) (%%qs2983 %%d3055 %%n2986 %%b*3056 (lambda (%%b*3058 %%dnew3059) (%%k2988 %%b*3058 (if (if (eq? %%anew3057 %%a3054) (eq? %%dnew3059 %%d3055) #f) %%q2985 ((lambda (%%tmp3060) ((lambda (%%tmp3061) (if %%tmp3061 (apply (lambda (%%a3062 %%d3063) (cons %%a3062 %%d3063)) %%tmp3061) (syntax-error %%tmp3060))) ($syntax-dispatch %%tmp3060 '(any any)))) (list %%anew3057 %%dnew3059))))))))) %%tmp3053) ((lambda (%%tmp3064) (if %%tmp3064 (apply (lambda (%%x3065) (%%vqs2984 %%x3065 %%n2986 %%b*2987 (lambda (%%b*3067 %%xnew*3068) (%%k2988 %%b*3067 (if ((letrec ((%%same?3069 (lambda (%%x*3070 %%xnew*3071) (if (null? %%x*3070) (null? %%xnew*3071) (if (not (null? %%xnew*3071)) (if (eq? (car %%x*3070) (car %%xnew*3071)) (%%same?3069 (cdr %%x*3070) (cdr %%xnew*3071)) #f) #f))))) %%same?3069) %%x3065 %%xnew*3068) %%q2985 ((lambda (%%tmp3073) ((lambda (%%tmp3074) (if %%tmp3074 (apply (lambda (%%x3075) (list->vector %%x3075)) %%tmp3074) (syntax-error %%tmp3073))) ($syntax-dispatch %%tmp3073 'each-any))) %%xnew*3068)))))) %%tmp3064) ((lambda (%%_3077) (%%k2988 %%b*2987 %%q2985)) %%tmp2989))) ($syntax-dispatch %%tmp2989 '#(vector each-any))))) ($syntax-dispatch %%tmp2989 '(any . any))))) ($syntax-dispatch %%tmp2989 '((#(free-id #structure(#4# #(#5# unsyntax-splicing #6# 790965) #86=(#7# . #83#))) . each-any) . any))))) ($syntax-dispatch %%tmp2989 '((#(free-id #structure(#4# #(#5# unsyntax #6# 790958) #86#)) . each-any) . any))))) ($syntax-dispatch %%tmp2989 '(#(free-id #structure(#4# #(#5# unsyntax #6# 725418) #86#)) any))))) ($syntax-dispatch %%tmp2989 '(#(free-id #structure(#4# #(#5# unsyntax-splicing #6# 725410) #86#)) . any))))) ($syntax-dispatch %%tmp2989 '(#(free-id #structure(#4# #(#5# unsyntax #6# 725402) #86#)) . any))))) ($syntax-dispatch %%tmp2989 '(#(free-id #structure(#4# #(#5# quasisyntax #6# 725395) #86#)) . any)))) %%q2985))) (%%vqs2984 (lambda (%%x*3078 %%n3079 %%b*3080 %%k3081) (if (null? %%x*3078) (%%k3081 %%b*3080 '()) (%%vqs2984 (cdr %%x*3078) %%n3079 %%b*3080 (lambda (%%b*3082 %%xnew*3083) ((lambda (%%tmp3084) ((lambda (%%tmp3085) (if (if %%tmp3085 (apply (lambda (%%q3086) (= %%n3079 0)) %%tmp3085) #f) (apply (lambda (%%q3087) ((lambda (%%tmp3088) ((lambda (%%tmp3089) (if %%tmp3089 (apply (lambda (%%t3090) (%%k3081 (append (map list %%t3090 %%q3087) %%b*3082) (append %%t3090 %%xnew*3083))) %%tmp3089) (syntax-error %%tmp3088))) ($syntax-dispatch %%tmp3088 'each-any))) (generate-temporaries %%q3087))) %%tmp3085) ((lambda (%%tmp3095) (if (if %%tmp3095 (apply (lambda (%%q3096) (= %%n3079 0)) %%tmp3095) #f) (apply (lambda (%%q3097) ((lambda (%%tmp3098) ((lambda (%%tmp3099) (if %%tmp3099 (apply (lambda (%%t3100) (%%k3081 (append (map (lambda (%%tmp3102 %%tmp3101) (list (cons %%tmp3101 '(#structure(#4# #(#5# ... #6# 3740129) (#7# . #87=(#structure(#9# #(t) #(#7#) #("i")) #structure(#9# #(q) #(#7#) #("i")) . #88=(#structure(#9# () () ()) #structure(#9# #(b* xnew*) #(#7# #7#) #("i" "i")) #structure(#9# () () ()) #structure(#9# #(x* n b* k) #(#7# #7# #7# #7#) #("i" "i" "i" "i")) . #84#)))))) %%tmp3102)) %%q3097 %%t3100) %%b*3082) ((lambda (%%tmp3103) ((lambda (%%tmp3104) (if %%tmp3104 (apply (lambda (%%m3105) (append (apply append %%m3105) %%xnew*3083)) %%tmp3104) (syntax-error %%tmp3103))) ($syntax-dispatch %%tmp3103 '#(each each-any)))) (map (lambda (%%tmp3108) (cons %%tmp3108 '(#structure(#4# #(#5# ... #6# 5050850) (#7# . #87#))))) %%t3100)))) %%tmp3099) (syntax-error %%tmp3098))) ($syntax-dispatch %%tmp3098 'each-any))) (generate-temporaries %%q3097))) %%tmp3095) ((lambda (%%_3110) (%%qs2983 (car %%x*3078) %%n3079 %%b*3082 (lambda (%%b*3111 %%xnew3112) (%%k3081 %%b*3111 (cons %%xnew3112 %%xnew*3083))))) %%tmp3084))) ($syntax-dispatch %%tmp3084 '(#(free-id #structure(#4# #(#5# unsyntax-splicing #6# 1446366) #89=(#7# . #88#))) . each-any))))) ($syntax-dispatch %%tmp3084 '(#(free-id #structure(#4# #(#5# unsyntax #6# 1446361) #89#)) . each-any)))) (car %%x*3078)))))))) ((lambda (%%tmp3113) ((lambda (%%tmp3114) (if %%tmp3114 (apply (lambda (%%_3115 %%x3116) (%%qs2983 %%x3116 0 '() (lambda (%%b*3117 %%xnew3118) (if (eq? %%xnew3118 %%x3116) (list '#structure(#4# #(#5# syntax #6# 1380844) (#7# . #90=(#structure(#9# () () ()) #structure(#9# #(b* xnew) #(#7# #7#) #("i" "i")) #structure(#9# #(_ x) #(#7# #7#) #("i" "i")) . #84#))) %%x3116) ((lambda (%%tmp3119) ((lambda (%%tmp3120) (if %%tmp3120 (apply (lambda (%%b3121 %%x3122) (list '#structure(#4# #(#5# with-syntax #6# 2232814) #91=(#7# #structure(#9# #(b x) #(#7# #7#) #("i" "i")) . #90#)) %%b3121 (list '#structure(#4# #(#5# syntax #6# 3609070) #91#) %%x3122))) %%tmp3120) (syntax-error %%tmp3119))) ($syntax-dispatch %%tmp3119 '(each-any any)))) (list %%b*3117 %%xnew3118)))))) %%tmp3114) (syntax-error %%tmp3113))) ($syntax-dispatch %%tmp3113 '(any any)))) %%x2982)))) (%%global-extend222 'macro 'include (lambda (%%x3124) ((lambda (%%tmp3125) ((lambda (%%tmp3126) (if (if %%tmp3126 (apply (lambda (%%include3127 %%filename3128) ((lambda (%%filename3129) ($include-file-hook %%filename3129)) (syntax->datum %%filename3128))) %%tmp3126) #f) (apply (lambda (%%include3130 %%filename3131) (datum->syntax %%include3130 (##include-file-as-a-begin-expr (%%syntax-object-expression41 %%x3124)))) %%tmp3126) (syntax-error %%tmp3125))) ($syntax-dispatch %%tmp3125 '(any any)))) %%x3124))) (%%global-extend222 'macro 'case (lambda (%%x3132) ((lambda (%%tmp3133) ((lambda (%%tmp3134) (if %%tmp3134 (apply (lambda (%%_3135 %%e3136 %%m13137 %%m23138) ((lambda (%%tmp3139) ((lambda (%%body3140) (list '#structure(#4# #(#5# let #6# 1249816) #92=(#7# #structure(#9# #(body) #(#7#) #("i")) . #93=(#structure(#9# #(_ e m1 m2) #(#7# #7# #7# #7#) #("i" "i" "i" "i")) #structure(#9# () () ()) #structure(#9# #(x) #(#7#) #("i")) #10# . #12#))) (list (list '#structure(#4# #(#5# t #6# 1643032) #92#) %%e3136)) %%body3140)) %%tmp3139)) ((letrec ((%%f3141 (lambda (%%clause3142 %%clauses3143) (if (null? %%clauses3143) ((lambda (%%tmp3144) ((lambda (%%tmp3145) (if %%tmp3145 (apply (lambda (%%e13146 %%e23147) (cons '#structure(#4# #(#5# begin #6# 3412493) (#7# #structure(#9# #(e1 e2) #(#7# #7#) #("i" "i")) . #94=(#structure(#9# () () ()) #structure(#9# #(clause clauses) #(#7# #7#) #("i" "i")) #structure(#9# #(f) #(#7#) #("i")) . #93#))) (cons %%e13146 %%e23147))) %%tmp3145) ((lambda (%%tmp3149) (if %%tmp3149 (apply (lambda (%%k3150 %%e13151 %%e23152) (list '#structure(#4# #(#5# if #6# 2298383) #95=(#7# #structure(#9# #(k e1 e2) #(#7# #7# #7#) #("i" "i" "i")) . #94#)) (list '#structure(#4# #(#5# memv #6# 2560527) #95#) '#structure(#4# #(#5# t #6# 2888207) #95#) (list '#structure(#4# #(#5# quote #6# 3019279) #95#) %%k3150)) (cons '#structure(#4# #(#5# begin #6# 3740175) #95#) (cons %%e13151 %%e23152)))) %%tmp3149) ((lambda (%%_3155) (syntax-error %%x3132)) %%tmp3144))) ($syntax-dispatch %%tmp3144 '(each-any any . each-any))))) ($syntax-dispatch %%tmp3144 '(#(free-id #structure(#4# #(#5# else #6# 1774093) (#7# . #94#))) any . each-any)))) %%clause3142) ((lambda (%%tmp3156) ((lambda (%%rest3157) ((lambda (%%tmp3158) ((lambda (%%tmp3159) (if %%tmp3159 (apply (lambda (%%k3160 %%e13161 %%e23162) (list '#structure(#4# #(#5# if #6# 3150356) #96=(#7# #structure(#9# #(k e1 e2) #(#7# #7# #7#) #("i" "i" "i")) #structure(#9# #(rest) #(#7#) #("i")) . #94#)) (list '#structure(#4# #(#5# memv #6# 3412500) #96#) '#structure(#4# #(#5# t #6# 3740180) #96#) (list '#structure(#4# #(#5# quote #6# 3871252) #96#) %%k3160)) (cons '#structure(#4# #(#5# begin #6# 3412501) #96#) (cons %%e13161 %%e23162)) %%rest3157)) %%tmp3159) ((lambda (%%_3165) (syntax-error %%x3132)) %%tmp3158))) ($syntax-dispatch %%tmp3158 '(each-any any . each-any)))) %%clause3142)) %%tmp3156)) (%%f3141 (car %%clauses3143) (cdr %%clauses3143))))))) %%f3141) %%m13137 %%m23138))) %%tmp3134) (syntax-error %%tmp3133))) ($syntax-dispatch %%tmp3133 '(any any any . each-any)))) %%x3132))) (%%global-extend222 'macro 'identifier-syntax (lambda (%%x3167) ((lambda (%%tmp3168) ((lambda (%%tmp3169) (if %%tmp3169 (apply (lambda (%%_3170 %%e3171) (list '#structure(#4# #(#5# lambda #6# 1577502) #97=(#7# #structure(#9# #(_ e) #(#7# #7#) #("i" "i")) . #98=(#structure(#9# () () ()) #structure(#9# #(x) #(#7#) #("i")) #10# . #12#))) '#structure(#4# #(#5# (#(#5# x #6# 2101790)) #6# 2036254) #97#) (list '#structure(#4# #(#5# syntax-case #6# 1708575) #97#) '#structure(#4# #(#5# x #6# 2495007) #97#) '#structure(#4# #(#5# () #6# 2626079) #97#) (list '#structure(#4# #(#5# id #6# 1839648) #97#) '#structure(#4# #(#5# (#(#5# identifier? #6# 2101792) #(#5# (#(#5# syntax #6# 2953760) #(#5# id #6# 3412512)) #6# 2888224)) #6# 2036256) #97#) (list '#structure(#4# #(#5# syntax #6# 3805728) #97#) %%e3171)) (list (cons %%_3170 '(#structure(#4# #(#5# x #6# 2036257) #97#) #structure(#4# #(#5# ... #6# 2495009) #97#))) (list '#structure(#4# #(#5# syntax #6# 2953761) #97#) (cons %%e3171 '(#structure(#4# #(#5# x #6# 3609121) #97#) #structure(#4# #(#5# ... #6# 4067873) #97#)))))))) %%tmp3169) ((lambda (%%tmp3172) (if (if %%tmp3172 (apply (lambda (%%_3173 %%id3174 %%exp13175 %%var3176 %%val3177 %%exp23178) (if (identifier? %%id3174) (identifier? %%var3176) #f)) %%tmp3172) #f) (apply (lambda (%%_3179 %%id3180 %%exp13181 %%var3182 %%val3183 %%exp23184) (list '#structure(#4# #(#5# cons #6# 725541) #99=(#7# #structure(#9# #(_ id exp1 var val exp2) #(#7# #7# #7# #7# #7# #7#) #("i" "i" "i" "i" "i" "i")) . #98#)) '#structure(#4# #(#5# (#(#5# quote #6# 1053221) #(#5# macro! #6# 1118757)) #6# 1053221) #99#) (list '#structure(#4# #(#5# lambda #6# 1118758) #99#) '#structure(#4# #(#5# (#(#5# x #6# 1643046)) #6# 1577510) #99#) (list '#structure(#4# #(#5# syntax-case #6# 1249831) #99#) '#structure(#4# #(#5# x #6# 2036263) #99#) '#structure(#4# #(#5# (#(#5# set! #6# 2232871)) #6# 2167335) #99#) (list (list '#structure(#4# #(#5# set! #6# 1446440) #99#) %%var3182 %%val3183) (list '#structure(#4# #(#5# syntax #6# 2429480) #99#) %%exp23184)) (list (cons %%id3180 '(#structure(#4# #(#5# x #6# 1643049) #99#) #structure(#4# #(#5# ... #6# 2101801) #99#))) (list '#structure(#4# #(#5# syntax #6# 2560553) #99#) (cons %%exp13181 '(#structure(#4# #(#5# x #6# 3412521) #99#) #structure(#4# #(#5# ... #6# 3871273) #99#))))) (list %%id3180 (list '#structure(#4# #(#5# identifier? #6# 1643050) #99#) (list '#structure(#4# #(#5# syntax #6# 2495018) #99#) %%id3180)) (list '#structure(#4# #(#5# syntax #6# 3346986) #99#) %%exp13181)))))) %%tmp3172) (syntax-error %%tmp3168))) ($syntax-dispatch %%tmp3168 '(any (any any) ((#(free-id #structure(#4# #(#5# set! #6# 1577506) (#7# . #98#))) any any) any)))))) ($syntax-dispatch %%tmp3168 '(any any)))) %%x3167))) (%%global-extend222 'macro 'cond-expand (lambda (%%x3185) ((lambda (%%tmp3186) ((lambda (%%tmp3187) (if %%tmp3187 (apply (lambda (%%dummy3188) '#structure(#4# #(#5# (#(#5# syntax-error #6# 1446448) #(#5# "Unfulfilled cond-expand" #6# 2298416)) #6# 1380912) (#7# #structure(#9# #(dummy) #((#100="m" . #11#)) #("i")) #101=#structure(#9# () () ()) #102=#structure(#9# #(x) #((#100# . #11#)) #("i")) . #103=(#10# . #12#)))) %%tmp3187) ((lambda (%%tmp3189) (if %%tmp3189 (apply (lambda (%%dummy3190 %%body3191) (cons '#structure(#4# #(#5# begin #6# 528946) (#7# #structure(#9# #(dummy body) #((#100# . #11#) #7#) #("i" "i")) #101# #102# . #103#)) %%body3191)) %%tmp3189) ((lambda (%%tmp3193) (if %%tmp3193 (apply (lambda (%%dummy3194 %%body3195 %%more-clauses3196) (cons '#structure(#4# #(#5# begin #6# 528948) (#7# #structure(#9# #(dummy body more-clauses) #((#100# . #11#) #7# #7#) #("i" "i" "i")) #101# #102# . #103#)) %%body3195)) %%tmp3193) ((lambda (%%tmp3198) (if %%tmp3198 (apply (lambda (%%dummy3199 %%req13200 %%req23201 %%body3202 %%more-clauses3203) (cons '#structure(#4# #(#5# cond-expand #6# 528950) #104=(#7# #structure(#9# #(dummy req1 req2 body more-clauses) #((#100# . #11#) #7# #7# #7# #7#) #("i" "i" "i" "i" "i")) #101# #102# . #103#)) (cons (list %%req13200 (cons '#structure(#4# #(#5# cond-expand #6# 660024) #104#) (cons (cons (cons '#structure(#4# #(#5# and #6# 791097) #104#) %%req23201) %%body3202) %%more-clauses3203))) %%more-clauses3203))) %%tmp3198) ((lambda (%%tmp3208) (if %%tmp3208 (apply (lambda (%%dummy3209 %%body3210 %%more-clauses3211) (cons '#structure(#4# #(#5# cond-expand #6# 528957) (#7# #structure(#9# #(dummy body more-clauses) #((#100# . #11#) #7# #7#) #("i" "i" "i")) #101# #102# . #103#)) %%more-clauses3211)) %%tmp3208) ((lambda (%%tmp3213) (if %%tmp3213 (apply (lambda (%%dummy3214 %%req13215 %%req23216 %%body3217 %%more-clauses3218) (list '#structure(#4# #(#5# cond-expand #6# 528959) #105=(#7# #structure(#9# #(dummy req1 req2 body more-clauses) #((#100# . #11#) #7# #7# #7# #7#) #("i" "i" "i" "i" "i")) #101# #102# . #103#)) (list %%req13215 (cons '#structure(#4# #(#5# begin #6# 660033) #105#) %%body3217)) (list '#structure(#4# #(#5# else #6# 594498) #105#) (cons '#structure(#4# #(#5# cond-expand #6# 660035) #105#) (cons (cons (cons '#structure(#4# #(#5# or #6# 791108) #105#) %%req23216) %%body3217) %%more-clauses3218))))) %%tmp3213) ((lambda (%%tmp3223) (if %%tmp3223 (apply (lambda (%%dummy3224 %%req3225 %%body3226 %%more-clauses3227) (list '#structure(#4# #(#5# cond-expand #6# 528967) #106=(#7# #structure(#9# #(dummy req body more-clauses) #((#100# . #11#) #7# #7# #7#) #("i" "i" "i" "i")) #101# #102# . #103#)) (list %%req3225 (cons '#structure(#4# #(#5# cond-expand #6# 660041) #106#) %%more-clauses3227)) (cons '#structure(#4# #(#5# else #6# 594506) #106#) %%body3226))) %%tmp3223) ((lambda (%%tmp3230) (if %%tmp3230 (apply (lambda (%%dummy3231 %%body3232 %%more-clauses3233) (cons '#structure(#4# #(#5# begin #6# 528972) (#7# #structure(#9# #(dummy body more-clauses) #((#100# . #11#) #7# #7#) #("i" "i" "i")) #101# #102# . #103#)) %%body3232)) %%tmp3230) ((lambda (%%tmp3235) (if %%tmp3235 (apply (lambda (%%dummy3236 %%body3237 %%more-clauses3238) (cons '#structure(#4# #(#5# begin #6# 528974) (#7# #structure(#9# #(dummy body more-clauses) #((#100# . #11#) #7# #7#) #("i" "i" "i")) #101# #102# . #103#)) %%body3237)) %%tmp3235) ((lambda (%%tmp3240) (if %%tmp3240 (apply (lambda (%%dummy3241 %%feature-id3242 %%body3243 %%more-clauses3244) (cons '#structure(#4# #(#5# cond-expand #6# 528976) (#7# #structure(#9# #(dummy feature-id body more-clauses) #((#100# . #11#) #7# #7# #7#) #("i" "i" "i" "i")) #101# #102# . #103#)) %%more-clauses3244)) %%tmp3240) (syntax-error %%tmp3186))) ($syntax-dispatch %%tmp3186 '(any (any . each-any) . each-any))))) ($syntax-dispatch %%tmp3186 '(any (#(free-id #structure(#4# #(#5# gambit #6# 1380941) (#7# #101# #102# . #103#))) . each-any) . each-any))))) ($syntax-dispatch %%tmp3186 '(any (#(free-id #structure(#4# #(#5# srfi-0 #6# 1380939) (#7# #101# #102# . #103#))) . each-any) . each-any))))) ($syntax-dispatch %%tmp3186 '(any ((#(free-id #structure(#4# #(#5# not #6# 1446470) (#7# #101# #102# . #103#))) any) . each-any) . each-any))))) ($syntax-dispatch %%tmp3186 '(any ((#(free-id #structure(#4# #(#5# or #6# 1446462) (#7# #101# #102# . #103#))) any . each-any) . each-any) . each-any))))) ($syntax-dispatch %%tmp3186 '(any ((#(free-id #structure(#4# #(#5# or #6# 1446460) (#7# #101# #102# . #103#)))) . each-any) . each-any))))) ($syntax-dispatch %%tmp3186 '(any ((#(free-id #structure(#4# #(#5# and #6# 1446453) (#7# #101# #102# . #103#))) any . each-any) . each-any) . each-any))))) ($syntax-dispatch %%tmp3186 '(any ((#(free-id #structure(#4# #(#5# and #6# 1446451) (#7# #101# #102# . #103#)))) . each-any) . each-any))))) ($syntax-dispatch %%tmp3186 '(any (#(free-id #structure(#4# #(#5# else #6# 1380913) (#7# #101# #102# . #103#))) . each-any)))))) ($syntax-dispatch %%tmp3186 '(any)))) %%x3185))) (%%global-extend222 'macro 'define-macro (lambda (%%x3246) ((lambda (%%tmp3247) ((lambda (%%tmp3248) (if %%tmp3248 (apply (lambda (%%_3249 %%name3250 %%params3251 %%body13252 %%body23253) (list '#structure(#4# #(#5# define-macro #6# 1184343) #107=(#7# #structure(#9# #(_ name params body1 body2) #(#7# #7# #7# #7# #7#) #("i" "i" "i" "i" "i")) . #108=(#structure(#9# () () ()) #structure(#9# #(x) #(#7#) #("i")) #10# . #12#))) %%name3250 (cons '#structure(#4# #(#5# lambda #6# 2429527) #107#) (cons %%params3251 (cons %%body13252 %%body23253))))) %%tmp3248) ((lambda (%%tmp3255) (if %%tmp3255 (apply (lambda (%%_3256 %%name3257 %%expander3258) (list '#structure(#4# #(#5# define-syntax #6# 1184345) #109=(#7# #structure(#9# #(_ name expander) #(#7# #7# #7#) #("i" "i" "i")) . #108#)) %%name3257 (list '#structure(#4# #(#5# lambda #6# 1315418) #109#) '#structure(#4# #(#5# (#(#5# y #6# 1839706)) #6# 1774170) #109#) (list '#structure(#4# #(#5# syntax-case #6# 1446491) #109#) '#structure(#4# #(#5# y #6# 2232923) #109#) '#structure(#4# #(#5# () #6# 2363995) #109#) (list '#structure(#4# #(#5# (#(#5# k #6# 1643100) . #(#5# args #6# 1905244)) #6# 1577564) #109#) (list '#structure(#4# #(#5# let #6# 1643101) #109#) '#structure(#4# #(#5# (#(#5# (#(#5# lst #6# 2036317) #(#5# (#(#5# syntax->datum #6# 2363997) #(#5# (#(#5# syntax #6# 3805789) #(#5# args #6# 4264541)) #6# 3740253)) #6# 2298461)) #6# 1970781)) #6# 1905245) #109#) (list '#structure(#4# #(#5# datum->syntax #6# 1774174) #109#) '#structure(#4# #(#5# (#(#5# syntax #6# 1839711) #(#5# k #6# 2298463)) #6# 1774175) #109#) (cons '#structure(#4# #(#5# apply #6# 1839712) #109#) (cons %%expander3258 '#structure(#4# (#(#5# lst #6# 2822752)) #109#)))))))))) %%tmp3255) (syntax-error %%tmp3247))) ($syntax-dispatch %%tmp3247 '(any any any))))) ($syntax-dispatch %%tmp3247 '(any (any . any) any . each-any)))) %%x3246)))))))
